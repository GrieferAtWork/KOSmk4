/* Copyright (c) 2019-2022 Griefer@Work                                       *
 *                                                                            *
 * This software is provided 'as-is', without any express or implied          *
 * warranty. In no event will the authors be held liable for any damages      *
 * arising from the use of this software.                                     *
 *                                                                            *
 * Permission is granted to anyone to use this software for any purpose,      *
 * including commercial applications, and to alter it and redistribute it     *
 * freely, subject to the following restrictions:                             *
 *                                                                            *
 * 1. The origin of this software must not be misrepresented; you must not    *
 *    claim that you wrote the original software. If you use this software    *
 *    in a product, an acknowledgement (see the following) in the product     *
 *    documentation is required:                                              *
 *    Portions Copyright (c) 2019-2022 Griefer@Work                           *
 * 2. Altered source versions must be plainly marked as such, and must not be *
 *    misrepresented as being the original software.                          *
 * 3. This notice may not be removed or altered from any source distribution. *
 */

/* Experimental (as in: not really working) support for GDB
 * (UGH! I remember this problem from way back: open-folder
 * is the only officially  supported method of getting  gdb
 * debug support without having to go through some dumb ssh
 * indirection)
 * Idea:
 *  - Try to buils sshd under cygwin and see where that gets us...
 *
 * Again: The reason I'm trying to  get away from open-folder  is
 *        because  it's insanely laggy,  where-as regular VS proj
 *        files are much faster (and have less bugs when it comes
 *        to intellisense figuring out what's going on)
 */
#undef ENABLE_GDB
#if 0
#define ENABLE_GDB
#endif

import * from deemon;
import * from ..config.configs;
import * from ..config.utils;
import * from ..config.files;
import fs;
import util;

fs.chdir(fs.headof(__FILE__) + "/../../.."); /* $PROJPATH */

global final ROOTDIR = fs.getcwd().replace("/", "\\").rstrip("\\");

global final PROJ_GUID = "3CFDCE40-7387-4CB8-BC7A-79666A98C8A6";
global final PROJ_TARGETS = Dict.Frozen(() -> {
	for (local targetName: listTargetNames()) {
		local TARGET = import(f"..targets.{targetName}");
		local VS_PROJECT_TARGET = try
			TARGET.VS_PROJECT_TARGET
		catch (...) {
			4 : "Win32",
			8 : "x64",
		}[TARGET.POINTER_SIZE];
		yield (
			f"{targetName}-kos",
			(VS_PROJECT_TARGET, {
				f"kos/include/{TARGET.XARCH}-kos",
				f"kos/src/kernel/include/{TARGET.XARCH}-kos"
			}, Tuple(
				for (local name, value: enumerateTargetSpecificMacros(targetName, TARGET))
					f"{name}={value}"
			))
		);
	}
}());
#define PORJ_TARGETS_INTERNAL_NAME(name) PROJ_TARGETS[name][0]
#define PORJ_TARGETS_INC_PATHS(name)     PROJ_TARGETS[name][1]
#define PORJ_TARGETS_DEFINES(name)       PROJ_TARGETS[name][2]
#define PORJ_TARGETS_MAGIC_NAME(name)    (name).rsstrip("-kos")

global final PROJ_CONFIGS = Dict.Frozen(() -> {
	for (local configName: listConfigurationNames()) {
		local CONFIG = getConfiguration(configName);
		local prettyName = getPrettyConfigName(CONFIG);
		yield (prettyName, {configName, Tuple(
			for (local name, value: enumerateConfigSpecificMacros(CONFIG))
				f"{name}={value}"
		)});
	}
}());
#define PROJ_CONFIGS_SHORTHAND(name) PROJ_CONFIGS[name][0]
#define PROJ_CONFIGS_DEFINES(name)   PROJ_CONFIGS[name][1]


global final FILE_KIND_MSC = 0;
global final FILE_KIND_HDR = 1;
global final FILE_KIND_SRC = 2;
global final FILE_KIND_IGN = 3;
global final HEADER_MAPPING: {string: int} = {
	"h"         : FILE_KIND_HDR,
	"inl"       : FILE_KIND_HDR,
	""          : FILE_KIND_HDR,
	"c"         : FILE_KIND_SRC,
	"stackdump" : FILE_KIND_IGN,
	"dec"       : FILE_KIND_IGN,
};

global FILES: {string: int} = Dict({
	"LICENSE" : FILE_KIND_MSC, /* Otherwise, this would be `FILE_KIND_HDR` */
});

function projRelPath(filename: string): string {
	return "..\\" + filename.replace("/", "\\");
}

function projFilterOf(filename: string): string {
	return fs.headof(filename).replace("/", "\\").strip("\\");
}


function scanFolderForFiles(path: string) {
	if (path.replace("\\", "/") in [
		"./.git",
		"./bin",
		"./build",
		"./binutils",
	])	return;
	for (local e: fs.dir(path)) {
		if (e in [".git", ".vs", ".vscode"])
			continue;
		e = fs.joinpath(path, e);
		if (fs.stat.isdir(e)) {
			scanFolderForFiles(e);
			continue;
		}
		e = e.replace("\\", "/").lsstrip("./");
		if (e !in FILES) {
			local ext = fs.extof(e);
			local typ = HEADER_MAPPING.get(ext, FILE_KIND_MSC);
			if (typ != FILE_KIND_IGN) {
				if (typ == FILE_KIND_SRC && e.startswith("kos/src/libc/magic/"))
					typ = FILE_KIND_MSC; /* Despite their .c extension, these aren't C files! */
				FILES[e] = typ;
			}
		}
	}
}

scanFolderForFiles(".");

global final SORTED_FILE_NAMES = FILES.keys.sorted();

function createVsFile(filename: string, cb: Callable) {
	print("Creating file: ", repr filename);
	local fp;
	try {
		fp = File.open(".vs/" + filename, "w");
	} catch (...) {
		try fs.mkdir(".vs"); catch (...);
		fp = File.open(".vs/" + filename, "w");
	}
	with (fp) cb(fp);
}

function injectPath(): string {
	/* For some reason, Visual Studio unsetenv's  $PATH when calling our build  script.
	 * Work around this issue by saving $PATH at the time the project files were build,
	 * so it can be injected into magic.dee, which will then restore it! */
	return f"\"--environ=PATH={fs.environ["PATH"]}\"";
}

createVsFile("kos.sln", (fp: File) -> {
	fp <<
"Microsoft Visual Studio Solution File, Format Version 12.00\n"
"# Visual Studio 15\n"
"VisualStudioVersion = 15.0.28307.1321\n"
"MinimumVisualStudioVersion = 10.0.40219.1\n"
"Project(\"{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}\") = \"kos\", \"kos.vcxproj\", \"{" << PROJ_GUID << "}\"\n"
"EndProject\n"
"Global\n"
"	GlobalSection(SolutionConfigurationPlatforms) = preSolution\n";
	for (local config: PROJ_CONFIGS.keys.sorted()) {
		for (local target: PROJ_TARGETS.keys.sorted()) {
			fp <<
"		" << config << "|" << target << " = " << config << "|" << target << "\n";
		}
	}
	fp <<
"	EndGlobalSection\n"
"	GlobalSection(ProjectConfigurationPlatforms) = postSolution\n";
	for (local config: PROJ_CONFIGS.keys.sorted()) {
		for (local target: PROJ_TARGETS.keys.sorted()) {
			local target_int = PORJ_TARGETS_INTERNAL_NAME(target);
			fp <<
"		{" << PROJ_GUID << "}." << config << "|" << target << ".ActiveCfg = " << config << "|" << target_int << "\n"
"		{" << PROJ_GUID << "}." << config << "|" << target << ".Build.0 = " << config << "|" << target_int << "\n";
		}
	}
	fp <<
"	EndGlobalSection\n"
"	GlobalSection(SolutionProperties) = preSolution\n"
"		HideSolutionNode = FALSE\n"
"	EndGlobalSection\n"
"	GlobalSection(ExtensibilityGlobals) = postSolution\n"
"		SolutionGuid = {C1CA70B0-AD60-4420-92A7-66C47921F288}\n"
"	EndGlobalSection\n"
"EndGlobal\n";
});


createVsFile("kos.vcxproj", (fp: File) -> {
	fp <<
"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n"
"<Project DefaultTargets=\"Build\" ToolsVersion=\"15.0\" xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\">\n"
"	<ItemGroup Label=\"ProjectConfigurations\">\n";
	for (local config: PROJ_CONFIGS.keys.sorted()) {
		for (local target: PROJ_TARGETS.keys.sorted()) {
			local target_int = PORJ_TARGETS_INTERNAL_NAME(target);
			fp <<
"		<ProjectConfiguration Include=\"" << config << "|" << target_int << "\">\n"
"			<Configuration>" << config << "</Configuration>\n"
"			<Platform>" << target_int << "</Platform>\n"
"		</ProjectConfiguration>\n";
		}
	}
	fp <<
"	</ItemGroup>\n"
"	<ItemGroup>\n";
	for (local name: SORTED_FILE_NAMES) {
		local typ = FILES[name];
		if (typ == FILE_KIND_HDR) {
			fp <<
"		<ClInclude Include=\"" << projRelPath(name) << "\" />\n";
		}
	}
	fp <<
"	</ItemGroup>\n"
"	<ItemGroup>\n";
	for (local name: SORTED_FILE_NAMES) {
		local typ = FILES[name];
		if (typ !in [FILE_KIND_SRC, FILE_KIND_HDR]) {
			fp <<
"		<None Include=\"" << projRelPath(name) << "\" />\n";
		}
	}
	fp <<
"	</ItemGroup>\n"
"	<ItemGroup>\n";
	for (local name: SORTED_FILE_NAMES) {
		local typ = FILES[name];
		if (typ == FILE_KIND_SRC) {
			name = projRelPath(name);
			if (name.startswith(r"..\kos\src\kernel")) {
				fp <<
"		<ClCompile Include=\"" << name << "\">\n"
"			<PreprocessorDefinitions>$(NMakePreprocessorDefinitions);__KERNEL__";
				if (name.startswith(r"..\kos\src\kernel\core"))
					fp << ";BUILDING_KERNEL_CORE";
				fp << "</PreprocessorDefinitions>\n"
"		</ClCompile>\n";
			} else {
				fp <<
"		<ClCompile Include=\"" << name << "\" />\n";
			}
		}
	}
	fp <<
"	</ItemGroup>\n"
"	<PropertyGroup Label=\"Globals\">\n"
"		<ProjectGuid>{" << PROJ_GUID << "}</ProjectGuid>\n"
"		<RootNamespace>kos</RootNamespace>\n"
#ifdef ENABLE_GDB
"		<Keyword>Linux</Keyword>\n"
"		<MinimumVisualStudioVersion>15.0</MinimumVisualStudioVersion>\n"
"		<ApplicationType>Linux</ApplicationType>\n"
"		<ApplicationTypeRevision>1.0</ApplicationTypeRevision>\n"
"		<TargetLinuxPlatform>Generic</TargetLinuxPlatform>\n"
"		<LinuxProjectType>{FC1A4D80-50E9-41DA-9192-61C0DBAA00D2}</LinuxProjectType>\n"
#else /* ENABLE_GDB */
"		<WindowsTargetPlatformVersion>8.1</WindowsTargetPlatformVersion>"
#endif /* !ENABLE_GDB */
"	</PropertyGroup>\n"
"	<Import Project=\"$(VCTargetsPath)\\Microsoft.Cpp.Default.props\" />\n";
	for (local config: PROJ_CONFIGS.keys.sorted()) {
		for (local target: PROJ_TARGETS.keys.sorted()) {
			local target_int = PORJ_TARGETS_INTERNAL_NAME(target);
			fp <<
"	<PropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='" << config << "|" << target_int << "'\" Label=\"Configuration\">\n"
"		<ConfigurationType>Makefile</ConfigurationType>\n"
"		<UseDebugLibraries>" << ("NDEBUG" in config ? "false" : "true") << "</UseDebugLibraries>\n"
#ifndef ENABLE_GDB
"		<PlatformToolset>v141</PlatformToolset>\n"
"		<CharacterSet>MultiByte</CharacterSet>\n"
#endif /* !ENABLE_GDB */
"	</PropertyGroup>\n";
		}
	}
	fp <<
"	<Import Project=\"$(VCTargetsPath)\\Microsoft.Cpp.props\" />\n"
"	<ImportGroup Label=\"ExtensionSettings\">\n"
"	</ImportGroup>\n"
"	<ImportGroup Label=\"Shared\">\n"
"	</ImportGroup>\n";
	for (local config: PROJ_CONFIGS.keys.sorted()) {
		for (local target: PROJ_TARGETS.keys.sorted()) {
			local target_int = PORJ_TARGETS_INTERNAL_NAME(target);
			fp <<
"	<ImportGroup Label=\"PropertySheets\" Condition=\"'$(Configuration)|$(Platform)'=='" << config << "|" << target_int << "'\">\n"
"		<Import Project=\"$(UserRootDir)\\Microsoft.Cpp.$(Platform).user.props\" Condition=\"exists('$(UserRootDir)\\Microsoft.Cpp.$(Platform).user.props')\" Label=\"LocalAppDataPlatform\" />\n"
"	</ImportGroup>\n";
		}
	}
	fp <<
"	<PropertyGroup Label=\"UserMacros\" />\n";
	for (local config: PROJ_CONFIGS.keys.sorted()) {
		local configShortHand = PROJ_CONFIGS_SHORTHAND(config);
		for (local target: PROJ_TARGETS.keys.sorted()) {
			local target_int = PORJ_TARGETS_INTERNAL_NAME(target);
			local incPaths = List(PORJ_TARGETS_INC_PATHS(target));
			local defines  = ["__KOS__=1", "__unix__=1"];
			incPaths.extend({ "kos/include", "kos/src/kernel/include" });
			defines.extend(PORJ_TARGETS_DEFINES(target));
			defines.extend(PROJ_CONFIGS_DEFINES(config));
			fp <<
"	<PropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='" << config << "|" << target_int << "'\">\n"
"		<IncludePath>" << ";".join(for (local p: incPaths) ROOTDIR + "\\" + p.replace("/", "\\")) << "</IncludePath>\n"
"		<OutDir>" << ROOTDIR << "\\bin\\" << target << "-" << configShortHand << "</OutDir>\n"
"		<IntDir>" << ROOTDIR << "\\build\\" << target << "-" << configShortHand << "</IntDir>\n"
"		<TargetName>os\\kernel.bin</TargetName>\n"
"		<ExecutablePath />\n"
"		<ReferencePath />\n"
"		<LibraryPath />\n"
"		<LibraryWPath />\n"
"		<SourcePath />\n"
"		<ExcludePath />\n";
		/* This  is where the actual magic happens in terms of tricking
		 * Intellisense into using its linux/gcc-compatibler sub-system
		 * https://github.com/AntonioColino/Clang/blob/f18080410d89b93da1e9e81059f39dc1081ce654/InstallShield%202015%20Projects/x64/PlatformToolsets/Clang/1033/llvm-general.xml#L160
		 */
		fp <<
"		<ToolsetISenseIdentifier>Linux</ToolsetISenseIdentifier>\n"
"		<ToolsetISenseIdentifierType>Linux</ToolsetISenseIdentifierType>\n"
"		<NMakeBuildCommandLine>C:\\Windows\\system32\\cmd.exe /C \"" << ROOTDIR << "\\binutils\\deemon\\deemon.exe"
			" " << ROOTDIR << "\\magic.dee"
			" --build-only"     /* Force rebuild */
			" --format-error-messages"
			" --target=" << PORJ_TARGETS_MAGIC_NAME(target) <<
			" --config=" << configShortHand <<
			" " << injectPath() <<
			"\"</NMakeBuildCommandLine>\n"
"		<NMakeReBuildCommandLine>C:\\Windows\\system32\\cmd.exe /C \"" << ROOTDIR << "\\binutils\\deemon\\deemon.exe"
			" " << ROOTDIR << "\\magic.dee"
			" -f"               /* Force rebuild */
			" --build-only"     /* Only build */
			" --format-error-messages"
			" --target=" << PORJ_TARGETS_MAGIC_NAME(target) <<
			" --config=" << configShortHand <<
			" " << injectPath() <<
			"\"</NMakeReBuildCommandLine>\n"
"		<NMakeCleanCommandLine>CMD_NEW</NMakeCleanCommandLine>\n" /* ??? */
"		<NMakeOutput>" << ROOTDIR << "\\bin\\" << target << "-" << configShortHand << "\\os\\kernel.bin</NMakeOutput>\n"
"		<NMakePreprocessorDefinitions>" << ";".join(defines) << "</NMakePreprocessorDefinitions>\n"
"		<NMakeForcedIncludes>" << ROOTDIR << "\\kos\\include\\compiler\\intellisense-gcc.h</NMakeForcedIncludes>\n"
"		<AdditionalOptions>-x c++ -std=c++17 -undef -nostdlib -nostdinc</AdditionalOptions>\n"
"	</PropertyGroup>\n";
		}
	}

	for (local config: PROJ_CONFIGS.keys.sorted()) {
		for (local target: PROJ_TARGETS.keys.sorted()) {
			local target_int = PORJ_TARGETS_INTERNAL_NAME(target);
			fp <<
"	<ItemDefinitionGroup Condition=\"'$(Configuration)|$(Platform)'=='" << config << "|" << target_int << "'\">\n"
"		<ClCompile>\n"
			/* This `<ClangMode>true</ClangMode>' causes `AdditionalOptions' to accept -foo style switches */
"			<ClangMode>true</ClangMode>\n"
"			<TreatWarningAsError>true</TreatWarningAsError>\n"
"			<WarningLevel>Level3</WarningLevel>\n"
"			<Optimization>" << ("Optimize" in config ? "MaxSpeed" : "Disabled") << "</Optimization>\n";
			if ("Optimize" in config) {
				fp <<
"			<FunctionLevelLinking>true</FunctionLevelLinking>\n"
"			<IntrinsicFunctions>true</IntrinsicFunctions>\n";
			}
			fp <<
"			<SDLCheck>true</SDLCheck>\n"
"		</ClCompile>\n"
"		<Link>\n"
"			<GenerateDebugInformation>true</GenerateDebugInformation>\n";
			if ("Optimize" in config) {
				fp <<
"			<EnableCOMDATFolding>true</EnableCOMDATFolding>\n"
"			<OptimizeReferences>true</OptimizeReferences>\n";
			}
			fp <<
"		</Link>\n"
"	</ItemDefinitionGroup>\n";
		}
	}
	fp <<
"	<Import Project=\"$(VCTargetsPath)\\Microsoft.Cpp.targets\" />\n"
"	<ImportGroup Label=\"ExtensionTargets\">\n"
"	</ImportGroup>\n"
"</Project>";
});


createVsFile("kos.vcxproj.filters", (fp: File) -> {
	fp <<
"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n"
"<Project ToolsVersion=\"4.0\" xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\">\n"
"	<ItemGroup>\n";
	{
		local filePaths: {string...} = HashSet();
		for (local filename: SORTED_FILE_NAMES) {
			local filter = projFilterOf(filename);
			local total = "";
			for (local part: filter.split("\\")) {
				if (total)
					total += "\\";
				total += part;
				filePaths.insert(total);
			}
		}
		filePaths.remove("");
		for (local i, path: util.enumerate(filePaths.sorted())) {
			local id = 0x1234567890ABCDEF1234567890ABCDEF + i;
			local e  = ((id) & 0xffffffffffff).hex()[2:].lower();
			local d  = ((id >> 48) & 0xffff).hex()[2:].lower();
			local c  = ((id >> 64) & 0xffff).hex()[2:].lower();
			local b  = ((id >> 80) & 0xffff).hex()[2:].lower();
			local a  = ((id >> 96) & 0xffffffff).hex()[2:].lower();
			fp <<
"		<Filter Include=\"" << path << "\">\n"
"			<UniqueIdentifier>{" << a << "-" << b << "-" << c << "-" << d << "-" << e << "}</UniqueIdentifier>\n"
"		</Filter>\n";
		}
	}

	fp <<
"	</ItemGroup>\n"
"	<ItemGroup>\n";

	function printFileFilterLocation(fp: File, decl: string, name: string) {
		local filter = projFilterOf(name);
		if (filter) {
			fp <<
"		<" << decl << " Include=\"" << projRelPath(name) << "\">\n"
"			<Filter>" << filter << "</Filter>\n"
"		</" << decl << ">\n";
		} else {
			fp <<
"		<" << decl << " Include=\"" << projRelPath(name) << "\" />\n";
		}
	}

	for (local name: SORTED_FILE_NAMES) {
		local typ = FILES[name];
		if (typ == FILE_KIND_HDR) {
			printFileFilterLocation(fp, "ClInclude", name);
		}
	}

	fp <<
"	</ItemGroup>\n"
"	<ItemGroup>";

	for (local name: SORTED_FILE_NAMES) {
		local typ = FILES[name];
		if (typ !in [FILE_KIND_SRC, FILE_KIND_HDR]) {
			printFileFilterLocation(fp, "None", name);
		}
	}

	fp <<
"	</ItemGroup>\n"
"	<ItemGroup>";

	for (local name: SORTED_FILE_NAMES) {
		local typ = FILES[name];
		if (typ == FILE_KIND_SRC) {
			printFileFilterLocation(fp, "ClCompile", name);
		}
	}

	fp <<
"	</ItemGroup>\n"
"</Project>";
});


createVsFile("kos.vcxproj.user", (fp: File) -> {
	fp <<
"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n"
"<Project ToolsVersion=\"15.0\" xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\">\n";
	for (local config: PROJ_CONFIGS.keys.sorted()) {
		local configShortHand = PROJ_CONFIGS_SHORTHAND(config);
		for (local target: PROJ_TARGETS.keys.sorted()) {
			local target_int = PORJ_TARGETS_INTERNAL_NAME(target);
			fp <<
"	<PropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='" << config << "|" << target_int << "'\">\n"
#ifdef ENABLE_GDB
"		<RemoteDebuggingMode>gdbserver</RemoteDebuggingMode>\n"
"		<DebuggerFlavor>LinuxDebugger</DebuggerFlavor>\n"
"		<RemoteDebugTarget>-1625936366;localhost (username=, port=1234, authentication=Password)</RemoteDebugTarget>\n"
"		<RemotePortNumber>1234</RemotePortNumber>\n"
"		<GDBPath>D:\\cyg\\root\\bin\\gdb.exe</GDBPath>\n"
"		<PreLaunchCommand>"
			<< ROOTDIR << "\\binutils\\deemon\\deemon.exe"
			<< " " << ROOTDIR << "\\magic.dee"
			<< " --run-only"
			<< " --format-error-messages"
			<< " --emulator=qemu"
			<< " --gdb=emulator"
			<< " --emulator-setopt=redirect.stdout=gdb.exe"
			<< " --target=" << PORJ_TARGETS_MAGIC_NAME(target)
			<< " --config=" << configShortHand
			<< "</PreLaunchCommand>\n"
#else /* ENABLE_GDB */
"		<LocalDebuggerCommand>" << ROOTDIR << "\\binutils\\deemon\\deemon.exe</LocalDebuggerCommand>\n"
"		<LocalDebuggerCommandArguments>"
			<< ROOTDIR << "\\magic.dee"
			<< " --run-only"
			<< " --format-error-messages"
			<< " --target=" << PORJ_TARGETS_MAGIC_NAME(target)
			<< " --config=" << configShortHand
			<< " " << injectPath()
			<< "</LocalDebuggerCommandArguments>\n"
"		<LocalDebuggerWorkingDirectory>" << ROOTDIR << "</LocalDebuggerWorkingDirectory>\n"
"		<DebuggerFlavor>WindowsLocalDebugger</DebuggerFlavor>\n"
#endif /* !ENABLE_GDB */
"	</PropertyGroup>\n";
		}
	}
	fp <<
"</Project>";
});

/* Generate MI engine configuration files.
 * With these, you can start KOS and attach it to VC's debugger from the CTRL+ALT+A (command) window
 * >> Debug.MIDebugLaunch /Executable:foo /OptionsFile:E:\c\kls\kos\.vs\MIOptions-i386-kos-nOD.xml
 * Though you will have to replace `E:\c\kls\kos' with what is correct for your machine
 *
 * There sadly isn't a way to trick VS into running that command automatically, or to
 * have it auto-insert the name of the current configuration (so you don't have to do
 * so by hand)
 */
for (local targetName: listTargetNames()) {
	local TARGET = import(f"..targets.{targetName}");
	for (local configName: listConfigurationNames()) {
		createVsFile(f"MIOptions-{targetName}-kos-{configName}.xml", (fp: File) -> {
			fp <<
"<LocalLaunchOptions xmlns=\"http://schemas.microsoft.com/vstudio/MDDDebuggerOptions/2014\"\n"
"	MiMode=\"gdb\"\n"
"	TargetArchitecture=\"" << {
				/* s.a. https://github.com/Microsoft/MIEngine/blob/main/src/MICore/LaunchOptions.xsd#L136 */
				"arm" : "arm",
				"arm64" : "arm64",
				"i386" : "x86",
				"x86_64" : "amd64",
				"mips" : "mips",
			}[targetName] << "\"\n"
"	MIDebuggerPath=\"gdb.exe\"\n"
"	MIDebuggerServerAddress=\"localhost:1234\"\n"
"	DebugServer=\"" << ROOTDIR << "\\binutils\\deemon\\deemon.exe\"\n"
"	DebugServerArgs=\"&quot;" << ROOTDIR << "\\magic.dee&quot;"
				" --run-only"
				" --emulator=qemu"
				" --gdb=emulator"
				" --emulator-started-pattern=EMULATOR_STARTED"
				" --emulator-setopt=redirect.stdout=gdb.exe"
				" --target=" << targetName <<
				" --config=" << configName <<
				"\"\n"
"	ServerStarted=\"EMULATOR_STARTED\"\n"
"	FilterStdout=\"true\"\n"
"	FilterStderr=\"true\"\n"
"	ServerLaunchTimeout=\"120000\"\n"
">\n"
"	<SourceMap>\n"
"		<SourceMapEntry EditorPath=\"C:\\\" CompileTimePath=\"/cygdrive/c\" UseForBreakpoints=\"true\" />\n"
"		<SourceMapEntry EditorPath=\"D:\\\" CompileTimePath=\"/cygdrive/d\" UseForBreakpoints=\"true\" />\n"
"		<SourceMapEntry EditorPath=\"E:\\\" CompileTimePath=\"/cygdrive/e\" UseForBreakpoints=\"true\" />\n"
"		<SourceMapEntry EditorPath=\"F:\\\" CompileTimePath=\"/cygdrive/f\" UseForBreakpoints=\"true\" />\n"
"		<SourceMapEntry EditorPath=\"G:\\\" CompileTimePath=\"/cygdrive/g\" UseForBreakpoints=\"true\" />\n"
"		<SourceMapEntry EditorPath=\"H:\\\" CompileTimePath=\"/cygdrive/h\" UseForBreakpoints=\"true\" />\n"
"		<SourceMapEntry EditorPath=\"I:\\\" CompileTimePath=\"/cygdrive/i\" UseForBreakpoints=\"true\" />\n"
"		<SourceMapEntry EditorPath=\"J:\\\" CompileTimePath=\"/cygdrive/j\" UseForBreakpoints=\"true\" />\n"
"		<SourceMapEntry EditorPath=\"K:\\\" CompileTimePath=\"/cygdrive/k\" UseForBreakpoints=\"true\" />\n"
"		<SourceMapEntry EditorPath=\"X:\\\" CompileTimePath=\"/cygdrive/x\" UseForBreakpoints=\"true\" />\n"
"		<SourceMapEntry EditorPath=\"Y:\\\" CompileTimePath=\"/cygdrive/y\" UseForBreakpoints=\"true\" />\n"
"		<SourceMapEntry EditorPath=\"Z:\\\" CompileTimePath=\"/cygdrive/z\" UseForBreakpoints=\"true\" />\n"
"	</SourceMap>\n"
"	<CustomLaunchSetupCommands>\n"
"		<Command IgnoreFailures=\"false\" Description=\".\">cd " << ROOTDIR << "</Command>\n"
"		<Command IgnoreFailures=\"false\" Description=\".\">set sysroot bin/" << targetName << "-kos-" << configName << "</Command>\n"
"		<Command IgnoreFailures=\"false\" Description=\".\">set architecture " << TARGET.GDBARCH << "</Command>\n"
"		<Command IgnoreFailures=\"false\" Description=\".\">target remote localhost:1234</Command>\n"
"		<Command IgnoreFailures=\"true\" Description=\".\">file bin/" << targetName << "-kos-" << configName << "/os/kernel.bin</Command>\n"
"	</CustomLaunchSetupCommands>\n"
"	<SetupCommands>\n"
"		<Command IgnoreFailures=\"true\" Description=\".\">-enable-pretty-printing</Command>\n"
"		<Command IgnoreFailures=\"true\" Description=\".\">set print pretty on</Command>\n"
"		<Command IgnoreFailures=\"true\" Description=\".\">set print object on</Command>\n"
"		<Command IgnoreFailures=\"true\" Description=\".\">set print static-members on</Command>\n"
"		<Command IgnoreFailures=\"true\" Description=\".\">set print vtbl on</Command>\n"
"		<Command IgnoreFailures=\"true\" Description=\".\">set print demangle on</Command>\n"
"		<Command IgnoreFailures=\"true\" Description=\".\">set demangle-style gnu-v3</Command>\n"
"		<Command IgnoreFailures=\"true\" Description=\".\">set print sevenbit-strings off</Command>\n"
"	</SetupCommands>\n"
"</LocalLaunchOptions>\n";
/*<PipeLaunchOptions xmlns="http://schemas.microsoft.com/vstudio/MDDDebuggerOptions/2014"
	PipePath="D:\cyg\root\bin\bash.exe"
	PipeCommandArguments="-c"
	PipeArguments="-c 'gdb - -interpreter=mi'"
	MiMode="gdb"
	ExePath="/os/kernel.bin"
	TargetArchitecture="x86"
	PipeCwd="E:\c\kls\kos"
	WorkingDirectory="/"
>
	<CustomLaunchSetupCommands>
		<Command IgnoreFailures="false" Description=".">set sysroot bin/i386-kos-nOD</Command>
		<Command IgnoreFailures="false" Description=".">set architecture i386:intel</Command>
		<Command IgnoreFailures="false" Description=".">target remote localhost:1234</Command>
		<Command IgnoreFailures="true" Description=".">file bin/i386-kos-nOD/os/kernel.bin</Command>
	</CustomLaunchSetupCommands>
</PipeLaunchOptions>*/
		});
	}
}
