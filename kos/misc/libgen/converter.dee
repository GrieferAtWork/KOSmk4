/* Copyright (c) 2019-2021 Griefer@Work                                       *
 *                                                                            *
 * This software is provided 'as-is', without any express or implied          *
 * warranty. In no event will the authors be held liable for any damages      *
 * arising from the use of this software.                                     *
 *                                                                            *
 * Permission is granted to anyone to use this software for any purpose,      *
 * including commercial applications, and to alter it and redistribute it     *
 * freely, subject to the following restrictions:                             *
 *                                                                            *
 * 1. The origin of this software must not be misrepresented; you must not    *
 *    claim that you wrote the original software. If you use this software    *
 *    in a product, an acknowledgement (see the following) in the product     *
 *    documentation is required:                                              *
 *    Portions Copyright (c) 2019-2021 Griefer@Work                           *
 * 2. Altered source versions must be plainly marked as such, and must not be *
 *    misrepresented as being the original software.                          *
 * 3. This notice may not be removed or altered from any source distribution. *
 */

import * from deemon;
import * from util;
import * from .strendN;

/* Helpers for generating conversions between different values.
 * Example:
 * >> #define FOO_myvalue  0
 * >> #define FOO_myvalue2 1
 * >> #define FOO_myvalue3 2
 * >>
 * >> #define BAR_myvalue  91
 * >> #define BAR_myvalue2 17
 * >> #define BAR_myvalue3 13
 *
 * [[[deemon
 * import * from deemon;
 * import * from .strendN;
 * import * from .converter;
 * local macros: {string: int} = Dict(enumerateIntegerMacrosFromFile(__FILE__));
 * printArrayDefineMacro("DEFINE_FOO2BAR", generateArrayMapping(macros, "FOO_", "BAR_"));
 * ]]]
#define DEFINE_FOO2BAR(name) \
	__UINT8_TYPE__ const name[3] = { 91, 17, 13 }
 * [[[end]]]
 *
 * >> static DEFINE_FOO2BAR(_a_foo2bar);
 * >> // @param: foo: One of `FOO_*'
 * >> // @return: * : One of `BAR_*' (corresponding to `foo')
 * >> #define foo2bar(foo) ((foo) >= COMPILER_LENOF(_a_foo2bar) ? ERROR : _a_foo2bar[foo])
 *
 */


function getMacrosFromPattern(
		macros: {string: int}, prefix: string): {(string, int)...} {
	for (local name, value: macros) {
		if (name.startswith(prefix))
			yield (name, value);
	}
}

function generateArrayMapping(
		macros: {string: int}, fromPrefix: string,
		toPrefix: string, errorValue: string = none): {int | none...} {
	if (errorValue !is none)
		errorValue = macros.get(errorValue, errorValue);
	local toMacros: {string: int} = Dict();
	for (local name, value: getMacrosFromPattern(macros, toPrefix))
		toMacros[name[#toPrefix:].lower()] = value;
	local result = [];
	for (local name, value: getMacrosFromPattern(macros, fromPrefix)) {
		if (value >= #result)
			result.resize(value + 1, errorValue);
		name = name[#fromPrefix:].lower();
		local newval = toMacros.get(name, errorValue);
		if (errorValue == result[value])
			result[value] = newval;
		else if (errorValue != newval && result[value] != newval) {
			throw Error("Ambiguous mapping for {!r}={!r} (both {!r} and {!r})"
				.format({ name, value, result[value], newval }));
		}
	}
	while (result && errorValue == result.last)
		result.popback();
	if (!result)
		result.append(errorValue); // Ensure non-empty
	return result;
}

function printArrayDefineMacro(macroName: string, array: {int | none...}) {
	final local MAX_VALUES_PER_LINE = 16;
	local items = List(array);
	local maxValue = max(for (local x: items) if (x !is none) x);
	local elemType = maxValue > 0xffff
		? "__UINT32_TYPE__"
		: maxValue > 0xff
		? "__UINT16_TYPE__"
		: "__UINT8_TYPE__";
	for (local i = 0; i < #items; ++i) {
		if (items[i] is none) {
			items[i] = maxValue = {
				"__UINT32_TYPE__" : 0xffffffff,
				"__UINT16_TYPE__" : 0xffff,
				"__UINT8_TYPE__" : 0xff,
			}[elemType];
		}
	}
	local elemWidth = #str(maxValue);
	local namePrefix = " const name[" + #items + "] = { ";
	local lineWidth = #elemType + #namePrefix +
		min(MAX_VALUES_PER_LINE, #items) * (elemWidth + 2);
	local firstLine = "#define " + macroName + "(name) ";
	local isMultiLine = #items > MAX_VALUES_PER_LINE;
	if (#firstLine < lineWidth + 4 && isMultiLine)
		firstLine += " " * ((lineWidth + 4) - #firstLine);
	print(firstLine, "\\");
	print("\t", elemType, namePrefix),;
	local linePrefix = "\t" + (" " * (#elemType + #namePrefix));
	while (#items > MAX_VALUES_PER_LINE) {
		local part = items[:MAX_VALUES_PER_LINE];
		items = items[MAX_VALUES_PER_LINE:];
		for (local e: part) {
			e = str(e);
			print(e, ", ", " " * (elemWidth - #e)),;
		}
		print("\\\n", linePrefix),;
	}
	while (items) {
		local e = str(items.popfront());
		print(e),;
		if (items) {
			print(", "),;
			if (isMultiLine)
				print(" " * (elemWidth - #e)),;
		}
	}
	print(" }");
}
