/* Copyright (c) 2019-2025 Griefer@Work                                       *
 *                                                                            *
 * This software is provided 'as-is', without any express or implied          *
 * warranty. In no event will the authors be held liable for any damages      *
 * arising from the use of this software.                                     *
 *                                                                            *
 * Permission is granted to anyone to use this software for any purpose,      *
 * including commercial applications, and to alter it and redistribute it     *
 * freely, subject to the following restrictions:                             *
 *                                                                            *
 * 1. The origin of this software must not be misrepresented; you must not    *
 *    claim that you wrote the original software. If you use this software    *
 *    in a product, an acknowledgement (see the following) in the product     *
 *    documentation is required:                                              *
 *    Portions Copyright (c) 2019-2025 Griefer@Work                           *
 * 2. Altered source versions must be plainly marked as such, and must not be *
 *    misrepresented as being the original software.                          *
 * 3. This notice may not be removed or altered from any source distribution. *
 */

import * from deemon;
import * from ..autom8;
import CFI = ..cfi.comp;
import fs;

/* Integration for the CFI compiler into autom8 source tags */



@@Helper function for @"x86" architecture portable CFI expressions
function processX86AssemblyBodyLines(body: string, is386: bool): {string...} {
#define CONTEXT_NORMAL      0
#define CONTEXT_AFTER_IF0   1
#define CONTEXT_AFTER_IF1   2
#define CONTEXT_AFTER_ELSE0 3
#define CONTEXT_AFTER_ELSE1 4
	local context = CONTEXT_NORMAL;
	for (local line: body.splitlines(false)) {
		local strippedLine = line.strip();
		if (strippedLine.startswith("#if")) {
			local isX64 = {
				"#ifdef __x86_64__"  : true,
				"#ifndef __x86_64__" : false,
				"#ifdef __i386__"    : false,
				"#ifndef __i386__"   : true,
			}.get(strippedLine);
			if (context != CONTEXT_NORMAL)
				throw Error("#if.. directive in invalid context: " + repr strippedLine);
			if (isX64 is none)
				throw Error("Unknown directive: " + repr strippedLine);
			if (isX64 ^ is386) {
				context = CONTEXT_AFTER_IF1;
			} else {
				context = CONTEXT_AFTER_IF0;
			}
			continue;
		}
		if (strippedLine.startswith("#else")) {
			if (context == CONTEXT_AFTER_IF1) {
				context = CONTEXT_AFTER_ELSE0;
			} else if (context == CONTEXT_AFTER_IF0) {
				context = CONTEXT_AFTER_ELSE1;
			} else {
				throw Error("#else directive in invalid context: " + repr strippedLine);
			}
			continue;
		}
		if (strippedLine.startswith("#endif")) {
			if (context == CONTEXT_NORMAL)
				throw Error("#endif directive in invalid context: " + repr strippedLine);
			context = CONTEXT_NORMAL;
			continue;
		}
		if (context in [CONTEXT_NORMAL, CONTEXT_AFTER_IF1, CONTEXT_AFTER_ELSE1])
			yield line;
	}
}

@@Helper function for @"x86" architecture portable CFI expressions
function processX86AssemblyBody(body: string, is386: bool): string {
	return "\n".join(processX86AssemblyBodyLines(body, is386));
}


function main(parser: Autom8Parser, body: string) {
	body = body.lstrip();
	if (!body.startswith("{"))
		throw Error(f"Expected '\{' after '[[[cfi', but got {repr body}");
	local i = 1;
	local arch = none;
	local register = none;
	local mode = none;
	for (;;) {
		if (i >= #body)
			throw Error(f"Unmatched '\{' after '[[[cfi\{' in {repr body}");
		if (body[i] == "}") {
			++i;
			break;
		}
		if (body.isspace(i)) {
			++i;
			continue;
		}
		if (!body.issymstrt(i))
			throw Error(f"Expected keyword after [[[cfi\{, but got {repr body[i]}");
		local kwdStart = i;
		do {
			++i;
		} while (i < #body && body.issymcont(i));
		local kwd = body[kwdStart:i];
		while (i < #body && body.isspace(i))
			++i;
		if (i >= #body || body[i] !in ":=")
			throw Error(f"Expected ':' or '=' after [[[cfi\{{kwd}");
		do {
			++i;
		} while (i < #body && body.isspace(i));
		if (i >= #body || body[i] !in "\"\'")
			throw Error(f"Expected '\\\'' or '\"' after [[[cfi\{{kwd}=");
		local endCh = body[i];
		++i;
		local valueStart = i;
		for (;;) {
			if (i >= #body)
				throw Error(f"Unmatched {repr endCh} in {repr body}");
			local ch = body[i];
			if (ch == r"\") {
				i += 2;
				continue;
			} else if (ch == endCh) {
				break;
			} else {
				++i;
			}
		}
		local value = body[valueStart:i].decode("c-escape");
		switch (kwd) {
		case "arch":     arch = value; break;
		case "register": register = value; break;
		case "mode":     mode = value; break;
		default:
			throw Error(f"Unknown attribute: {repr kwd}");
		}
		do {
			++i;
		} while (i < #body && body.isspace(i));
		if (i < #body && body[i] == ",") {
			do {
				++i;
			} while (i < #body && body.isspace(i));
		}
	}
	if (arch is none) {
		if ("i386" in parser.filename) {
			local baseName = fs.tailof(parser.filename);
			if ("32" in baseName && "64" !in baseName) {
				arch = "i386";
			} else if ("64" in baseName && "32" !in baseName) {
				arch = "x86_64";
			} else if ("64" !in baseName && "32" !in baseName) {
				arch = "x86";
			}
		}
		if (arch is none) {
			if (register !is none) {
				/* TODO: Enumerate all support  arches (fs.dir("../cfi/arch"))  and
				 *       load each one in turn. If we find that exactly one of them
				 *       defines a register named `register', then we know that  it
				 *       must be the arch our caller is referring to. */
			}
			if (arch is none)
				throw Error(f"Attribute 'arch' not set by {repr body[:i]}");
		}
	}
	if (register is none)
		throw Error(f"Attribute 'register' not set by {repr body[:i]}");
	body = body[i:];
	local autoEnd = parser.text.find("/*[[[end]]]*/", parser.commentEnd);
	if (autoEnd < 0)
		parser.errAt(parser.commentStart, "Missing /*[[[end]]]*/ tag");
	parser.newText << parser.text[parser.flushStart:parser.commentEnd + 2] << "\n";
	parser.flushStart = autoEnd + 13;

	/* Generate CFI instrumentation */
	if (mode is none) {
		if (parser.filename.endswith(".S")) {
			mode = "asm";
		} else {
			mode = "default";
		}
	}
	function doTheThing(arch: string, body: string) {
		if (mode == "default") {
			CFI.outputForAssembly(arch, register, body, outputFile: parser.newText);
		} else if (mode == "asm") {
			CFI.outputForAssembly(arch, register, body, outputFile: parser.newText,
				linePrefix: "", lineSuffix: "", asmArgPrefix: "", asmArgSuffix: "");
		} else if (mode == "bytes") {
			local asm = CFI.Assembler(arch, body);
			local data = List(asm.assemble(register));
			if (#data != 1 || data.first.first != "1")
				throw Error("CFI bytes contain conditional code (cannot output)");
			data = data.first.last;
			parser.newText << "\t" << ",\n\t".join(
				for (local line: data.segments(16))
					",".join(line)) << "\n";
		} else if (mode.startswith("macro:")) {
			local macroName = mode[6:];
			if (!macroName.issymbol())
				throw Error("Macro name " + repr macroName + " not a valid symbol name");
			local fp = File.Writer();
			CFI.outputForAssembly(arch, register, body, outputFile: fp);
			parser.newText << "#define " << macroName << " \\\n";
			parser.newText << "\t" << " \\\n\t".join(fp.string.strip().splitlines(false)) << "\n";
		} else {
			throw Error("Unsupported CFI mode: " + repr mode);
		}
	}
	if (arch == "x86") {
		/* Helper to easily generate portable x86 instrumentation */
		parser.newText << "#ifdef __x86_64__\n";
		doTheThing("x86_64", processX86AssemblyBody(body, false));
		parser.newText << "#else /* __x86_64__ */\n";
		doTheThing("i386", processX86AssemblyBody(body, true));
		parser.newText << "#endif /* !__x86_64__ */\n";
	} else {
		doTheThing(arch, body);
	}

	parser.newText << "/*[[[end]]]*/";
}
