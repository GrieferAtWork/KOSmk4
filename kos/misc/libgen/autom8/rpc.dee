/* Copyright (c) 2019-2021 Griefer@Work                                       *
 *                                                                            *
 * This software is provided 'as-is', without any express or implied          *
 * warranty. In no event will the authors be held liable for any damages      *
 * arising from the use of this software.                                     *
 *                                                                            *
 * Permission is granted to anyone to use this software for any purpose,      *
 * including commercial applications, and to alter it and redistribute it     *
 * freely, subject to the following restrictions:                             *
 *                                                                            *
 * 1. The origin of this software must not be misrepresented; you must not    *
 *    claim that you wrote the original software. If you use this software    *
 *    in a product, an acknowledgement (see the following) in the product     *
 *    documentation is required:                                              *
 *    Portions Copyright (c) 2019-2021 Griefer@Work                           *
 * 2. Altered source versions must be plainly marked as such, and must not be *
 *    misrepresented as being the original software.                          *
 * 3. This notice may not be removed or altered from any source distribution. *
 */

import * from deemon;
import * from ..autom8;
import RPC = ..cfi.rpc;
import fs;

/* Integration for the RPC compiler into autom8 source tags */

function main(parser: Autom8Parser, body: string) {
	body = body.lstrip();
	if (!body.startswith("{"))
		throw Error("Expected '{' after '[[[rpc', but got " + repr body);
	local i = 1;
	local arch = none;
	local mode = none;
	for (;;) {
		if (i >= #body)
			throw Error("Unmatched '{' after '[[[rpc{' in " + repr body);
		if (body[i] == "}") {
			++i;
			break;
		}
		if (body.isspace(i)) {
			++i;
			continue;
		}
		if (!body.issymstrt(i))
			throw Error("Expected keyword after [[[rpc{, but got " + repr body[i]);
		local kwdStart = i;
		do {
			++i;
		} while (i < #body && body.issymcont(i));
		local kwd = body[kwdStart:i];
		while (i < #body && body.isspace(i))
			++i;
		if (i >= #body || body[i] !in ":=")
			throw Error("Expected ':' or '=' after [[[rpc{" + kwd);
		do {
			++i;
		} while (i < #body && body.isspace(i));
		if (i >= #body || body[i] !in "\"\'")
			throw Error("Expected '\\\'' or '\"' after [[[rpc{" + kwd + "=");
		local endCh = body[i];
		++i;
		local valueStart = i;
		for (;;) {
			if (i >= #body)
				throw Error("Unmatched " + repr endCh + " in " + repr body);
			local ch = body[i];
			if (ch == "\\") {
				i += 2;
				continue;
			} else if (ch == endCh) {
				break;
			} else {
				++i;
			}
		}
		local value = body[valueStart:i].decode("c-escape");
		switch (kwd) {
		case "arch": arch = value; break;
		case "mode": mode = value; break;
		default:
			throw Error("Unknown attribute: " + repr kwd);
		}
		do {
			++i;
		} while (i < #body && body.isspace(i));
		if (i < #body && body[i] == ",") {
			do {
				++i;
			} while (i < #body && body.isspace(i));
		}
	}
	if (arch is none) {
		if ("i386" in parser.filename) {
			local baseName = fs.tailof(parser.filename);
			if ("32" in baseName && "64" !in baseName) {
				arch = "i386";
			} else if ("64" in baseName && "32" !in baseName) {
				arch = "x86_64";
			} else if ("64" !in baseName && "32" !in baseName) {
				arch = "x86";
			}
		}
		if (arch is none)
			throw Error("Attribute 'arch' not set by " + repr body[:i]);
	}
	body = body[i:];
	local autoEnd = parser.text.find("/*[[[end]]]*/", parser.commentEnd);
	if (autoEnd < 0)
		parser.errAt(parser.commentStart, "Missing /*[[[end]]]*/ tag");
	parser.newText << parser.text[parser.flushStart:parser.commentEnd+2] << "\n";
	parser.flushStart = autoEnd + 13;

	/* Generate RPC instrumentation */
	if (mode is none) {
		if (parser.filename.endswith(".S")) {
			mode = "asm";
		} else {
			mode = "default";
		}
	}
	function doTheThing(arch: string) {
		local bytes = RPC.assemble(arch, body);
		if (mode == "default" || mode == "bytes") {
			parser.newText << "\t" << ",\n\t".join(
				for (local line: bytes.segments(16))
					",".join(line)) << "\n";
		} else if (mode == "asm") {
			parser.newText << "\t.byte " << ",\n\t".join(
				for (local line: bytes.segments(16))
					",".join(line)) << "\n";
		} else if (mode.startswith("macro:")) {
			local macroName = mode[6:];
			if (!macroName.issymbol())
				throw Error("Macro name " + repr macroName + " not a valid symbol name");
			parser.newText << "#define " << macroName << " \\\n";
			parser.newText << "\t" << ",\\\n\t".join(
				for (local line: bytes.segments(16))
					",".join(line)) << "\n";
		} else {
			throw Error("Unsupported RPC mode: " + repr mode);
		}
	}
	if (arch == "x86") {
		/* Helper to easily generate portable x86 instrumentation */
		parser.newText << "#ifdef __x86_64__\n";
		doTheThing("x86_64");
		parser.newText << "#else /* __x86_64__ */\n";
		doTheThing("i386");
		parser.newText << "#endif /* !__x86_64__ */\n";
	} else {
		doTheThing(arch);
	}

	parser.newText << "/*[[[end]]]*/";
}
