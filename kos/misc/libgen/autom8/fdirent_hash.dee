/* Copyright (c) 2019-2021 Griefer@Work                                       *
 *                                                                            *
 * This software is provided 'as-is', without any express or implied          *
 * warranty. In no event will the authors be held liable for any damages      *
 * arising from the use of this software.                                     *
 *                                                                            *
 * Permission is granted to anyone to use this software for any purpose,      *
 * including commercial applications, and to alter it and redistribute it     *
 * freely, subject to the following restrictions:                             *
 *                                                                            *
 * 1. The origin of this software must not be misrepresented; you must not    *
 *    claim that you wrote the original software. If you use this software    *
 *    in a product, an acknowledgement (see the following) in the product     *
 *    documentation is required:                                              *
 *    Portions Copyright (c) 2019-2021 Griefer@Work                           *
 * 2. Altered source versions must be plainly marked as such, and must not be *
 *    misrepresented as being the original software.                          *
 * 3. This notice may not be removed or altered from any source distribution. *
 */
import * from deemon;
import * from ..autom8;
import * from ..fdirent_hash;

@@This module works in 1 of 2 ways:
@@
@@First method:
@@>> "foo" /*[[[fdirent_hash]]]*/FDIRENT_HASH_INIT(...)/*[[[end]]]*/
@@
@@Second method:
@@>> /*[[[fdirent_hash:A("foo", $$)]]]*/A("foo", FDIRENT_HASH_INIT(...))/*[[[end]]]*/
function main(parser: Autom8Parser, body: string) {
	local autoEnd = parser.text.find("/*[[[end]]]*/", parser.commentEnd);
	if (autoEnd < 0)
		parser.errAt(parser.commentStart, "Missing /*[[[end]]]*/ tag");
	parser.newText << parser.text[parser.flushStart:parser.commentEnd+2];
	parser.flushStart = autoEnd + 13;
	body = body.strip();
	if (!body) {
		local lineEnd   = parser.commentStart;
		local lineStart = parser.text.rfind("\n", 0, lineEnd) + 1;
		local line = parser.text[lineStart:lineEnd];
		if (line.count("\"") != 2)
			throw Error("Unable to auto-determine hashable string in " + repr line);
		local nameStart = line.index("\"") + 1;
		local nameEnd = line.index("\"", nameStart);
		local name = line[nameStart:nameEnd].decode("c-escape");
		parser.newText << str(fdirent_hash(name));
	} else {
		if (!body.startswith(":"))
			throw Error("Invalid warning directive: " + repr body);
		body = body[1:].lstrip();

		local nameStart = body.index("\"") + 1;
		local nameEnd = body.index("\"", nameStart);
		local name = body[nameStart:nameEnd].decode("c-escape");
		parser.newText << body.replace("$$", str(fdirent_hash(name)));
	}
	parser.newText << "/*[[[end]]]*/";
}
