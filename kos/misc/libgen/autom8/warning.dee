/* Copyright (c) 2019-2022 Griefer@Work                                       *
 *                                                                            *
 * This software is provided 'as-is', without any express or implied          *
 * warranty. In no event will the authors be held liable for any damages      *
 * arising from the use of this software.                                     *
 *                                                                            *
 * Permission is granted to anyone to use this software for any purpose,      *
 * including commercial applications, and to alter it and redistribute it     *
 * freely, subject to the following restrictions:                             *
 *                                                                            *
 * 1. The origin of this software must not be misrepresented; you must not    *
 *    claim that you wrote the original software. If you use this software    *
 *    in a product, an acknowledgement (see the following) in the product     *
 *    documentation is required:                                              *
 *    Portions Copyright (c) 2019-2022 Griefer@Work                           *
 * 2. Altered source versions must be plainly marked as such, and must not be *
 *    misrepresented as being the original software.                          *
 * 3. This notice may not be removed or altered from any source distribution. *
 */

import * from deemon;
import * from ..autom8;
import * from ..c.ppexpr;

function stringParen(s: string): string {
	s = s.strip();
	while (s.startswith("(") && s.endswith(")") &&
	       s.findmatch("(", ")", 1) == #s - 1)
		s = s[1:-1].strip();
	return s;
}

@@Mapping for warning names to compiler support expressions.
global final COMPILER_WARNING_SUPPORT_EXPRESSIONS: {string: string} = {
	"-Wreturn-local-addr" : "defined(__GNUC__)", /* TODO: Version? */
};

function getPpCondForCompilerWarningSupport(name: string): string {
	return COMPILER_WARNING_SUPPORT_EXPRESSIONS
		.get(name, "defined(__GNUC__)");
}

@@Stack of active compiler warnings
global WARNINGS_STACK: {string...} = [];

function operator_push_ignored(fp: File, arg: string) {
	if (!arg.startswith("\"") || !arg.endswith("\""))
		throw Error("`warning push_ignored` expects a string, but was given " + repr arg);
	local warningName = arg[1:-1].decode("c-escape");
	WARNINGS_STACK.append(warningName);
	local expr = getPpCondForCompilerWarningSupport(warningName);
	fp << optimizeForIfdef(expr)
	   << "#pragma GCC diagnostic push\n"
	   << "#pragma GCC diagnostic ignored " << repr(warningName) << "\n"
	   << optimizeForEndif(expr);
}

function operator_pop(fp: File, arg: string) {
	if (arg)
		throw Error("`warning pop` doesn't take any arguments, but was given " + repr arg);
	if (!WARNINGS_STACK)
		throw Error("Warnings stack is empty");
	local warningName = WARNINGS_STACK.popback();
	local expr = getPpCondForCompilerWarningSupport(warningName);
	fp << optimizeForIfdef(expr)
	   << "#pragma GCC diagnostic pop\n"
	   << optimizeForEndif(expr);
}

function operator_warn(fp: File, body: string, error: bool = false) {
	if (!body.startswith("\"") || !body.endswith("\""))
		throw Error("`warning warn` expects a string, but was given " + repr body);
	body = body[1:-1].decode("c-escape").unifylines().strip("\n").splitlines(false);
	local common = none;
	for (local line: body)
		common = common is none ? line : line[:line.common(common)];
	common = #common - #common.lstrip();
	body = "\n".join(for (local line: body) line[common:].rstrip());
	body = body.replace(r'"', r'\"').replace("\n", " \\\n");
	if ("\n" in body)
		body = "\\\n" + body;
	body = f'"{body}"';
	fp << "#ifndef __NO_WARNINGS\n"
	      "#ifdef __PREPROCESSOR_HAVE_WARNING\n"
	      "#warning " << body << "\n"
	      "#elif defined(__PREPROCESSOR_HAVE_PRAGMA_WARNING)\n"
	      "#pragma warning(" << body << ")\n";
	if (error) {
		fp << "#else /* ... */\n"
		      "#error " << body << "\n"
		      "#endif /* !... */\n";
	} else {
		fp << "#endif /* ... */\n";
	}
	fp << "#endif /* !__NO_WARNINGS */\n";
}

function operator_warn_or_error(fp: File, body: string) {
	return operator_warn(fp, body, true);
}

global final OPERATORS: {string: Callable} = {
	"push_ignored"  : operator_push_ignored,
	"pop"           : operator_pop,
	"warn"          : operator_warn,
	"warn_or_error" : operator_warn_or_error,
};

function main(parser: Autom8Parser, body: string) {
	body = stringParen(body);
	local command;
	if (!body || !body.issymstrt(0))
		throw Error("Invalid warning directive: " + repr body);
	local commandEnd = 1;
	while (commandEnd < #body && body.issymcont(commandEnd))
		++commandEnd;
	command = body[:commandEnd];
	body = stringParen(body[commandEnd:]);

	local autoEnd = parser.text.find("/*[[[end]]]*/", parser.commentEnd);
	if (autoEnd < 0)
		parser.errAt(parser.commentStart, "Missing /*[[[end]]]*/ tag");
	parser.newText << parser.text[parser.flushStart:parser.commentEnd+2] << "\n";
	parser.flushStart = autoEnd + 13;

	/* Invoke the command-specific handler. */
	OPERATORS[command](parser.newText, body);

	parser.newText << "/*[[[end]]]*/";
}
