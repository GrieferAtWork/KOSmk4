/* Copyright (c) 2018 Griefer@Work                                            *
 *                                                                            *
 * This software is provided 'as-is', without any express or implied          *
 * warranty. In no event will the authors be held liable for any damages      *
 * arising from the use of this software.                                     *
 *                                                                            *
 * Permission is granted to anyone to use this software for any purpose,      *
 * including commercial applications, and to alter it and redistribute it     *
 * freely, subject to the following restrictions:                             *
 *                                                                            *
 * 1. The origin of this software must not be misrepresented; you must not    *
 *    claim that you wrote the original software. If you use this software    *
 *    in a product, an acknowledgement in the product documentation would be  *
 *    appreciated but is not required.                                        *
 * 2. Altered source versions must be plainly marked as such, and must not be *
 *    misrepresented as being the original software.                          *
 * 3. This notice may not be removed or altered from any source distribution. *
 */

import * from deemon;

@@[+4|8] +uintptr_t constant address
global final DW_OP_addr = 0x03;

@@[+0]   TOP = *(uintptr_t *)TOP;
global final DW_OP_deref = 0x06;

@@[+1]   PUSH(*(u8 *)pc);
global final DW_OP_const1u = 0x08;

@@[+1]   PUSH(*(s8 *)pc);
global final DW_OP_const1s = 0x09;

@@[+2]   PUSH(*(u16 *)pc);
global final DW_OP_const2u = 0x0a;

@@[+2]   PUSH(*(s16 *)pc);
global final DW_OP_const2s = 0x0b;

@@[+4]   PUSH(*(u32 *)pc);
global final DW_OP_const4u = 0x0c;

@@[+4]   PUSH(*(s32 *)pc);
global final DW_OP_const4s = 0x0d;

@@[+8]   PUSH(*(u64 *)pc);
global final DW_OP_const8u = 0x0e;

@@[+8]   PUSH(*(s64 *)pc);
global final DW_OP_const8s = 0x0f;

@@[+*]   PUSH(dwarf_decode_uleb128(&pc));
global final DW_OP_constu = 0x10;

@@[+*]   PUSH(dwarf_decode_sleb128(&pc));
global final DW_OP_consts = 0x11;

@@[+0]   PUSH(TOP);
global final DW_OP_dup = 0x12;

@@[+0]   POP();
global final DW_OP_drop = 0x13;

@@[+0]   PUSH(SECOND);
global final DW_OP_over = 0x14;

@@[+1]   PUSH(NTH(*(u8 *)pc));  // Where operand=0 is the old TOP
global final DW_OP_pick = 0x15;

@@[+0]   TOP = XCH(SECOND,TOP);
global final DW_OP_swap = 0x16;

@@[+0]   a = TOP; TOP = SECOND; SECOND = THIRD; THIRD = a;
global final DW_OP_rot = 0x17;

@@[+0]   off = POP(); id = POP(); PUSH(*(uintptr_t *)id:off)
global final DW_OP_xderef = 0x18;

@@[+0]   a = POP(); PUSH(a < 0 ? -a : a);
global final DW_OP_abs = 0x19;

@@[+0]   PUSH(POP(SECOND) & POP(TOP));
global final DW_OP_and = 0x1a;

@@[+0]   PUSH(POP(SECOND) / POP(TOP));
global final DW_OP_div = 0x1b;

@@[+0]   PUSH(POP(SECOND) - POP(TOP));
global final DW_OP_minus = 0x1c;

@@[+0]   PUSH(POP(SECOND) % POP(TOP));
global final DW_OP_mod = 0x1d;

@@[+0]   PUSH(POP(SECOND) * POP(TOP));
global final DW_OP_mul = 0x1e;

@@[+0]   PUSH(-POP());
global final DW_OP_neg = 0x1f;

@@[+0]   PUSH(~POP());
global final DW_OP_not = 0x20;

@@[+0]   PUSH(POP(SECOND) | POP(TOP));
global final DW_OP_or = 0x21;

@@[+0]   PUSH(POP(SECOND) + POP(TOP));
global final DW_OP_plus = 0x22;

@@[+*]   PUSH(POP(TOP) + dwarf_decode_uleb128(&pc));
global final DW_OP_plus_uconst = 0x23;

@@[+0]   PUSH(POP(SECOND) << POP(TOP));
global final DW_OP_shl = 0x24;

@@[+0]   PUSH((unsigned)POP(SECOND) >> POP(TOP));
global final DW_OP_shr = 0x25;

@@[+0]   PUSH((signed)POP(SECOND) >> POP(TOP));
global final DW_OP_shra = 0x26;

@@[+0]   PUSH(POP(SECOND) ^ POP(TOP));
global final DW_OP_xor = 0x27;

@@[+2]   off = *(s16 *)pc; pc += 2; pc += off;
global final DW_OP_skip = 0x2f;

@@[+2]   off = *(s16 *)pc; pc += 2; if (POP() != 0) pc += off;
global final DW_OP_bra = 0x28;

@@[+0]   PUSH((signed)POP(SECOND) == (signed)POP(TOP));
global final DW_OP_eq = 0x29;

@@[+0]   PUSH((signed)POP(SECOND) >= (signed)POP(TOP));
global final DW_OP_ge = 0x2a;

@@[+0]   PUSH((signed)POP(SECOND) >  (signed)POP(TOP));
global final DW_OP_gt = 0x2b;

@@[+0]   PUSH((signed)POP(SECOND) <= (signed)POP(TOP));
global final DW_OP_le = 0x2c;

@@[+0]   PUSH((signed)POP(SECOND) <  (signed)POP(TOP));
global final DW_OP_lt = 0x2d;

@@[+0]   PUSH((signed)POP(SECOND) != (signed)POP(TOP));
global final DW_OP_ne = 0x2e;

@@[+0]   PUSH(0);
global final DW_OP_lit0 = 0x30;

@@[+0]   PUSH(1);
global final DW_OP_lit1 = 0x31;

@@[+0]   PUSH(2);
global final DW_OP_lit2 = 0x32;

@@[+0]   PUSH(3);
global final DW_OP_lit3 = 0x33;

@@[+0]   PUSH(4);
global final DW_OP_lit4 = 0x34;

@@[+0]   PUSH(5);
global final DW_OP_lit5 = 0x35;

@@[+0]   PUSH(6);
global final DW_OP_lit6 = 0x36;

@@[+0]   PUSH(7);
global final DW_OP_lit7 = 0x37;

@@[+0]   PUSH(8);
global final DW_OP_lit8 = 0x38;

@@[+0]   PUSH(9);
global final DW_OP_lit9 = 0x39;

@@[+0]   PUSH(10);
global final DW_OP_lit10 = 0x3a;

@@[+0]   PUSH(11);
global final DW_OP_lit11 = 0x3b;

@@[+0]   PUSH(12);
global final DW_OP_lit12 = 0x3c;

@@[+0]   PUSH(13);
global final DW_OP_lit13 = 0x3d;

@@[+0]   PUSH(14);
global final DW_OP_lit14 = 0x3e;

@@[+0]   PUSH(15);
global final DW_OP_lit15 = 0x3f;

@@[+0]   PUSH(16);
global final DW_OP_lit16 = 0x40;

@@[+0]   PUSH(17);
global final DW_OP_lit17 = 0x41;

@@[+0]   PUSH(18);
global final DW_OP_lit18 = 0x42;

@@[+0]   PUSH(19);
global final DW_OP_lit19 = 0x43;

@@[+0]   PUSH(20);
global final DW_OP_lit20 = 0x44;

@@[+0]   PUSH(21);
global final DW_OP_lit21 = 0x45;

@@[+0]   PUSH(22);
global final DW_OP_lit22 = 0x46;

@@[+0]   PUSH(23);
global final DW_OP_lit23 = 0x47;

@@[+0]   PUSH(24);
global final DW_OP_lit24 = 0x48;

@@[+0]   PUSH(25);
global final DW_OP_lit25 = 0x49;

@@[+0]   PUSH(26);
global final DW_OP_lit26 = 0x4a;

@@[+0]   PUSH(27);
global final DW_OP_lit27 = 0x4b;

@@[+0]   PUSH(28);
global final DW_OP_lit28 = 0x4c;

@@[+0]   PUSH(29);
global final DW_OP_lit29 = 0x4d;

@@[+0]   PUSH(30);
global final DW_OP_lit30 = 0x4e;

@@[+0]   PUSH(31);
global final DW_OP_lit31 = 0x4f;

@@[+0]   PUSH(GET_CONTEXT_REGISTER(0));
global final DW_OP_reg0 = 0x50;

@@[+0]   PUSH(GET_CONTEXT_REGISTER(1));
global final DW_OP_reg1 = 0x51;

@@[+0]   PUSH(GET_CONTEXT_REGISTER(2));
global final DW_OP_reg2 = 0x52;

@@[+0]   PUSH(GET_CONTEXT_REGISTER(3));
global final DW_OP_reg3 = 0x53;

@@[+0]   PUSH(GET_CONTEXT_REGISTER(4));
global final DW_OP_reg4 = 0x54;

@@[+0]   PUSH(GET_CONTEXT_REGISTER(5));
global final DW_OP_reg5 = 0x55;

@@[+0]   PUSH(GET_CONTEXT_REGISTER(6));
global final DW_OP_reg6 = 0x56;

@@[+0]   PUSH(GET_CONTEXT_REGISTER(7));
global final DW_OP_reg7 = 0x57;

@@[+0]   PUSH(GET_CONTEXT_REGISTER(8));
global final DW_OP_reg8 = 0x58;

@@[+0]   PUSH(GET_CONTEXT_REGISTER(9));
global final DW_OP_reg9 = 0x59;

@@[+0]   PUSH(GET_CONTEXT_REGISTER(10));
global final DW_OP_reg10 = 0x5a;

@@[+0]   PUSH(GET_CONTEXT_REGISTER(11));
global final DW_OP_reg11 = 0x5b;

@@[+0]   PUSH(GET_CONTEXT_REGISTER(12));
global final DW_OP_reg12 = 0x5c;

@@[+0]   PUSH(GET_CONTEXT_REGISTER(13));
global final DW_OP_reg13 = 0x5d;

@@[+0]   PUSH(GET_CONTEXT_REGISTER(14));
global final DW_OP_reg14 = 0x5e;

@@[+0]   PUSH(GET_CONTEXT_REGISTER(15));
global final DW_OP_reg15 = 0x5f;

@@[+0]   PUSH(GET_CONTEXT_REGISTER(16));
global final DW_OP_reg16 = 0x60;

@@[+0]   PUSH(GET_CONTEXT_REGISTER(17));
global final DW_OP_reg17 = 0x61;

@@[+0]   PUSH(GET_CONTEXT_REGISTER(18));
global final DW_OP_reg18 = 0x62;

@@[+0]   PUSH(GET_CONTEXT_REGISTER(19));
global final DW_OP_reg19 = 0x63;

@@[+0]   PUSH(GET_CONTEXT_REGISTER(20));
global final DW_OP_reg20 = 0x64;

@@[+0]   PUSH(GET_CONTEXT_REGISTER(21));
global final DW_OP_reg21 = 0x65;

@@[+0]   PUSH(GET_CONTEXT_REGISTER(22));
global final DW_OP_reg22 = 0x66;

@@[+0]   PUSH(GET_CONTEXT_REGISTER(23));
global final DW_OP_reg23 = 0x67;

@@[+0]   PUSH(GET_CONTEXT_REGISTER(24));
global final DW_OP_reg24 = 0x68;

@@[+0]   PUSH(GET_CONTEXT_REGISTER(25));
global final DW_OP_reg25 = 0x69;

@@[+0]   PUSH(GET_CONTEXT_REGISTER(26));
global final DW_OP_reg26 = 0x6a;

@@[+0]   PUSH(GET_CONTEXT_REGISTER(27));
global final DW_OP_reg27 = 0x6b;

@@[+0]   PUSH(GET_CONTEXT_REGISTER(28));
global final DW_OP_reg28 = 0x6c;

@@[+0]   PUSH(GET_CONTEXT_REGISTER(29));
global final DW_OP_reg29 = 0x6d;

@@[+0]   PUSH(GET_CONTEXT_REGISTER(30));
global final DW_OP_reg30 = 0x6e;

@@[+0]   PUSH(GET_CONTEXT_REGISTER(31));
global final DW_OP_reg31 = 0x6f;

@@[+*]   PUSH(GET_CONTEXT_REGISTER(0) + dwarf_decode_sleb128(&pc));
global final DW_OP_breg0 = 0x70;

@@[+*]   PUSH(GET_CONTEXT_REGISTER(1) + dwarf_decode_sleb128(&pc));
global final DW_OP_breg1 = 0x71;

@@[+*]   PUSH(GET_CONTEXT_REGISTER(2) + dwarf_decode_sleb128(&pc));
global final DW_OP_breg2 = 0x72;

@@[+*]   PUSH(GET_CONTEXT_REGISTER(3) + dwarf_decode_sleb128(&pc));
global final DW_OP_breg3 = 0x73;

@@[+*]   PUSH(GET_CONTEXT_REGISTER(4) + dwarf_decode_sleb128(&pc));
global final DW_OP_breg4 = 0x74;

@@[+*]   PUSH(GET_CONTEXT_REGISTER(5) + dwarf_decode_sleb128(&pc));
global final DW_OP_breg5 = 0x75;

@@[+*]   PUSH(GET_CONTEXT_REGISTER(6) + dwarf_decode_sleb128(&pc));
global final DW_OP_breg6 = 0x76;

@@[+*]   PUSH(GET_CONTEXT_REGISTER(7) + dwarf_decode_sleb128(&pc));
global final DW_OP_breg7 = 0x77;

@@[+*]   PUSH(GET_CONTEXT_REGISTER(8) + dwarf_decode_sleb128(&pc));
global final DW_OP_breg8 = 0x78;

@@[+*]   PUSH(GET_CONTEXT_REGISTER(9) + dwarf_decode_sleb128(&pc));
global final DW_OP_breg9 = 0x79;

@@[+*]   PUSH(GET_CONTEXT_REGISTER(10) + dwarf_decode_sleb128(&pc));
global final DW_OP_breg10 = 0x7a;

@@[+*]   PUSH(GET_CONTEXT_REGISTER(11) + dwarf_decode_sleb128(&pc));
global final DW_OP_breg11 = 0x7b;

@@[+*]   PUSH(GET_CONTEXT_REGISTER(12) + dwarf_decode_sleb128(&pc));
global final DW_OP_breg12 = 0x7c;

@@[+*]   PUSH(GET_CONTEXT_REGISTER(13) + dwarf_decode_sleb128(&pc));
global final DW_OP_breg13 = 0x7d;

@@[+*]   PUSH(GET_CONTEXT_REGISTER(14) + dwarf_decode_sleb128(&pc));
global final DW_OP_breg14 = 0x7e;

@@[+*]   PUSH(GET_CONTEXT_REGISTER(15) + dwarf_decode_sleb128(&pc));
global final DW_OP_breg15 = 0x7f;

@@[+*]   PUSH(GET_CONTEXT_REGISTER(16) + dwarf_decode_sleb128(&pc));
global final DW_OP_breg16 = 0x80;

@@[+*]   PUSH(GET_CONTEXT_REGISTER(17) + dwarf_decode_sleb128(&pc));
global final DW_OP_breg17 = 0x81;

@@[+*]   PUSH(GET_CONTEXT_REGISTER(18) + dwarf_decode_sleb128(&pc));
global final DW_OP_breg18 = 0x82;

@@[+*]   PUSH(GET_CONTEXT_REGISTER(19) + dwarf_decode_sleb128(&pc));
global final DW_OP_breg19 = 0x83;

@@[+*]   PUSH(GET_CONTEXT_REGISTER(20) + dwarf_decode_sleb128(&pc));
global final DW_OP_breg20 = 0x84;

@@[+*]   PUSH(GET_CONTEXT_REGISTER(21) + dwarf_decode_sleb128(&pc));
global final DW_OP_breg21 = 0x85;

@@[+*]   PUSH(GET_CONTEXT_REGISTER(22) + dwarf_decode_sleb128(&pc));
global final DW_OP_breg22 = 0x86;

@@[+*]   PUSH(GET_CONTEXT_REGISTER(23) + dwarf_decode_sleb128(&pc));
global final DW_OP_breg23 = 0x87;

@@[+*]   PUSH(GET_CONTEXT_REGISTER(24) + dwarf_decode_sleb128(&pc));
global final DW_OP_breg24 = 0x88;

@@[+*]   PUSH(GET_CONTEXT_REGISTER(25) + dwarf_decode_sleb128(&pc));
global final DW_OP_breg25 = 0x89;

@@[+*]   PUSH(GET_CONTEXT_REGISTER(26) + dwarf_decode_sleb128(&pc));
global final DW_OP_breg26 = 0x8a;

@@[+*]   PUSH(GET_CONTEXT_REGISTER(27) + dwarf_decode_sleb128(&pc));
global final DW_OP_breg27 = 0x8b;

@@[+*]   PUSH(GET_CONTEXT_REGISTER(28) + dwarf_decode_sleb128(&pc));
global final DW_OP_breg28 = 0x8c;

@@[+*]   PUSH(GET_CONTEXT_REGISTER(29) + dwarf_decode_sleb128(&pc));
global final DW_OP_breg29 = 0x8d;

@@[+*]   PUSH(GET_CONTEXT_REGISTER(30) + dwarf_decode_sleb128(&pc));
global final DW_OP_breg30 = 0x8e;

@@[+*]   PUSH(GET_CONTEXT_REGISTER(31) + dwarf_decode_sleb128(&pc));
global final DW_OP_breg31 = 0x8f;

@@[+*]   PUSH(GET_CONTEXT_REGISTER(dwarf_decode_uleb128(&pc)));
global final DW_OP_regx = 0x90;

@@[+*]   PUSH(EVAL(CURRENT_FUNCTION.DW_AT_frame_base) + dwarf_decode_sleb128(&pc))
global final DW_OP_fbreg = 0x91;

@@[+*]   PUSH(GET_CONTEXT_REGISTER(dwarf_decode_uleb128(&pc)) + dwarf_decode_sleb128(&pc));
global final DW_OP_bregx = 0x92;

@@[+*]   num_bytes = dwarf_decode_uleb128(&pc); WRITE_RESULT(POP(),num_bytes * 8); // Assign TOP to `num_bytes' of the variable's value.
global final DW_OP_piece = 0x93;

@@[+1]   n = *(u8 *)pc; pc += 1; p = POP(); PUSH(n == 1 ? *(u8 *)p : n == 2 ? *(u16 *)p : n == 4 ? *(u32 *)p : n == 8 ? *(u64 *)p : UNDEFINED);
global final DW_OP_deref_size = 0x94;

@@[+1]   n = *(u8 *)pc; pc += 1; p = POP(); id = POP(); PUSH(n == 1 ? *(u8 *)id:p : n == 2 ? *(u16 *)id:p : n == 4 ? *(u32 *)id:p : n == 8 ? *(u64 *)id:p : UNDEFINED);
global final DW_OP_xderef_size = 0x95;

@@[+0]   Do nothing
global final DW_OP_nop = 0x96;

@@[+0]   Push the value of `sm_objaddr'
global final DW_OP_push_object_address = 0x97;

@@[+2]   Call another DW expression (the operator is a 2-byte unsigned offset from .debug_info)
global final DW_OP_call2 = 0x98;

@@[+4]   Call another DW expression (the operator is a 4-byte unsigned offset from .debug_info)
global final DW_OP_call4 = 0x99;

@@[+*]   Call another DW expression (the operator is a dwarf_decode_uleb128 offset from .debug_info)
global final DW_OP_call_ref = 0x9a;

@@[+0]   PUSH(ADDRESS(POP() + sm_tlsbase))
global final DW_OP_form_tls_address = 0x9b;

@@[+0]   PUSH(CALCULATE_CFA(GET_REGISTER(PC)))
global final DW_OP_call_frame_cfa = 0x9c;

@@[+*]   size = dwarf_decode_uleb128(&pc); offset = dwarf_decode_uleb128(&pc); WRITE_RESULT((TOP >> offset) & ((1 << size) - 1),size);
global final DW_OP_bit_piece = 0x9d;

@@[+*]   size = dwarf_decode_uleb128(&pc); PUSH(LVALUE(pc,size)); pc += size;
global final DW_OP_implicit_value = 0x9e;

@@[+0]   TOP = TOP; // Load the value of `TOP' into a stack constant
global final DW_OP_stack_value = 0x9f;

global final DW_OP_lo_user = 0xe0;

global final DW_OP_hi_user = 0xff;

@@[+0]   PUSH(ADDRESS(sm_tlsbase))
global final DW_OP_GNU_push_tls_address = 0xe0;

@@[+0]   UNINIT?
global final DW_OP_GNU_uninit = 0xf0;




global final DW_CFA_advance_loc        = 0x40;
global final DW_CFA_offset             = 0x80;
global final DW_CFA_restore            = 0xc0;
global final DW_CFA_nop                = 0x00;
global final DW_CFA_set_loc            = 0x01;
global final DW_CFA_advance_loc1       = 0x02;
global final DW_CFA_advance_loc2       = 0x03;
global final DW_CFA_advance_loc4       = 0x04;
global final DW_CFA_offset_extended    = 0x05;
global final DW_CFA_restore_extended   = 0x06;
global final DW_CFA_undefined          = 0x07;
global final DW_CFA_same_value         = 0x08;
global final DW_CFA_register           = 0x09;
global final DW_CFA_remember_state     = 0x0a;
global final DW_CFA_restore_state      = 0x0b;
global final DW_CFA_def_cfa            = 0x0c;
global final DW_CFA_def_cfa_register   = 0x0d;
global final DW_CFA_def_cfa_offset     = 0x0e;
global final DW_CFA_def_cfa_expression = 0x0f;
global final DW_CFA_expression         = 0x10;
global final DW_CFA_offset_extended_sf = 0x11;
global final DW_CFA_def_cfa_sf         = 0x12;
global final DW_CFA_def_cfa_offset_sf  = 0x13;
global final DW_CFA_val_offset         = 0x14;
global final DW_CFA_val_offset_sf      = 0x15;
global final DW_CFA_val_expression     = 0x16;



global final cfiRegisterNames = {
	"x86_64": {
		"rax"     : 0,
		"rdx"     : 1,
		"rcx"     : 2,
		"rbx"     : 3,
		"rsi"     : 4,
		"rdi"     : 5,
		"rbp"     : 6,
		"rsp"     : 7,
		"r8"      : 8,
		"r9"      : 9,
		"r10"     : 10,
		"r11"     : 11,
		"r12"     : 12,
		"r13"     : 13,
		"r14"     : 14,
		"r15"     : 15,
		"rip"     : 16,
		"xmm0"    : 17,
		"xmm1"    : 18,
		"xmm2"    : 19,
		"xmm3"    : 20,
		"xmm4"    : 21,
		"xmm5"    : 22,
		"xmm6"    : 23,
		"xmm7"    : 24,
		"xmm8"    : 25,
		"xmm9"    : 26,
		"xmm10"   : 27,
		"xmm11"   : 28,
		"xmm12"   : 29,
		"xmm13"   : 30,
		"xmm14"   : 31,
		"xmm15"   : 32,
		"st0"     : 33, "st(0)" : 33,
		"st1"     : 34, "st(1)" : 34,
		"st2"     : 35, "st(2)" : 35,
		"st3"     : 36, "st(3)" : 36,
		"st4"     : 37, "st(4)" : 37,
		"st5"     : 38, "st(5)" : 38,
		"st6"     : 39, "st(6)" : 39,
		"st7"     : 40, "st(7)" : 40,
		"mm0"     : 41,
		"mm1"     : 42,
		"mm2"     : 43,
		"mm3"     : 44,
		"mm4"     : 45,
		"mm5"     : 46,
		"mm6"     : 47,
		"mm7"     : 48,
		"rflags"  : 49,
		"es"      : 50,
		"cs"      : 51,
		"ss"      : 52,
		"ds"      : 53,
		"fs"      : 54,
		"gs"      : 55,
		"fs.base" : 58,
		"gs.base" : 59,
		"tr"      : 62,
		"ldtr"    : 63,
		"mxcsr"   : 64,
		"fcw"     : 65,
		"fsw"     : 66,
		"xmm16"   : 67,
		"xmm17"   : 68,
		"xmm18"   : 69,
		"xmm19"   : 70,
		"xmm20"   : 71,
		"xmm21"   : 72,
		"xmm22"   : 73,
		"xmm23"   : 74,
		"xmm24"   : 75,
		"xmm25"   : 76,
		"xmm26"   : 77,
		"xmm27"   : 78,
		"xmm28"   : 79,
		"xmm29"   : 80,
		"xmm30"   : 81,
		"xmm31"   : 82,
		"k0"      : 118,
		"k1"      : 119,
		"k2"      : 120,
		"k3"      : 121,
		"k4"      : 122,
		"k5"      : 123,
		"k6"      : 124,
		"k7"      : 125
	},
	"i386": {
		"eax"     : 0,
		"ecx"     : 1,
		"edx"     : 2,
		"ebx"     : 3,
		"esp"     : 4,
		"ebp"     : 5,
		"esi"     : 6,
		"edi"     : 7,
		"eip"     : 8,
		"eflags"  : 9,
		"st0"     : 11, "st(0)" : 11,
		"st1"     : 12, "st(1)" : 12,
		"st2"     : 13, "st(2)" : 13,
		"st3"     : 14, "st(3)" : 14,
		"st4"     : 15, "st(4)" : 15,
		"st5"     : 16, "st(5)" : 16,
		"st6"     : 17, "st(6)" : 17,
		"st7"     : 18, "st(7)" : 18,
		"xmm0"    : 21,
		"xmm1"    : 22,
		"xmm2"    : 23,
		"xmm3"    : 24,
		"xmm4"    : 25,
		"xmm5"    : 26,
		"xmm6"    : 27,
		"xmm7"    : 28,
		"mm0"     : 29,
		"mm1"     : 30,
		"mm2"     : 31,
		"mm3"     : 32,
		"mm4"     : 33,
		"mm5"     : 34,
		"mm6"     : 35,
		"mm7"     : 36,
		"fcw"     : 37,
		"fsw"     : 38,
		"mxcsr"   : 39,
		"es"      : 40,
		"cs"      : 41,
		"ss"      : 42,
		"ds"      : 43,
		"fs"      : 44,
		"gs"      : 45,
		"tr"      : 48,
		"ldtr"    : 49,
		"k0"      : 93,
		"k1"      : 94,
		"k2"      : 95,
		"k3"      : 96,
		"k4"      : 97,
		"k5"      : 98,
		"k6"      : 99,
		"k7"      : 100
	}
};

function getRegisterId(arch: string, reg: string | int): int {
	if (reg is int)
		return reg;
	local result = cfiRegisterNames[arch].get(reg);
	if (result !is none)
		return result;
	return int(reg);
}

function encodeULeb128(value: int): {int...} {
	for (;;) {
		if (value <= 0x7f) {
			yield value;
			break;
		}
		yield 0x80 | (value & 0x7f);
		value = value >> 7;
	}
}

function encodeSLeb128(value: int): {int...} {
	for (;;) {
		local byte = value & 0x7f;
		if (value >= 0) {
			value = value / 128;
		} else {
			value = ~(~value / 128);
		}
		if ((value == 0 && (byte & 0x40) == 0) ||
		    (value == -1 && (byte & 0x40) != 0)) {
			yield byte;
			break;
		}
		yield 0x80 | byte;
	}
}






