/* Copyright (c) 2018 Griefer@Work                                            *
 *                                                                            *
 * This software is provided 'as-is', without any express or implied          *
 * warranty. In no event will the authors be held liable for any damages      *
 * arising from the use of this software.                                     *
 *                                                                            *
 * Permission is granted to anyone to use this software for any purpose,      *
 * including commercial applications, and to alter it and redistribute it     *
 * freely, subject to the following restrictions:                             *
 *                                                                            *
 * 1. The origin of this software must not be misrepresented; you must not    *
 *    claim that you wrote the original software. If you use this software    *
 *    in a product, an acknowledgement in the product documentation would be  *
 *    appreciated but is not required.                                        *
 * 2. Altered source versions must be plainly marked as such, and must not be *
 *    misrepresented as being the original software.                          *
 * 3. This notice may not be removed or altered from any source distribution. *
 */

import .cfi as CFI;
import * from .cfi;
import * from deemon;

//#define PRINT_INSTRUCTION_NAMES 1


class Symbol {
	this = default;
	public member name: string;
	public member addr: int;
}

final global R_CFI_NONE    = 0;
final global R_CFI_REL16_A = 1;
final global R_CFI_REL16_B = 2;

class Relocation {
	this = default;
	public member addr: int;
	@@One of `R_CFI_*'
	public member kind: int;
	public member symbol: Symbol;

	public function resolve(): int {
		local symaddr = symbol.addr;
		switch (kind) {
		case R_CFI_REL16_A:
			return (symaddr - (this.addr + 2)) & 0xff;
		case R_CFI_REL16_B:
			return ((symaddr - (this.addr + 1)) >> 8) & 0xff;
		}
	}
}




/* Operand types for CFA instructions. */
global final OPERAND_NUMBER        = 0; /* val: int */
global final OPERAND_NUMBER_OR_ARG = 1; /* val: int | r"\" + string */
global final OPERAND_SYMBOL        = 2; /* sym: Symbol */
global final OPERAND_REGISTER      = 3; /* regno: int */
global final OPERAND_RAW           = 4; /* raw_operand: string */


function encodeIntOrArgument(val: int | string): int | string {
	if (val is int)
		return val;
	if (val.startswith("@"))
		return val[1:];
	return "__ASM_ARG({})".format({ val });
}
function encodeIntOrArgument2b(val: int | string): {int | string...} {
	if (val is int) {
		yield val & 0xff;
		yield (val >> 8) & 0xff;
	} else if (val.startswith("@")) {
		val = val[1:];
		yield "({}) & 0xff".format({ val });
		yield "({} >> 8) & 0xff".format({ val });
	} else {
		yield "(__ASM_ARG({})) & 0xff".format({ val });
		yield "((__ASM_ARG({})) >> 8) & 0xff".format({ val });
	}
}
function encodeIntOrArgument4b(val: int | string): {int | string...} {
	if (val is int) {
		yield val & 0xff;
		yield (val >> 8) & 0xff;
		yield (val >> 16) & 0xff;
		yield (val >> 24) & 0xff;
	} else if (val.startswith("@")) {
		val = val[1:];
		yield "({}) & 0xff".format({ val });
		yield "({} >> 8) & 0xff".format({ val });
		yield "({} >> 16) & 0xff".format({ val });
		yield "({} >> 24) & 0xff".format({ val });
	} else {
		yield "(__ASM_ARG({})) & 0xff".format({ val });
		yield "((__ASM_ARG({})) >> 8) & 0xff".format({ val });
		yield "((__ASM_ARG({})) >> 16) & 0xff".format({ val });
		yield "((__ASM_ARG({})) >> 24) & 0xff".format({ val });
	}
}


function encodeIntegerPush(val: int): {int...} {
	if (val >= 0) {
		if (val <= 31) {
			yield DW_OP_lit0 + val;
			return;
		}
		if (val <= 0xff) {
			yield DW_OP_const1u;
			yield val;
			return;
		}
		if (val <= 0xffff) {
			yield DW_OP_const2u;
			yield val & 0xff;
			yield (val >> 8) & 0xff;
			return;
		}
		if (val <= 0xffffffff && #encodeULeb128(val) >= 4) {
			yield DW_OP_const4u;
			yield val & 0xff;
			yield (val >> 8) & 0xff;
			yield (val >> 16) & 0xff;
			yield (val >> 24) & 0xff;
			return;
		}
	}
	if (val >= -128 && val <= 127) {
		yield DW_OP_const1s;
		yield val;
		return;
	}
	if (val >= -32768 && val <= 32767) {
		yield DW_OP_const2s;
		yield val & 0xff;
		yield (val >> 8) & 0xff;
		return;
	}
	if (val >= -2147483648 && val <= 2147483647 && #encodeSLeb128(val) >= 4) {
		yield DW_OP_const2s;
		yield val & 0xff;
		yield (val >> 8) & 0xff;
		yield (val >> 16) & 0xff;
		yield (val >> 24) & 0xff;
		return;
	}
	if (val < 0) {
		yield DW_OP_consts;
		yield encodeSLeb128(val)...;
	}
	yield DW_OP_constu;
	yield encodeULeb128(val)...;
}

@@Cfa instruction map: instruction name ->
@@    @(opcode: int | (custom_encoder: Callable, operand_types: {int...}))
@@The given function is called as @(custom_encoder(operands...): {int | Relocation})
@@
global final cfa_instructions: {string: {int | (Callable, {int...})...}} = {

	".cfi_escape" : {
		([](val: int | string) {
			if (val is int && !(val >= 0 && val <= 0xff))
				throw Error("Invalid byte " + repr(val));
			yield encodeIntOrArgument(val);
		}, { OPERAND_NUMBER_OR_ARG }),
	},

	"const1u" : {
		([](val: int | string) {
			if (val is int) {
				if (!(val >= 0 && val <= 0xff))
					throw Error("Invalid constant " + repr(val));
				yield encodeIntegerPush(val)...;
			} else {
				yield DW_OP_const1u;
				yield encodeIntOrArgument(val);
			}
		}, { OPERAND_NUMBER_OR_ARG }),
	},

	"const1s" : {
		([](val: int | string) {
			if (val is int) {
				if (!(val >= -128 && val <= 127))
					throw Error("Invalid constant " + repr(val));
				yield encodeIntegerPush(val)...;
			} else {
				yield DW_OP_const1s;
				yield encodeIntOrArgument(val);
			}
		}, { OPERAND_NUMBER_OR_ARG }),
	},

	"const2u" : {
		([](val: int | string) {
			if (val is int) {
				if (!(val >= 0 && val <= 0xffff))
					throw Error("Invalid constant " + repr(val));
				yield encodeIntegerPush(val)...;
			} else {
				yield DW_OP_const2u;
				yield encodeIntOrArgument2b(val)...;
			}
		}, { OPERAND_NUMBER_OR_ARG }),
	},

	"const2s" : {
		([](val: int | string) {
			if (val is int) {
				if (!(val >= -32768 && val <= 32767))
					throw Error("Invalid constant " + repr(val));
				yield encodeIntegerPush(val)...;
			} else {
				yield DW_OP_const2s;
				yield encodeIntOrArgument2b(val)...;
			}
		}, { OPERAND_NUMBER_OR_ARG }),
	},

	"const4u" : {
		([](val: int | string) {
			if (val is int) {
				if (!(val >= 0 && val <= 0xffffffff))
					throw Error("Invalid constant " + repr(val));
				yield encodeIntegerPush(val)...;
			} else {
				yield DW_OP_const4u;
				yield encodeIntOrArgument4b(val)...;
			}
		}, { OPERAND_NUMBER_OR_ARG }),
	},

	"const4s" : {
		([](val: int | string) {
			if (val is int) {
				if (!(val >= -2147483648 && val <= 2147483647))
					throw Error("Invalid constant " + repr(val));
				yield encodeIntegerPush(val)...;
			} else {
				yield DW_OP_const4s;
				yield encodeIntOrArgument4b(val)...;
			}
		}, { OPERAND_NUMBER_OR_ARG }),
	},

	/* >> ifnotimpl "KOS", .Ltarget
	 * If the hosting implementation isn't KOS, jump to `.Ltarget'
	 * NOTE: This is implemented via a double-jump:
	 *     skip 1f
	 *     .byte 'K','O','S'
	 * 1:  skip .Ltarget
	 */
	"ifnotimpl" : {
		([](impl_name: string, target: Symbol) {
			impl_name = impl_name.strip();
			if (!impl_name.startswith("\"") || !impl_name.endswith("\""))
				throw Error("Invalid implementation name: " + repr(impl_name));
			impl_name = impl_name.decode("c-escape");
			yield DW_OP_skip;
			yield #impl_name & 0xff;
			yield (#impl_name >> 8) & 0xff;
			for (local x: impl_name.ordinals) {
				if (x < 0 || x > 0xff)
					throw Error("Invalid character " + repr(x) + " in implementation name " + repr(impl_name));
				yield x;
			}
			yield DW_OP_skip;
			yield Relocation(kind: R_CFI_REL16_A, symbol: target);
			yield Relocation(kind: R_CFI_REL16_B, symbol: target);
		}, { OPERAND_RAW, OPERAND_SYMBOL }),
	},

	"push" : {
		(encodeIntegerPush, { OPERAND_NUMBER }),

		([](reg: int) {
			if (reg < 0)
				throw Error("Invalid register number: " + repr(reg));
			if (reg <= 31)
				yield DW_OP_reg0 + reg;
			else {
				yield DW_OP_regx;
				yield encodeULeb128(reg)...;
			}
		}, { OPERAND_REGISTER }),
	},

	"dup" : { DW_OP_dup },
	"drop" : { DW_OP_drop },
	"over" : { DW_OP_over },

	"pick" : {
		([](n: int | string) {
			if (n is string) {
				yield DW_OP_pick;
				yield "__ASM_ARG({})".format({ n });
			} else if (n < 0 || n > 0xff)
				throw Error("Invalid operand for `pick': " + repr(n));
			if (n == 0)
				yield DW_OP_dup;
			else if (n == 1)
				yield DW_OP_over;
			else {
				yield DW_OP_pick;
				yield n;
			}
		}, { OPERAND_NUMBER_OR_ARG }),
	},

	"swap" : { DW_OP_swap },
	"rot" : { DW_OP_rot },
	"abs" : { DW_OP_abs },
	"and" : { DW_OP_and },
	"div" : { DW_OP_div },
	"minus": { DW_OP_minus },
	"mod": { DW_OP_mod },
	"mul": { DW_OP_mul },
	"neg": { DW_OP_neg },
	"not": { DW_OP_not },
	"or": { DW_OP_or },

	"plus": {
		DW_OP_plus,
		([](val: int | string) {
			if (val is string) {
				yield DW_OP_plus_uconst;
				yield encodeIntOrArgument(val);
			} else if (val != 0) {
				yield DW_OP_plus_uconst;
				yield encodeULeb128(val)...;
			}
		}, { OPERAND_NUMBER_OR_ARG }),
	},

	"shl": { DW_OP_shl },
	"shr": { DW_OP_shr },
	"shra": { DW_OP_shra },
	"xor": { DW_OP_xor },

	"skip": {
		([](sym: Symbol) {
			yield DW_OP_skip;
			yield Relocation(kind: R_CFI_REL16_A, symbol: sym);
			yield Relocation(kind: R_CFI_REL16_B, symbol: sym);
		}, { OPERAND_SYMBOL })
	},

	"bra": {
		([](sym: Symbol) {
			yield DW_OP_bra;
			yield Relocation(kind: R_CFI_REL16_A, symbol: sym);
			yield Relocation(kind: R_CFI_REL16_B, symbol: sym);
		}, { OPERAND_SYMBOL })
	},

	"eq": { DW_OP_eq },
	"ge": { DW_OP_ge },
	"gt": { DW_OP_gt },
	"le": { DW_OP_le },
	"lt": { DW_OP_lt },
	"ne": { DW_OP_ne },

	"breg": {
		([](reg: int, off: int) {
			if (reg < 0)
				throw Error("Invalid register number: " + repr(reg));
			if (reg <= 31)
				yield DW_OP_breg0 + reg;
			else {
				yield DW_OP_bregx;
				yield encodeULeb128(reg)...;
			}
			if (off is int)
				yield encodeSLeb128(off)...;
			else {
				yield encodeIntOrArgument(off);
			}
		}, { OPERAND_REGISTER, OPERAND_NUMBER }),
	},

	"fbreg": {
		([](off: int) {
			yield DW_OP_fbreg;
			yield encodeSLeb128(off)...;
		}, { OPERAND_NUMBER }),
	},

	"piece": {
		([](num_bytes: int) {
			yield DW_OP_piece;
			yield encodeULeb128(num_bytes)...;
		}, { OPERAND_NUMBER }),
	},

	"deref" : {
		DW_OP_deref,
		([](size: int | string) {
			if (size is int && (size < 0 || size > 0xff))
				throw Error("Invalid size for `deref': " + repr(size));
			yield DW_OP_deref_size;
			yield encodeIntOrArgument(size);
		}, { OPERAND_NUMBER_OR_ARG }),
	},

	"xderef" : {
		DW_OP_xderef,
		([](size: int | string) {
			if (size is int && (size < 0 || size > 0xff))
				throw Error("Invalid size for `xderef': " + repr(size));
			yield DW_OP_xderef_size;
			yield encodeIntOrArgument(size);
		}, { OPERAND_NUMBER_OR_ARG }),
	},

	"nop": { DW_OP_nop },
	"push_object_address": { DW_OP_push_object_address },

	"call": {
		([](offset: int) {
			if (offset < 0)
				throw Error("Invalid offset for `call': " + repr(offset));
			if (offset <= 0xffff) {
				yield DW_OP_call2;
				yield offset & 0xff;
				yield (offset >> 8) & 0xff;
			} else if (offset <= 0xffffffff) {
				yield DW_OP_call4;
				yield offset & 0xff;
				yield (offset >> 8) & 0xff;
				yield (offset >> 16) & 0xff;
				yield (offset >> 24) & 0xff;
			} else {
				yield DW_OP_call_ref;
				yield encodeULeb128(offset)...;
			}
		}, { OPERAND_NUMBER }),
	},

	"form_tls_address": { DW_OP_form_tls_address },
	"call_frame_cfa": { DW_OP_call_frame_cfa },

	"bit_piece": {
		([](size: int, offset: int) {
			if (size < 0)
				throw Error("Invalid size for `bit_piece': " + repr(size));
			if (offset < 0)
				throw Error("Invalid offset for `bit_piece': " + repr(offset));
			yield DW_OP_bit_piece;
			yield encodeULeb128(size)...;
			yield encodeULeb128(offset)...;
		}, { OPERAND_NUMBER, OPERAND_NUMBER })
	},

	"implicit_value": {
		([](data: string) {
			data = data.decode("c-escape").ordinals;
			yield DW_OP_implicit_value;
			yield encodeULeb128(#data)...;
			for (local x: data) {
				if (x < 0 || x > 0xff)
					throw Error("Invalid byte in raw data of `implicit_value': " + repr(x));
				yield x;
			}
		}, { OPERAND_RAW })
	},

	"stack_value": { DW_OP_stack_value },

	"push_tls_address": { DW_OP_GNU_push_tls_address },

	"uninit": { DW_OP_GNU_uninit },
};

#ifdef PRINT_INSTRUCTION_NAMES
function getInstructionName(opcode: int): string {
	for (local name, val: CFI.__exports__) {
		if (val is int && val == opcode && name.startswith("DW_OP_"))
			return name;
	}
	return "0x%.2x" % opcode;
}
#endif



global final _macroValueCache: {string: int} = Dict();
global final _filesWithUsedMacros: {string...} = HashSet();

function scanFileForMacro(filename: string, name: string): int | none {
	local fp = File.open(filename, "r");
	for (local l: fp) {
		if (name !in l)
			continue;
		if (!l.startswith("#define"))
			continue;
		l = l[#"#define":].lstrip();
		if (!l.startswith(name))
			continue;
		l = l[#name:].lstrip();
		local p = l.find("//");
		if (p >= 0)
			l = l[:p];
		local p = l.find("/*");
		if (p >= 0)
			l = l[:p];
		l = l.strip();
		if (l) {
			l = try int(l) catch (...) none;
			if (l !is none) {
				_filesWithUsedMacros.insert(filename);
				return l;
			}
		}
	}
}
function scanFolderForMacro(path: string, name: string): int | none {
	import joinpath, dir, stat from fs;
	for (local x: dir(path)) {
		x = joinpath(path, x);
		if (stat.isdir(x)) {
			local res = scanFolderForMacro(x, name);
			if (res !is none)
				return res;
			continue;
		}
		if (!x.endswith(".h"))
			continue;
		local res = try scanFileForMacro(x, name) catch (...) none;
		if (res !is none)
			return res;
	}
}

function findValueOfMacro(name: string): int {
	import fs;
	local res = _macroValueCache.get(name);
	if (res !is none)
		return res;
	for (local x: _filesWithUsedMacros) {
		local res = scanFileForMacro(x, name);
		if (res !is none)
			return res;
	}
	local root = fs.expand(fs.joinpath(fs.headof(__FILE__), "../../.."), "pac");
	local res = scanFolderForMacro(fs.joinpath(root, "include/i386-kos"), name);
	if (res is none)
		throw Error("Unable to find `#define " + name + "'");
	_macroValueCache[name] = res;
	return res;
}



function compileExpressionBase(arch: string, text: string): {int | Symbol | Relocation...} {
	local namedSymbols: {string: Symbol} = Dict();
	local forwardSymbols: {string: Symbol} = Dict();
	local backwardSymbols: {string: Symbol} = Dict();
	function getOperandValue(operandType: int, operandText: string) {
		switch (operandType) {
		case OPERAND_NUMBER:
		case OPERAND_NUMBER_OR_ARG:
			if (operandText.startswith("$")) {
				local val = operandText[1:];
				if (val.startswith("@"))
					return val;
				return try int(val) catch (...) findValueOfMacro(val);
			}
			if (operandText.startswith("\\") && operandType == OPERAND_NUMBER_OR_ARG)
				return operandText;
			break;
			break;
		case OPERAND_SYMBOL:
			if (operandText.endswith("f")) {
				if (operandText.isnumeric(0, #operandText - 1)) {
					operandText = operandText[:-1];
					local sym = forwardSymbols.get(operandText);
					if (sym is none) {
						sym = Symbol(name: operandText);
						forwardSymbols[operandText] = sym;
					}
					return sym;
				}
			} else if (operandText.endswith("b")) {
				if (operandText.isnumeric(0, #operandText - 1)) {
					return backwardSymbols[operandText[:-1]];
				}
			}
			if (operandText.issymbol()) {
				local sym = namedSymbols.get(operandText);
				if (sym is none) {
					sym = Symbol(name: operandText);
					namedSymbols[operandText] = sym;
				}
				return sym;
			}
			break;
		case OPERAND_REGISTER:
			if (operandText.startswith("%"))
				return getRegisterId(arch, operandText[1:]);
			break;
		case OPERAND_RAW:
			return operandText;
		default:
			break;
		}
	}
	text = text.unifylines().replace("\\\n","").expandtabs(4);
	for (local l: text.splitlines(false)) {
		local p = l.find("#");
		if (p >= 0)
			l = l[:p];
		l = l.strip();
		if (!l)
			continue;
		if (":" in l) {
			/* Symbol definition. */
			local symbolName,none,after = l.partition(":")...;
			local symbol;
			symbolName = symbolName.rstrip();
			if (symbolName.isnumeric()) {
				symbol = forwardSymbols.get(symbolName);
				if (symbol !is none) {
					del forwardSymbols[symbolName];
				} else {
					symbol = Symbol(name: symbolName);
				}
				backwardSymbols[symbolName] = symbol;
			} else if (symbolName.issymbol()) {
				symbol = namedSymbols.get(symbolName);
				if (symbol is none) {
					symbol = Symbol(name: symbolName);
					namedSymbols[symbolName] = symbol;
				}
			} else {
				goto parse_l;
			}
			yield symbol;
			l = after.lstrip();
			if (!l)
				continue;
		}
parse_l:
		final local mnemonic_ext_chars = ".:+-*/=$%&";
		if (l.issymstrt(0) || (l[0] in mnemonic_ext_chars)) {
			/* Mnemonic */
			local end = 1;
			while (end < #l && (l.issymcont(end) || l[end] in mnemonic_ext_chars))
				++end;
			local name = l[:end];
			local overloads = cfa_instructions.get(name);
			if (overloads is none) {
				throw Error("Unknown mnemonic " + repr(name) + " used in line " + repr(l));
				continue;
			}
			local operand_data = l[end:].lstrip();
			local operands = List(operand_data.split(",").each.strip());
			for (local x: overloads) {
				if (x is int) {
					if (!operands) {
#ifdef PRINT_INSTRUCTION_NAMES
						yield getInstructionName(x);
#else
						yield x;
#endif
						goto done_mnemonic;
					}
					continue;
				}
				local gen,op_types = x...;
				assert op_types;
				local gen_result;
				if (#op_types == #operands) {
					local args = [none] * #op_types;
					for (local i = 0; i < #op_types; ++i) {
						local val = getOperandValue(op_types[i], operands[i]);
						if (val is none)
							goto try_next_overload;
						args[i] = val;
					}
					gen_result = gen(args...);
do_yield_gen_result:
#ifdef PRINT_INSTRUCTION_NAMES
					local is_first = true;
					for (local x: gen_result) {
						if (is_first && x is int)
							x = getInstructionName(x);
						is_first = false;
						yield x;
					}
#else
					yield gen_result...;
#endif
					goto done_mnemonic;
				}
				if (#op_types == 1 && op_types[0] == OPERAND_RAW) {
					gen_result = gen(operand_data);
					goto do_yield_gen_result;
				}
try_next_overload:
				;
			}
			throw Error("No overload of " + repr(name) + " accepts the " + #operands + " arguments from " + repr(l));
done_mnemonic:
			continue;
		}
		throw Error("Unexpected input line: " + repr(l));
	}
}

function compileExpressionEx(arch: string, reg: string | int, text: string, deref_after: bool = false): {int...} {
	local parts = [];
	for (local p: compileExpressionBase(arch, text)) {
		if (p is Symbol) {
			p.addr = #parts;
			continue;
		}
		if (p is Relocation)
			p.addr = #parts;
		parts.append(p);
	}
	/* Resolve relocations */
	for (local i = 0; i < #parts; ++i) {
		local p = parts[i];
		if (p is Relocation)
			parts[i] = p.resolve();
	}
	if (reg.startswith("%"))
		reg = reg[1:];
	yield deref_after ? DW_CFA_expression : DW_CFA_val_expression;
	yield getRegisterId(arch, reg);
	yield encodeULeb128(#parts)...;
	yield parts...;
}


function compileExpression(arch: string, reg: string | int, text: string, deref_after: bool = false) {
	local count = 0;
	local bytes = List(compileExpressionEx(arch, reg, text, deref_after));
	final local bytes_per_line = 8;
	local is_first = true;
	for (local b: bytes) {
		if (is_first)
			print "__ASM_L(	.cfi_escape ",;
#ifdef PRINT_INSTRUCTION_NAMES
		if (b is string && !b.startswith("__ASM_ARG")) {
			if (!is_first) {
				print ")";
				print "__ASM_L(	.cfi_escape ",;
			}
			count = 0;
			print b,;
		} else
#endif /* PRINT_INSTRUCTION_NAMES */
		{
			if (count)
				print ",",;
			if (b !is string)
				b = "0x%.2x" % b;
			print b,;
		}
		is_first = false;
		if (++count >= bytes_per_line) {
			print ")";
			is_first = true;
			count = 0;
		}
	}
	if (!is_first)
		print ")";
}











