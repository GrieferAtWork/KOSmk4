/* Copyright (c) 2019-2021 Griefer@Work                                       *
 *                                                                            *
 * This software is provided 'as-is', without any express or implied          *
 * warranty. In no event will the authors be held liable for any damages      *
 * arising from the use of this software.                                     *
 *                                                                            *
 * Permission is granted to anyone to use this software for any purpose,      *
 * including commercial applications, and to alter it and redistribute it     *
 * freely, subject to the following restrictions:                             *
 *                                                                            *
 * 1. The origin of this software must not be misrepresented; you must not    *
 *    claim that you wrote the original software. If you use this software    *
 *    in a product, an acknowledgement (see the following) in the product     *
 *    documentation is required:                                              *
 *    Portions Copyright (c) 2019-2021 Griefer@Work                           *
 * 2. Altered source versions must be plainly marked as such, and must not be *
 *    misrepresented as being the original software.                          *
 * 3. This notice may not be removed or altered from any source distribution. *
 */
import * from deemon;

@@Deemon re-implementation of the KOS @fdirent_hash() function
@@Returns a pair of integers @(hash32: int, hash64: int) that
@@map to the hash values in 32-bit and 64-bit environments
class fdirent_hash {
	this = default;
	public member text: string;

	function getHash(sizeOfPointer: int, endian: string): int {
		local result = 0;
		for (local part: text.bytes().segments(sizeOfPointer)) {
			if (#part == sizeOfPointer) {
				result += int.frombytes(Bytes(part), byteorder: endian, signed: false);
				result *= 9;
			} else {
				for (local i: [#part-1:-1,-1])
					result += part[i] << (i * 8);
			}
		}
		return result;
	}

	operator str(): string {
		return "FDIRENT_HASH_INIT({}, {}, {}, {})".format({
			getHash(4, "little").hex(),
			getHash(8, "little").hex(),
			getHash(4, "big").hex(),
			getHash(8, "big").hex(),
		});
	}
}

