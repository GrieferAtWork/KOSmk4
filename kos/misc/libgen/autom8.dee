/* Copyright (c) 2019-2024 Griefer@Work                                       *
 *                                                                            *
 * This software is provided 'as-is', without any express or implied          *
 * warranty. In no event will the authors be held liable for any damages      *
 * arising from the use of this software.                                     *
 *                                                                            *
 * Permission is granted to anyone to use this software for any purpose,      *
 * including commercial applications, and to alter it and redistribute it     *
 * freely, subject to the following restrictions:                             *
 *                                                                            *
 * 1. The origin of this software must not be misrepresented; you must not    *
 *    claim that you wrote the original software. If you use this software    *
 *    in a product, an acknowledgement (see the following) in the product     *
 *    documentation is required:                                              *
 *    Portions Copyright (c) 2019-2024 Griefer@Work                           *
 * 2. Altered source versions must be plainly marked as such, and must not be *
 *    misrepresented as being the original software.                          *
 * 3. This notice may not be removed or altered from any source distribution. *
 */

/* Combination of various utilities that parse [[[foo]]]-tags from source files
 * and will automatically generate code accordingly. Additionally, this  script
 * will re-flow block comments to form them into paragraphs.
 *
 *  - [[[enum]]] Automatically generate  assembly-compatible  enum  macro
 *               definitions. You may look for usage examples in headers!
 *
 */
// The following special comments are recognized to enabled/disable features:
// >> /* autom8 reflow-comments off */
//    Disable comment reflow
//
// >> /* autom8 reflow-comments on */
//    Enable comment reflow (default)
//
// >> /* clang-format off */
//    Alias for: "/* autom8 reflow-comments off */"
//
// >> /* clang-format on */
//    Alias for: "/* autom8 reflow-comments on */"

#undef HAVE_DEBUG_PRINT
#if 0
#define HAVE_DEBUG_PRINT
#endif

import * from deemon;
import fs;

global Autom8Parser;

@@Set  to   @true  if   comment   reflow  should   be   undone.
@@When  given,  instead  of  reflowing  spaces  evenly,  always
@@assign exact one space-character for every possible position,
@@thus causing text to flow to the left.
global OPT_UNDO_REFLOW = false;

function builtinReflowOff(parser: Autom8Parser, none) {
	parser.commentReflowEnabled = false;
}
function builtinReflowOn(parser: Autom8Parser, none) {
	parser.commentReflowEnabled = true;
}
function builtinSkip2End(parser: Autom8Parser, none) {
	local endTag = parser.text.find("/*[[[end]]]*/", parser.commentEnd);
	local endTag2 = parser.text.find("//[[[end]]]\n", parser.commentEnd);
	if (endTag >= 0)
		endTag += 13;
	if (endTag2 >= 0)
		endTag2 += 12;
	if (endTag < 0) {
		endTag = endTag2;
	} else if (endTag2 >= 0 && endTag > endTag2) {
		endTag = endTag2;
	}
	if (endTag < 0) {
		parser.errAt(parser.commentStart + 3,
			"Missing [[[end]]]-tag for [[[deemon]]]");
	}
	parser.newText << parser.text[parser.flushStart:endTag];
	parser.flushStart = endTag;
}

/* A couple of built-in commands. */
global final BUILTIN_COMMANDS: {string: none | Callable with (Autom8Parser, string)} = {
	"deemon" : builtinSkip2End, /* Don't format auto-generated output of [[[deemon]]]-scripts */
	"magic" : none,             /* Magic compiler annotations (used by the KOS build system) */
	"AUTO" : none,              /* Generic region marker */
	"start" : none,             /* Generic region start */
	"begin" : none,             /* Generic region start */
	"end" : none,               /* Generic region end */
	"skip" : none,              /* Skip implementation (in libc/user/ *.c) */
	"impl" : none,              /* Custom implementation (in libc/user/ *.c) */
	"virtual" : none,           /* Seen in "x86-db.h" */
	"struct" : none,            /* TODO: Planned extension for automation of __OFFSET_* macros... */
	"order" : none,             /* Used by generate_headers.dee */

	/* Disable comment reflow inside of auto-generated prototypes (in libc/user/ *.c) */
	"head" : builtinReflowOff,  /* Prototype header (in libc/user/ *.c) */
	"body" : builtinReflowOn,   /* Prototype body (in libc/user/ *.c) */
};

function getAutom8Command(name: string): none | Callable with (Autom8Parser, string) {
	if (name.startswith("opt."))
		return try getAutom8Command(name[4:]) catch (...) none;
	local result = BUILTIN_COMMANDS.get(name, false);
	if (result === false)
		result = import(".autom8." + name).main;
	return result;
}

class Autom8Parser {
	this = default;

	public member filename: string;
	public member _firstLineOffset: int = 0;
	public member _firstLineColOffset: int = 0;

	public member text: string;
	public member newText: File;
	public member flushStart: int;

	@@Points after the "/*" of the comment.
	public member commentStart: int;

	@@Points before the "*/" of the comment.
	public member commentEnd: int;

	@@> == #text
	public member len: int;

	@@Set to @true if comment-reflow is currently enabled.
	public member commentReflowEnabled: bool = true;

	function lcAt(offset: int): (int, int) {
		local numLines = text.count("\n", 0, offset);
		if (numLines == 0)
			return (_firstLineOffset + 1, _firstLineColOffset + 1 + offset);
		local startOfLine = text.rindex("\n", 0, offset);
		return (_firstLineOffset + 1 + numLines, offset - startOfLine);
	}

	function errAt(offset: int, message: string) {
		local l, c = lcAt(offset)...;
		print(filename, "(", l, ",", c, ") : Error : ", message);
		throw Error(message);
	}
}

global autom8Worker;
function reflowCommentsInString(
		parser: Autom8Parser, startOffset: int, text: string): string {
	if (!parser.commentReflowEnabled)
		return text;
	local inner = copy parser;
	inner.text       = text;
	inner.newText    = File.Writer();
	inner.flushStart = 0;
	inner.len        = #text;
	inner._firstLineOffset, inner._firstLineColOffset = parser.lcAt(startOffset)...;
	autom8Worker(inner, none);
	return inner.newText.string;
}







function countLeadingSpaces(line: string): int {
	local result = 0;
	while (result < #line && line.isspace(result))
		++result;
	return result;
}

function containsUnevenSpaces(l: string): bool {
	local minSpaceCount = int.SIZE_MAX;
	local maxSpaceCount = 0;
	l = l.strip();
	local i = 0, flushStart = 0;
	local lineLen = #l;
	local isFirst = true;
	while (i < lineLen) {
		if (l.isspace(i)) {
			local isWord = i > flushStart;
			if (isWord)
				isFirst = false;
			local n = 1;
			for (;;) {
				++i;
				if (i >= lineLen)
					break;
				if (!l.isspace(i))
					break;
				++n;
			}
			if (isWord) {
				if (minSpaceCount > n)
					minSpaceCount = n;
				if (maxSpaceCount < n)
					maxSpaceCount = n;
			}
			flushStart = i;
		} else {
			local ch = l[i];
			if (ch == "`") {
				/* Special case: Don't re-flow spaces within inline code comments. */
				local e = l.find("'", i);
				if (e < 0)
					e = l.find("`", i);
				if (e >= 0) {
					i = e + 1;
				} else {
					++i;
				}
			} else if (ch == '"') {
				/* Special case: Don't re-flow quoted text. */
				local e = l.find('"', i + 1);
				if (e >= 0) {
					i = e + 1;
				} else {
					++i;
				}
			} else if (ch == "[") {
				/* Special case: Don't re-flow syntax annotations. */
				local e = l.findmatch("[", "]", i + 1);
				if (e >= 0) {
					i = e + 1;
				} else {
					++i;
				}
			} else if (ch == "-" && isFirst) {
				++i;
				while (i < lineLen && l.isspace(i))
					++i;
			} else if (ch == ":" && isFirst && i > 0) {
				++i;
				while (i < lineLen && l.isspace(i))
					++i;
			} else {
				++i;
			}
		}
	}
	return (maxSpaceCount - minSpaceCount) >= 2;
}

function splitWords(l: string): {string...} {
	local lineLen = #l;
	local i = 0, flushStart = 0;
	local isFirst = true;
	while (i < lineLen) {
		if (l.isspace(i)) {
			if (i > flushStart) {
				yield l[flushStart:i];
				isFirst = false;
			}
			++i;
			flushStart = i;
		} else {
			local ch = l[i];
			if (ch == "`") {
				/* Special case: Don't re-flow spaces within inline code comments. */
				local e = l.find("'", i);
				if (e < 0)
					e = l.find("`", i);
				if (e >= 0) {
					i = e + 1;
				} else {
					++i;
				}
			} else if (ch == '"') {
				/* Special case: Don't re-flow quoted text. */
				local e = l.find('"', i + 1);
				if (e >= 0) {
					i = e + 1;
				} else {
					++i;
				}
			} else if (ch == "[") {
				/* Special case: Don't re-flow syntax annotations. */
				local e = l.findmatch("[", "]", i + 1);
				if (e >= 0) {
					i = e + 1;
				} else {
					++i;
				}
			} else if (ch == "-" && isFirst) {
				++i;
				while (i < lineLen && l.isspace(i))
					++i;
			} else if (ch == ":" && isFirst && i > 0) {
				++i;
				while (i < lineLen && l.isspace(i))
					++i;
			} else {
				++i;
			}
		}
	}
	if (flushStart < lineLen)
		yield l[flushStart:];
}

function shortestPossibleLightLength(l: string): int {
	if (l && l.isspace(0)) {
		local numLeadingSpaces = 1;
		while (numLeadingSpaces < #l && l.isspace(numLeadingSpaces))
			++numLeadingSpaces;
		return numLeadingSpaces +
			shortestPossibleLightLength(l[numLeadingSpaces:]);
	}
	local result = -1;
	for (local w: splitWords(l))
		result += 1 + #w;
	return result;
}

global final NOREFLOW_LINE_START_MARKERS = ">$&%[]{}";

function reflowTextLine(l: string, width: int): string {
	l = l.rstrip();
	if (l && l.isspace(0)) {
		local numLeadingSpaces = 1;
		while (numLeadingSpaces < #l && l.isspace(numLeadingSpaces))
			++numLeadingSpaces;
		local head = l[:numLeadingSpaces];
		local tail = l[numLeadingSpaces:];
		local newWidth = width - numLeadingSpaces;
		if (newWidth < 0)
			newWidth = 0;
		return head + reflowTextLine(tail, newWidth);
	}
	if (#l == width && !containsUnevenSpaces(l) && !OPT_UNDO_REFLOW)
		return l;
	if (l && l.first in NOREFLOW_LINE_START_MARKERS)
		return l;
	if (!l.isanyalnum())
		return l;
	local words = List(splitWords(l));
	if (#words <= 1)
		return l;
	if (OPT_UNDO_REFLOW)
		return " ".join(words);
	local textLength = words.each.length + ...;
	local numSpaces = width - textLength;
	local spaceLocations = #words - 1;
	local baseSpacesPerLocation = numSpaces / spaceLocations;
	if (baseSpacesPerLocation < 1)
		baseSpacesPerLocation = 1;
	local spaces = [" " * baseSpacesPerLocation] * spaceLocations;
	numSpaces -= baseSpacesPerLocation * spaceLocations;
	local spacesPerLocation = (float)numSpaces / spaceLocations;
	local count = 0.0;
	local i = 0;
	while (numSpaces > 0) {
		count += spacesPerLocation;
		if (count >= 1.0) {
			local index = i % spaceLocations;
			spaces[index] += " ";
			--numSpaces;
			count -= 1.0;
		}
		++i;
	}
	File.Writer result;
	for (local w: words) {
		result << w;
		if (spaces)
			result << spaces.popfront();
	}
	assert !spaces;
	return result.string;
}

function reflowSimpleText(lines: {string...}, lineLength: int): {string...} {
	for (local l: lines)
		yield reflowTextLine(l, lineLength);
}

function reflowBlockComment(lines: {string...}, lineLength: int = -1): {string...} {
	if (#lines <= 1)
		return lines;
#ifdef HAVE_DEBUG_PRINT
	print("reflowBlockComment:", lineLength);
	for (local l: lines)
		print("\t", repr l);
#endif /* HAVE_DEBUG_PRINT */
	local commonPrefix = none;
	local commonTail = none;
	local commonLineLength = -1;
	for (local l: lines) {
		l = l.rstrip();
		commonPrefix = commonPrefix is none
			? l : commonPrefix[:commonPrefix.common(l)];
		if (commonTail is none) {
			commonTail = l;
		} else {
			local n = commonTail.reversed().common(l.reversed());
			commonTail = commonTail[#commonTail-n:];
		}
		if (commonLineLength !is none) {
			local lineLen = #l;
			if (commonLineLength < 0) {
				commonLineLength = lineLen;
			} else if (commonLineLength != lineLen) {
				commonLineLength = none;
			}
		}
	}
	if (commonTail) {
		local i = #commonTail;
		while (i) {
			--i;
			local ch = commonTail[i];
			if (ch !in "\t *") {
				commonTail = commonTail[i+1:];
				break;
			}
		}
	}
	if (commonLineLength !is none && commonLineLength >= 0) {
		if (commonTail)
			return lines;
	}
	if (commonPrefix == commonTail && commonPrefix) {
		for (local l: lines) {
			if (l == commonPrefix)
				return lines;
		}
	}
	if (commonLineLength is none)
		commonTail = "";
	for (local c: "@-*`'\"") {
		local p = commonPrefix.find(c);
		if (p >= 0)
			commonPrefix = commonPrefix[:p];
	}
	if (commonPrefix.isanyalnum()) {
		local i = 0;
		while (!commonPrefix.isalnum(i))
			++i;
		commonPrefix = commonPrefix[:i];
	}
	if (commonPrefix || commonTail) {
		/* Don't reflow if the common prefix indicates a code-block! */
		local baseCommonPrefix = commonPrefix.lstrip();
		if (baseCommonPrefix && baseCommonPrefix.first in NOREFLOW_LINE_START_MARKERS)
			return lines;
		local commonPrefixLen = #commonPrefix;
		local commonTailLen   = #commonTail;
		local innerText;
		if (commonTailLen) {
			innerText = List(for (local l: lines) l.rstrip()[commonPrefixLen:-commonTailLen]);
		} else {
			innerText = List(for (local l: lines) l[commonPrefixLen:]);
		}
		if (lineLength >= 0) {
			local usedLineLength = lineLength - (commonPrefixLen + commonTailLen);
			if (usedLineLength < 0)
				usedLineLength = 0;
			innerText = reflowBlockComment(innerText, usedLineLength);
			if (commonTail)
				innerText = for (local l: innerText) l.ljust(usedLineLength);
		} else if (commonLineLength !is none && commonTail) {
			local adjCommonLength = commonLineLength - (commonPrefixLen + commonTailLen);
			innerText = reflowBlockComment(innerText, adjCommonLength);
			if (commonTail)
				innerText = for (local l: innerText) l.ljust(adjCommonLength);
		} else {
			innerText = reflowBlockComment(innerText);
		}
		innerText = List(for (local l: innerText) commonPrefix + l + commonTail);
		return innerText;
	}
	/* Check for leading comment annotations ([foo]-style) */
	if (lines.first.startswith("[")) {
		local recursion = 0;
		local n = #lines;
		local i = 0;
		local j = 0;
		while (i < n) {
			local l = lines[i];
			while (j < #l) {
				local ch = l[j];
				if (ch == "[") {
					++recursion;
				} else if (ch == "]") {
					--recursion;
					if (recursion == 0) {
						++j;
						break;
					}
				}
				++j;
			}
			if (recursion == 0 && i < n - 1 && !lines[i+1].startswith("["))
				break;
			j = 0;
			++i;
		}
		if (i >= n)
			return lines;
		local result = List(lines[:i]);
		local lastLine = lines[i];
		local lastLinePrefix = lastLine[:j];
		local fakeLastLineOffset = j;
		if (fakeLastLineOffset < #lastLine && lastLine.isspace(fakeLastLineOffset))
			++fakeLastLineOffset;
		local fakeLastLineSuffix = lastLine[fakeLastLineOffset:];
		if (fakeLastLineSuffix.strip()) {
			local fakeLastLine = ("X" * fakeLastLineOffset) + fakeLastLineSuffix;
			local postLines = [fakeLastLine];
			postLines.extend(lines[i+1:]);
			postLines = reflowBlockComment(postLines, lineLength);
			lastLine = lastLinePrefix.ljust(fakeLastLineOffset) +
				postLines.first[fakeLastLineOffset:];
			result.append(lastLine);
			result.extend(postLines[1:]);
		} else {
			result.append(lines[i]);
			result.extend(reflowBlockComment(lines[i+1:], lineLength));
		}
		return result;
	}
	/* Split paragraphs that are separated by empty lines. */
	local result = [];
	local paragraphBlock = [];
	local numLines = #lines;
	for (local i = 0; i < numLines;) {
		local l = lines[i].rstrip();
		if (!l) {
			if (paragraphBlock) {
				result.extend(reflowBlockComment(paragraphBlock, lineLength));
				paragraphBlock = [];
			}
			result.append(l);
		} else if ("```" in l) {
			/* Disable reflow when ``` is encountered. */
			local start = l.index("```");
			local end   = l.find("```", start + 3);
			if (end >= 0)
				goto normal_paragraph_after_tripple_backtick;
			local startLine = i;
			++i;
			while (i < numLines) {
				if ("```" in lines[i])
					break;
				++i;
			}
			if (i < numLines)
				++i; /* Also include the last line. */
			if (paragraphBlock)
				result.extend(reflowBlockComment(paragraphBlock, lineLength));
			result.extend(lines[startLine:i]);
			paragraphBlock = [];
			continue;
		} else normal_paragraph_after_tripple_backtick: if (l.first in "-*") {
			if (paragraphBlock)
				result.extend(reflowBlockComment(paragraphBlock, lineLength));
			paragraphBlock = [l];
		} else if (l.startswith("@") && #l >= 3 && l.issymstrt(1)) {
			local j = 2;
			while (j < #l && l.issymcont(j))
				++j;
			while (j < #l && l.isspace(j))
				++j;
			if (j < #l && l[j] in ":") {
				/* Element-tag annotation */
				if (paragraphBlock)
					result.extend(reflowBlockComment(paragraphBlock, lineLength));
				paragraphBlock = [l];
			} else {
				if (paragraphBlock) {
					result.extend(reflowBlockComment(paragraphBlock, lineLength));
					paragraphBlock = [];
				}
				result.append(l);
			}
		} else {
			local colpos = l.find(":");
			/* Special case for 1: foo\n2: bar-style listings.
			 * When one of these is encountered, then manually start a new paragraph.
			 * For this purpose, everything that comes before the ':' must consist of
			 * only a single word (though stuff like `a b c' will only be  recognized
			 * as a single word) */
			if (colpos >= 1 && (!l.isanyspace(0, colpos) || #splitWords(l[:colpos]) == 1)) {
				if (paragraphBlock)
					result.extend(reflowBlockComment(paragraphBlock, lineLength));
				paragraphBlock = [l];
			} else {
				paragraphBlock.append(l);
			}
		}
		++i;
	}
	/* Check for sub-paragraphs */
	local currentBlock = none;
	local prevIndent = none;
	local numLines = #paragraphBlock;
	for (local i = 0; i < numLines;) {
		local l = paragraphBlock[i];
		local nspc = countLeadingSpaces(l);
		if (currentBlock is none) {
			currentBlock = [l];
			prevIndent = nspc;
			++i;
			continue;
		}

		/* Check if the line may be a @foo-annotation */
		if (l.startswith("@") && #l >= 3 && l.issymstrt(1)) {
			local j = 2;
			while (j < #l && l.issymcont(j))
				++j;
			while (j < #l && l.isspace(j))
				++j;
			if (j < #l && l[j] in ":") {
				/* Element-tag annotation */
				++j;
				while (j < #l && l.isspace(j))
					++j;
				if (currentBlock)
					result.extend(reflowBlockComment(currentBlock, lineLength));
				currentBlock = [l];
				if ((i + 1) >= numLines)
					break;
				local nextLine = paragraphBlock[i + 1];
				if (countLeadingSpaces(nextLine) >= j)
					continue;
				/* Less indentation -> This one's a single-line-tag. */
				if (lineLength >= 0)
					l = l[:j] + reflowTextLine(l[j:], lineLength);
				result.append(l);
				currentBlock = [];
				continue;
			}
		}
		/* Check if the new line is may shorter than the previous.
		 * If so,  then this  line marks  the end  of a  paragraph */
		local lineLen = shortestPossibleLightLength(l);
		local prevLineLen = shortestPossibleLightLength(currentBlock.last);
		if (lineLen <= (prevLineLen * 3) / 4) {
			if (i < numLines-1) {
				currentBlock.append(l);
				result.extend(reflowBlockComment(currentBlock, lineLength));
				currentBlock = none;
				prevIndent = none;
				++i;
				continue;
			}
		}
		if (prevIndent == nspc) {
			/* If the next line is much longer than the
			 * previous, then begin another  paragraph. */
			if (lineLen >= (prevLineLen * 5) / 4)
				goto reflow_normal_block;
			currentBlock.append(l);
			++i;
			continue;
		}
		if (nspc <= prevIndent) {
reflow_normal_block:
			result.extend(reflowBlockComment(currentBlock, lineLength));
			currentBlock = [l];
			prevIndent = nspc;
			++i;
			continue;
		}
		/* Check for something like this:
		 * >> NOTE: foo
		 * >>       bar
		 * Here, there is a sub-paragraphs "foo\nbar" */
		local prevLine = currentBlock.last;
		if ((nspc - 1) >= #prevLine)
			goto reflow_normal_block;
		if (!prevLine.isspace(nspc - 1))
			goto reflow_normal_block;
		if (prevLine.isspace(nspc))
			goto reflow_normal_block;
		/* Yes: It's a NOTE:-style sub-paragraph */
		local subParagraphIndent = nspc;
		currentBlock.popback();
		result.extend(reflowBlockComment(currentBlock, lineLength));
		local firstLinePrefix = prevLine[:subParagraphIndent];
		local secondLinePrefix = l[:subParagraphIndent];
		currentBlock = [prevLine[subParagraphIndent:], l[subParagraphIndent:]];
		local activeIndentations = [subParagraphIndent];
		for (;;) {
			++i;
			if (i >= numLines)
				break;
			l = paragraphBlock[i];
			nspc = countLeadingSpaces(l);
			if (nspc !in activeIndentations) {
				/* Check for something like this:
				 * >> FOO: a b c
				 * >>      b c a
				 * >>      BAR: liz
				 * >>           laz */
				while (activeIndentations && nspc < activeIndentations.last)
					activeIndentations.popback();
				if (!activeIndentations)
					break;
				local prevLine = currentBlock.last;
				local relnspc = nspc - subParagraphIndent;
				if (#prevLine < relnspc || !prevLine.isspace(relnspc - 1))
					break;
				activeIndentations.append(nspc);
			}
			currentBlock.append(l[subParagraphIndent:]);
		}
		local isFirst = true;
		local subParagraphLineLength = lineLength;
		if (subParagraphLineLength >= subParagraphIndent)
			subParagraphLineLength -= subParagraphIndent;
		for (local reflowLine: reflowBlockComment(currentBlock, subParagraphLineLength)) {
			if (isFirst) {
				reflowLine = firstLinePrefix + reflowLine;
				isFirst = false;
			} else {
				reflowLine = secondLinePrefix + reflowLine;
			}
			result.append(reflowLine);
		}
		if (i >= numLines)
			return result;
		currentBlock = [l];
		prevIndent = nspc;
		++i;
	}
	/* Actually reflow simple text. */
	if (currentBlock) {
		/* Don't reflow if the  text contains uneven space  locations.
		 * e.g. "foo   bar baz" is uneven, but "foo   bar  baz" isn't! */
		if (currentBlock != lines) {
			result.extend(reflowBlockComment(currentBlock, lineLength));
		} else if ((for (local l: currentBlock) containsUnevenSpaces(l)) || ...) {
			result.extend(currentBlock);
		} else {
#ifdef HAVE_DEBUG_PRINT
			print("reflowBlock:", lineLength);
			for (local l: currentBlock)
				print("\t", repr l);
#endif /* HAVE_DEBUG_PRINT */
			local lineLenMin = int.SIZE_MAX;
			local lineLenMax = 0;
			for (local l: currentBlock) {
				l = shortestPossibleLightLength(l);
				if (lineLenMin > l)
					lineLenMin = l;
				if (lineLenMax < l)
					lineLenMax = l;
			}
			if (lineLength < 0) {
				/* TODO: If  it's possible to  reduce `lineLenMax' without having
				 *       to introduce additional  comment lines,  emit a  warning
				 *       to notify the user that they should, and how they should
				 *       move around comment text in order to make the block more
				 *       compact! */
				lineLength = lineLenMax;
			}
			local lastLine = currentBlock.last;
			local lastLineLen = shortestPossibleLightLength(lastLine);
			if ((lastLineLen == lineLenMin && #currentBlock > 2) ||
			   (lastLineLen <= (lineLength * 3) / 4)) {
				/* Don't reflow the last line. */
				currentBlock.popback();
				result.extend(reflowSimpleText(currentBlock, lineLength));
				if (#lastLine != lastLineLen) {
					local saved_OPT_UNDO_REFLOW = OPT_UNDO_REFLOW;
					OPT_UNDO_REFLOW = true;
					result.append(reflowTextLine(lastLine, lineLength));
					OPT_UNDO_REFLOW = saved_OPT_UNDO_REFLOW;
				} else {
					result.append(lastLine);
				}
			} else {
				result.extend(reflowSimpleText(currentBlock, lineLength));
			}
		}
	}
	return result;
}

function shouldReflowComment(body: string): bool {
	if (body.casecontains("copyright (c)"))
		return false;
	if (body.casecontains("gnu general public license"))
		return false;
	return true;
}


function autom8Worker(parser: Autom8Parser,
		getCommandByName: Callable with string): bool {
	local text = parser.text;
	local flushStart = parser.flushStart;
	for (;;) {
		local commentStart;
		commentStart = flushStart;
		for (;;) {
			local lineWiseCommentBlockPrefix;
			local commentStart2 = text.find("@@", commentStart);
			commentStart = text.find("/", commentStart);
			if (commentStart2 >= 0 &&
			    (commentStart < 0 || commentStart2 < commentStart)) {
				/* Deemon documentation comment. */
				commentStart = commentStart2 + 2;
				lineWiseCommentBlockPrefix = "@@";
				goto do_line_wise_comment_block;
			}
			if (commentStart < 0)
				goto done_text;
			++commentStart;
			if (commentStart >= #text)
				goto done_text;
			if (text[commentStart] == "*") {
				/* C-style comments. */
				++commentStart;
				break;
			} else if (text[commentStart] == "/") {
				++commentStart;
				lineWiseCommentBlockPrefix = "//";
do_line_wise_comment_block:
				/* C++-style comments. */
				/* Reflow comment paragraphs. */
				local commentLineStart = text.rfind("\n", 0, commentStart) + 1;
				local numLeadingTabs = 0;
				while ((commentLineStart + numLeadingTabs) < commentStart &&
				       (text[commentLineStart + numLeadingTabs] == "\t"))
					++numLeadingTabs;
				local numLeadingSpaces = (commentStart - 2) - (commentLineStart + numLeadingTabs);
				local leadingPrefix =
					("\t" * numLeadingTabs) +
					(" " * numLeadingSpaces) +
					lineWiseCommentBlockPrefix;
				local commentEnd = text.find("\n", commentStart);
				if (commentEnd < 0) {
					commentEnd = #text;
				} else {
					++commentEnd;
				}
				local comLine = text[commentStart:commentEnd].rstrip();
				local commentLines: {string...} = [comLine];
				if (comLine.endswith("\\"))
					commentLines = none;
				while (text.startswith(leadingPrefix, commentEnd)) {
					local eol = text.find("\n", commentEnd);
					if (eol < 0) {
						eol = #text;
					} else {
						++eol;
					}
					comLine = text[commentEnd+#leadingPrefix:eol];
					if (comLine.endswith("\\"))
						commentLines = none;
					commentLines.append(comLine.rstrip());
					commentEnd = eol;
				}
				if (commentLines is none || #commentLines < 2) {
					/* Block contained escaped line-feeds or only 1 line (== don't reflow) */
					commentStart = commentEnd;
					continue;
				}
				/* Reflow comment */
				commentLines = reflowBlockComment(commentLines);
				parser.newText
					<< text[flushStart:commentStart]
					<< ("\n" + leadingPrefix).join(commentLines)
					<< "\n";
				flushStart   = commentEnd;
				commentStart = commentEnd;
			}
		}
		local commentEnd = text.find("*/", commentStart);
		if (commentEnd < 0)
			break;
		parser.newText << text[flushStart:commentStart];
		flushStart = commentStart;
		local commentBody = text[commentStart:commentEnd];
		if (commentBody.startswith("[[[") && commentBody.endswith("]]]")) {
			/* Special control comment. */
			commentBody = commentBody[3:-3];
			if (commentBody.issymstrt(0)) {
				parser.commentStart = commentStart;
				parser.commentEnd   = commentEnd;
				parser.flushStart   = flushStart;
				local cmdNameEnd = 1;
				while (cmdNameEnd < #commentBody &&
				       (commentBody.issymcont(cmdNameEnd) ||
				        commentBody[cmdNameEnd] in "."))
					++cmdNameEnd;
				local cmd;
				try {
					cmd = getCommandByName(commentBody[:cmdNameEnd]);
				} catch (Error as e) {
					local l, c = parser.lcAt(commentStart + 3)...;
					print(parser.filename, "(", l, ",", c, ") : Error : ", e.message);
					throw;
				}
				if (cmd !is none) {
					commentBody = commentBody[cmdNameEnd:];
					cmd(parser, commentBody.lstrip());
				}
				/* Reload control variables in case `cmd' modified them. */
				text       = parser.text;
				commentEnd = parser.commentEnd;
				flushStart = parser.flushStart;
			}
		} else if ("\n" in commentBody && parser.commentReflowEnabled &&
		           shouldReflowComment(commentBody)) {
			/* Reflow comment paragraphs. */
			local commentLineStart = text.rfind("\n", 0, commentStart) + 1;
			local numLeadingTabs = 0;
			while ((commentLineStart + numLeadingTabs) < commentStart &&
			       (text[commentLineStart + numLeadingTabs] == "\t"))
				++numLeadingTabs;
			local numLeadingSpaces = (commentStart - 2) -
				(commentLineStart + numLeadingTabs);
			local leadingTabs = "\t" * numLeadingTabs;
			local leadingSpaces = " " * numLeadingSpaces;
			local commentLines: {string...} = [];
			local hasTrailingNewline: bool = false;
			for (local l: commentBody.splitlines(false)) {
				if (!commentLines) {
					commentLines.append(l);
				} else {
					if (hasTrailingNewline)
						goto done_comment;
					if (l[:numLeadingTabs] != leadingTabs)
						goto done_comment;
					l = l[numLeadingTabs:];
					if (l[:numLeadingSpaces] != leadingSpaces)
						goto done_comment;
					l = l[numLeadingSpaces:];
					if (!l.startswith(" *")) {
						if (l == " ") {
							hasTrailingNewline = true;
							continue;
						}
						goto done_comment;
					}
					l = l[2:];
					commentLines.append(l);
				}
			}
			if (#commentLines >= 2) {
				/* Check if all lines except for the last end with a trailing "\\" */
				if (hasTrailingNewline) {
					for (local l: commentLines) {
						if (!l.endswith("\\"))
							goto normal_reflow;
					}
					local longestLineLength = (commentLines.each.length > ...) - 1;
					commentLines = List(
						for (local l: commentLines)
							l[:-1].rstrip()
					);
					commentLines = List(reflowBlockComment(commentLines));
					commentLines = List(
						for (local l: commentLines)
							l.ljust(longestLineLength) + "\\"
					);
				} else {
					local linesExceptLast = commentLines[:-1];
					for (local l: linesExceptLast) {
						if (!l.endswith("\\"))
							goto normal_reflow;
					}
					local lastLine = commentLines.last;
					local longestLineLength = (linesExceptLast.each.length > ...) - 1;
					commentLines = List(for (local l: linesExceptLast) l[:-1].rstrip());
					commentLines = reflowBlockComment(commentLines);
					commentLines = List(for (local l: commentLines) l.ljust(longestLineLength) + "\\");
					commentLines.append(lastLine);
				}
			} else {
normal_reflow:
				commentLines = reflowBlockComment(commentLines);
			}
			commentBody = ("\n" + leadingTabs + leadingSpaces + " *").join(commentLines);
			parser.newText << commentBody;
			if (hasTrailingNewline) {
				parser.newText << "\n" << leadingTabs << leadingSpaces;
				parser.newText << " ";
			} else if (!commentBody.endswith(" ") && !commentBody.endswith("***")) {
				/* Append a trailing space if there isn't one already,  and
				 * if the comment body doesn't end with one of those fancy:
				 ************************************************************/
				parser.newText << " ";
			}
			flushStart = commentEnd;
		} else {
			commentBody = commentBody.strip();
			if (commentBody.startswith("clang-format ")) {
				commentBody = commentBody[13:].strip();
				if (commentBody == "off") {
					parser.commentReflowEnabled = false;
				} else if (commentBody == "on") {
					parser.commentReflowEnabled = true;
				}
			} else if (commentBody.startswith("autom8 ")) {
				commentBody = commentBody[7:].strip();
				if (commentBody.startswith("reflow-comments ")) {
					commentBody = commentBody[16:].strip();
					if (commentBody == "off") {
						parser.commentReflowEnabled = false;
					} else if (commentBody == "on") {
						parser.commentReflowEnabled = true;
					}
				}
			} else if (commentBody.startswith("HASH ")) {
				/* Disallow autom8 within auto-generated (hashed) files */
				if (commentStart == 2)
					return false;
			}
		}
done_comment:
		if (flushStart < commentEnd) {
			parser.newText << text[flushStart:commentEnd];
			flushStart = commentEnd;
		}
	}
done_text:
	parser.newText << text[flushStart:parser.len];
	return true;
}

function trimTrailingSpaces(text: string): string {
	File.Writer result;
	for (local l: text.rstrip().splitlines())
		result << l.rstrip() << "\n";
	return result.string;
}

@@Do autom8 formating on @filename
@@@return: true:  The contents of the named file changed
@@@return: false: The file was already properly formatted
function autom8File(filename: string, beforeWriteHook: Callable = none, quiet: bool = false): bool {
	local parser = Autom8Parser();
	local oldBytes;
	try {
		oldBytes = File.open(filename, "r").read();
		try {
			parser.text = trimTrailingSpaces(oldBytes.decode("utf-8"));
		} catch (UnicodeDecodeError from errors) {
			parser.text = trimTrailingSpaces(oldBytes.decode("latin-1"));
		}
	} catch (...) {
		print File.stderr: ("Error while loading file:", repr filename);
		throw;
	}
	parser.newText = File.Writer();
	parser.flushStart = 0;
	parser.len = #parser.text;
	parser.filename = filename;
	if (!autom8Worker(parser, getAutom8Command))
		return false;
	local newBytes = parser.newText.string.encode("utf-8");
	if (newBytes != oldBytes) {
		beforeWriteHook();
		if (!quiet)
			print("Updating file: ", repr filename);
		local backupFilename = fs.headof(filename) + "." + fs.tailof(filename) + ".old";
		fs.rename(filename, backupFilename);
		try {
			with (local fp = File.open(filename, "w"))
				fp.write(newBytes);
		} @[interrupt] catch (...) {
			try {
				fs.unlink(filename);
			} catch (...) {
			}
			fs.rename(backupFilename, filename);
			throw;
		}
		fs.unlink(backupFilename);
		return true;
	}
	return false;
}

@@File extensions that should get hashed by autom8
global final SHOULD_FORMAT_FILE_EXTENSIONS: {string...} = HashSet.Frozen({
	"h", "hh", "c", "inl", "dee", "sh", "S", "def", "ld", "sources",
	"ctest"
});

function autom8FileWithWildcard(filename: string) {
	import isFileGitIgnored from .gitignore;
	if ("*" !in filename)
		return autom8File(filename);
	local head = fs.headof(filename);
	if (filename.endswith("**")) {
		local tail = fs.tailof(filename);
		if (tail == "**") {
			for (local e: fs.dir(head)) {
				e = fs.joinpath(head, e);
				local st = fs.stat(e);
				if (st.isreg) {
					if (fs.extof(e) in SHOULD_FORMAT_FILE_EXTENSIONS && !isFileGitIgnored(e))
						autom8File(e);
				} else if (st.isdir) {
					autom8FileWithWildcard(e + "/**");
				}
			}
			return;
		}
	}
	for (local e: fs.query(filename)) {
		e = fs.joinpath(head, e);
		if (fs.stat.isreg(e)) {
			if (fs.extof(e) in SHOULD_FORMAT_FILE_EXTENSIONS && !isFileGitIgnored(e))
				autom8File(e);
		}
	}
}

#ifdef __MAIN__
function usage() {
	print("Usage: deemon autom8.dee [OPTIONS] [--] FILES...");
	print("Options:");
	print("\t-fl --flow-left      Reflow comments to the left");
	print("\t-fc --flow-center    Reflow comments to evenly spread out spaces (default)");
	print("\t--help               Show this help");
}

local argv = [...][1:];
while (argv && argv.first.startswith("-")) {
	local arg = argv.popfront();
	switch (arg) {

	case "-fl":
	case "--flow-left":
		OPT_UNDO_REFLOW = true;
		break;

	case "-fc":
	case "--flow-center":
		OPT_UNDO_REFLOW = false;
		break;

	case "--":
		goto done_args;

	case "--help":
		usage();
		break;

	default:
		usage();
		return 1;
	}
}
done_args:
if (!argv) {
	usage();
	return 1;
}
for (local x: argv)
	autom8FileWithWildcard(x);
#endif /* __MAIN__ */
