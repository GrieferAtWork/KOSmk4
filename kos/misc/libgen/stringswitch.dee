/* Copyright (c) 2019-2020 Griefer@Work                                       *
 *                                                                            *
 * This software is provided 'as-is', without any express or implied          *
 * warranty. In no event will the authors be held liable for any damages      *
 * arising from the use of this software.                                     *
 *                                                                            *
 * Permission is granted to anyone to use this software for any purpose,      *
 * including commercial applications, and to alter it and redistribute it     *
 * freely, subject to the following restrictions:                             *
 *                                                                            *
 * 1. The origin of this software must not be misrepresented; you must not    *
 *    claim that you wrote the original software. If you use this software    *
 *    in a product, an acknowledgement (see the following) in the product     *
 *    documentation is required:                                              *
 *    Portions Copyright (c) 2019-2020 Griefer@Work                           *
 * 2. Altered source versions must be plainly marked as such, and must not be *
 *    misrepresented as being the original software.                          *
 * 3. This notice may not be removed or altered from any source distribution. *
 */
import fs;
import util;
import * from deemon;

final global USE_SWITCH_THRESHOLD = 6;

function normalizeData(
		data: string | (string,) | (string, string | none)): (string,string) {
	if (data is string)
		return (data, "");
	if (#data == 1)
		return (data.first, "");
	local expr, cond = data...;
	if (cond is none)
		cond = "";
	return (expr, cond);
}

function getRequirementsForCases(
		cases: {string: string | (string,) | (string, string | none)}): string | none {
	local commonConditions = HashSet();
	for (local none, data: cases) {
		local none, cond = normalizeData(data)...;
		if (cond)
			commonConditions.insert(cond);
		else {
			return none;
		}
	}
	if (!commonConditions)
		return none;
	if (#commonConditions == 1)
		return commonConditions.first;
	return "({})".format({
		") || (".join(commonConditions.sorted())
	});
}

function fixExpression(expr: string, indent: string): string {
	return expr
		.unifylines()
		.strip()
		.replace("\n","\n" + indent);
}


@@Generate C code for branching to each element of @cases when
@@the string at `(char *)(strExpr + strOffset)' equals the
@@associated entry of @cases
@@Note that the strings passed in @cases should include a trailing
@@NUL-character if @strExpr is expected to represent a NUL-terminated
@@string.
@@@param cases: Mapping of (case_string: case_expr | (case_expr,) | (case_expr, case_cond)), where
@@              case_cond is a preprocessor expression that must be true
@@              for the case to be available, or an empty string or none
@@              if the case always exists.
function stringSwitch(
		strExpr: string,
		cases: {string: string | (string,) | (string, string | none)},
		defaultCase: string | none = none,
		indent: string = "\t", prefix: string = "", strOffset: int = 0,
		parentCommonCC: string | none = none) {
	if (cases !is Dict)
		cases = Dict(cases);
	if (!cases)
		return;
	if (#cases == 1) {
handle_single_case:
		local name, data = cases.first...;
		local expr, cond = normalizeData(data)...;
		assert expr is string;
		assert cond is string;
		if (cond && (parentCommonCC !is none && cond == parentCommonCC))
			cond = none;
		if (cond)
			print "#if",cond;
		if (name) {
			print indent,;
			print "if (",;
			for (local i, ch: util.enumerate(name)) {
				if (i) {
					print " &&",;
					if ((i % 3) == 0) {
						print;
						print indent,;
						print "    ",;
					} else {
						print " ",;
					}
				}
				print strExpr,;
				print "[",;
				print strOffset + i,;
				print "] == '",;
				print ch.encode("c-escape"),;
				print "'",;
			}
			print ") {";
			indent = indent + "\t";
		}
		print indent,;
		print "/* case",repr((prefix + name).rstrip("\0")) + ": ... */";
		print indent,;
		print fixExpression(expr, indent);
		if (name) {
			indent = indent[:-1];
			print indent,;
			if (defaultCase !is none) {
				if (cond) {
					print "} else";
					print "#endif /*",cond,"*/";
					print indent,;
					print "{";
				} else {
					print "} else {";
				}
				indent = indent + "\t";
				print indent,;
				print "/* default: ... */";
				print indent,;
				print fixExpression(defaultCase, indent);
				indent = indent[:-1];
				print indent,;
				print "}";
				return;
			} else {
				print "}";
			}
		}
		if (cond)
			print "#endif /*",cond,"*/";
		return;
	}
	local firstChars: {string: Dict} = Dict();
	for (local name, data: cases) {
		if (!name) {
			cases = { "" : data };
			goto handle_single_case;
		}
		local ch = name.first;
		local ch_cases = firstChars.get(ch);
		if (ch_cases is none)
			firstChars[ch] = ch_cases = Dict();
		ch_cases[name[1:]] = data;
		local none, cond = normalizeData(data)...;
	}
	assert firstChars;
	local firstCharsSorted = firstChars.keys.sorted();
	local isPrimaryCommonCC = false;
	if (parentCommonCC !is bound || parentCommonCC is none) {
		parentCommonCC = getRequirementsForCases(cases);
		if (parentCommonCC) {
			isPrimaryCommonCC = true;
			print "#if",parentCommonCC;
		}
	}
	if (#firstCharsSorted >= USE_SWITCH_THRESHOLD) {
		print indent,;
		print "switch (",;
		print strExpr,;
		print "[",;
		print strOffset + 0,;
		print "]) {";
		for (local ch: firstCharsSorted) {
			local ch_cases = firstChars[ch];
			assert ch_cases;
			print;
			local commonCC = getRequirementsForCases(ch_cases);
			if (commonCC)
				print "#if",commonCC;
			print indent,;
			print "case '",;
			print ch.encode("c-escape"),;
			print "':";
			stringSwitch(
				strExpr:        strExpr,
				cases:          ch_cases,
				defaultCase:    defaultCase,
				indent:         indent + "\t",
				prefix:         prefix + ch,
				strOffset:      strOffset + 1,
				parentCommonCC: commonCC ? commonCC : parentCommonCC);
			print indent,;
			print "\tbreak;";
			if (commonCC)
				print "#endif /*",commonCC,"*/";
		}
		if (defaultCase !is none) {
			print indent,;
			print "default:";
			indent = indent + "\t";
			print indent,;
			print "/* default: ... */";
			print indent,;
			print fixExpression(defaultCase, indent);
			print indent,;
			print "break;";
			indent = indent[:-1];
		} else {
			print indent,;
			print "default: break;";
		}
		print indent,;
		print "}";
	} else {
		local next_needs_indent = true;
		for (local i, ch: util.enumerate(firstCharsSorted)) {
			local is_last = i == #firstCharsSorted - 1;
			local ch_cases = firstChars[ch];
			assert ch_cases;
			local commonCC = getRequirementsForCases(ch_cases);
			if (commonCC)
				print "#if",commonCC;
			if (next_needs_indent) {
				print indent,;
				next_needs_indent = false;
			} else {
				print " ",;
			}
			print "if (",;
			print strExpr,;
			print "[",;
			print strOffset + 0,;
			print "] == '",;
			print ch.encode("c-escape"),;
			print "') {";
			stringSwitch(
				strExpr:        strExpr,
				cases:          ch_cases,
				defaultCase:    defaultCase,
				indent:         indent + "\t",
				prefix:         prefix + ch,
				strOffset:      strOffset + 1,
				parentCommonCC: commonCC ? commonCC : parentCommonCC);
			print indent,;
			print "}",;
			if (!is_last)
				print " else",;
			else if (defaultCase !is none) {
				if (commonCC) {
					print " else";
					print "#endif /*",commonCC,"*/";
					commonCC = none;
					print indent,;
					print "{";
				} else {
					print " else {";
				}
				indent = indent + "\t";
				print indent,;
				print "/* default: ... */";
				print fixExpression(defaultCase, indent);
				indent = indent[:-1];
				print indent,;
				print "}";
			} else {
				print;
			}
			if (commonCC) {
				if (!is_last)
					print;
				print "#endif /*",commonCC,"*/";
				next_needs_indent = true;
			}
		}
	}
	if (isPrimaryCommonCC)
		print "#endif /*",parentCommonCC,"*/";
}



















