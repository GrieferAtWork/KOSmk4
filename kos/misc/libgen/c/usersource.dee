/* Copyright (c) 2019-2021 Griefer@Work                                       *
 *                                                                            *
 * This software is provided 'as-is', without any express or implied          *
 * warranty. In no event will the authors be held liable for any damages      *
 * arising from the use of this software.                                     *
 *                                                                            *
 * Permission is granted to anyone to use this software for any purpose,      *
 * including commercial applications, and to alter it and redistribute it     *
 * freely, subject to the following restrictions:                             *
 *                                                                            *
 * 1. The origin of this software must not be misrepresented; you must not    *
 *    claim that you wrote the original software. If you use this software    *
 *    in a product, an acknowledgement (see the following) in the product     *
 *    documentation is required:                                              *
 *    Portions Copyright (c) 2019-2021 Griefer@Work                           *
 * 2. Altered source versions must be plainly marked as such, and must not be *
 *    misrepresented as being the original software.                          *
 * 3. This notice may not be removed or altered from any source distribution. *
 */

import * from deemon;
import * from errors;
import * from .cheaders;
import * from .writer;
import * from .escape;
import * from .ppexpr;
import .ppexpr;
import hash from hashlib;
import fs;

/* Helpers for generating and maintaining user-level source implementation files */


class UserSourceFunction {
	this = default;

	@@The actual library function
	public member func: LibraryFunction;

	@@The custom implementation body of the function (or @none if auto-generated)
	public member body: string | none;
}

class _UserSourceExportTable {}
global UserSourceExportTable = _UserSourceExportTable();

@@Set of all user-level library functions that have stub implementations
global stubUserFunctions: {LibraryFunction...} = HashSet();

@@Check if the given @body is that of a stub function
function isStubFunctionImplementation(body: string): bool {
	return "CRT_UNIMPLEMENTED" in body;
}


@@Check if the given function body is merely auto-generated
@@NOTE: Passing @none for @func means  that the actual function  is
@@      unknown, as may be the case after the function was deleted.
function isFunctionBodyGenerated(func: LibraryFunction | none, body: string): bool {
	return body.lstrip().startswith("/*AUTO*/");
}



@@Update a file such as `/kos/src/libc/user/string.c`
function updateUserImplementationSourceFile(
		filename: string, header: SystemHeader,
		printUpdateMessage: Callable with string = none,
		criticalSection: Object = none,
		HASH_FUNCTION: string = "CRC-32",
		ppAssume: PPAssume = none) {
	@@The layout of the user-source-file:
	@@  - UserSourceFunction: A function in the form of:
	@@    >> /*[[[head:libc_foo,hash:...]]]*/
	@@    >> INTERN void LIBCCALL libc_foo(void)
	@@    >> /*[[[body:libc_foo]]]*/
	@@    >> {
	@@    >> 	...
	@@    >> }
	@@    >> /*[[[end:libc_foo]]]*/
	@@  - _UserSourceExportTable: A placeholder for the exports table
	@@  - string: Some other string that is inserted between locations
	local userSourceLayout: {(UserSourceFunction | _UserSourceExportTable | string)...} = [];
	local skippedFunctionNames: {string...} = HashSet();
	printUpdateMessage("Printing: {!r}".format({ filename }));

	/* Gather the names of all user-source-functions that need to exist */
	local missingSourceFunctionsByName: {string: LibraryFunction} = Dict();
	for (local f: header.order_libcUserSource)
		missingSourceFunctionsByName[f.name] = f;
	local origText: string;
	local hasExportTable: bool = false;
	local final MAGIC_IMPL_IF_ENDIF = "#endif /* MAGIC:impl_if */\n";
	local final MAGIC_ALIAS_ENDIF = "#endif /* MAGIC:alias */\n";
	try {
		with (local fp = File.open(filename, "rb"))
			origText = fp.readall().decode("utf-8").unifylines();
		function errAt(offset: int, message: string) {
			local line = 1 + origText.count("\n", 0, offset);
			local startOfLine = origText.rfind("\n", 0, offset) + 1;
			local column = 1 + (offset - startOfLine);
			local emsg = "{}({},{}) : Error : {}"
				.format({ fs.abspath(filename), line, column, message });
			print emsg;
			throw Error(emsg);
		}
		local flushStart: int = 0;
		local i: int = 0;
		for (;;) {
			local tagStart = origText.find("/*[[[", i);
			if (tagStart < 0)
				break;
			if (tagStart && !origText.islf(tagStart - 1)) {
				i = tagStart + 5;
				continue;
			}
			local tagEnd = origText.find("]]]*/\n", tagStart + 5);
			if (tagEnd < 0)
				errAt(tagStart, "Tag never terminated");
			local tagBody = origText[tagStart+5:tagEnd];
			final local EXPORTS_TABLE_TAG = "start:exports,hash:";
			final local EXPORTS_TABLE_END = "\n/*[[[end:exports]]]*/\n";
			if (tagBody.startswith("head:")) {
				/* Actual function declaration */
				local functionName: string;
				local functionDeclHashMethod: string;
				local functionDeclHashValue: int;
				try {
					functionName, functionDeclHashMethod, functionDeclHashValue =
						tagBody.scanf("head:%[^,],hash:%[^=]=%[^]")...;
					functionDeclHashValue = int(functionDeclHashValue);
				} catch (Error as e) {
					errAt(tagStart, e.message);
				}
				local functionDeclStart = tagEnd + 6;
				local functionDeclEnd;
				local bodyMarker = "/*[[[body:{}]]]*/".format({ functionName });
				functionDeclEnd = origText.find(bodyMarker, functionDeclStart);
				if (functionDeclEnd < 0)
					errAt(tagStart, "Missing tag: {!r}".format({ bodyMarker }));
				local functionDecl = origText[functionDeclStart:functionDeclEnd];
				if (functionDeclHashMethod != "0") {
					local functionDeclHash: int;
					try {
						functionDeclHash = hash(functionDeclHashMethod, functionDecl);
					} catch (Error as e) {
						errAt(tagStart, e.message);
					}
					if (functionDeclHash != functionDeclHashValue && !functionDecl.isspace())
						errAt(functionDeclStart, "Declaration of function {!r} has an incorrect hash (expected {}, but is {})"
							.format({ functionName, functionDeclHashValue.hex(), functionDeclHash.hex() }));
				}
				local bodyStart = functionDeclEnd + #bodyMarker;
				local endMarker = "/*[[[end:{}]]]*/\n".format({ functionName });
				local bodyEnd = origText.find(endMarker, bodyStart);
				if (bodyEnd < 0)
					errAt(bodyStart, "Missing tag: {!r}".format({ bodyEnd }));
				if (flushStart < tagStart)
					userSourceLayout.append(origText[flushStart:tagStart]);
				local func = missingSourceFunctionsByName.pop(functionName, none);
				local bodyText: string = origText[bodyStart:bodyEnd];
				if (bodyText.endswith(MAGIC_ALIAS_ENDIF))
					bodyText = bodyText[:-#MAGIC_ALIAS_ENDIF];
				if (bodyText.endswith(MAGIC_IMPL_IF_ENDIF))
					bodyText = bodyText[:-#MAGIC_IMPL_IF_ENDIF];
				if (func is none) {
					/* Discard the function if its body is auto-generated */
					if (isFunctionBodyGenerated(none, bodyText)) {
						printUpdateMessage("Removing deleted function: {!r}"
							.format({ functionName }));
						goto discard_function_during_scan;
					}
					errAt(tagStart, "Unknown function {!r}".format({ functionName }));
				}
				/* Delete the body (thus forcing it to be re-generated)
				 * if   the   old  body   was   simply  auto-generated. */
				if (isFunctionBodyGenerated(func, bodyText))
					bodyText = none;
				userSourceLayout.append(
					UserSourceFunction(
						func: func,
						body: bodyText));
discard_function_during_scan:
				flushStart = i = bodyEnd + #endMarker;
			} else if (tagBody.startswith(EXPORTS_TABLE_TAG)) {
				if (hasExportTable)
					errAt(tagStart, "Duplicate export table");
				local hashText = tagBody[#EXPORTS_TABLE_TAG:];
				local hashMethod, hashValue;
				try {
					hashMethod, hashValue = hashText.scanf("%[^=]=%[^]")...;
					hashValue = int(hashValue);
				} catch (Error as e) {
					errAt(tagStart, e.message);
				}
				local exportsBodyStart = tagEnd + 6;
				local exportsBodyEnd = origText.find(
					EXPORTS_TABLE_END, exportsBodyStart - 1);
				if (exportsBodyEnd < 0)
					errAt(tagStart, "Export table not terminated");
				/* Verify the export table's hash */
				local exportTableText = origText[exportsBodyStart:exportsBodyEnd + 1];
				if (hashMethod != "0") {
					local exportTableHash;
					try {
						exportTableHash = hash(hashMethod, exportTableText);
					} catch (Error as e) {
						errAt(tagStart, e.message);
					}
					if (exportTableHash != hashValue && !exportTableText.isspace())
						errAt(exportsBodyStart, "Export table has an incorrect hash (expected {}, but is {})"
							.format({ hashValue.hex(), exportTableHash.hex() }));
				}
				if (flushStart < tagStart)
					userSourceLayout.append(origText[flushStart:tagStart]);
				hasExportTable = true;
				userSourceLayout.append(UserSourceExportTable);
				flushStart = i = exportsBodyEnd + #EXPORTS_TABLE_END;
			} else if (tagBody.startswith("skip:") || tagBody.startswith("impl:")) {
				/* skip: Assume that the function is implemented elsewhere, and don't
				 *       include its export listing as  part of the exports  section.
				 * impl: Same as skip, but still include exports of the function
				 *       within the exports section. */
				local isSkip = tagBody.startswith("skip:");
				local functionName = tagBody[5:];
				local func = missingSourceFunctionsByName.pop(functionName, none);
				if (func is none) {
					local isKnown = false;
					for (local f: header.order_libcUserSource) {
						if (f.name == functionName) {
							isKnown = true;
							break;
						}
					}
					errAt(tagStart, "{} function {!r}".format({
						isKnown ? "Duplicate" : "Unknown",
						functionName }));
				}
				if (isSkip)
					skippedFunctionNames.insert(functionName);
				i = tagEnd + 6;
			} else {
				i = tagEnd + 6;
			}
		}
		if (flushStart < #origText)
			userSourceLayout.append(origText[flushStart:]);
	} catch (FileNotFound) {
		origText = "";
	}
	if (!userSourceLayout) {
		/* Generate the initial file layout */
		local fp = File.Writer();
		local guardName = "GUARD_LIBC_USER_{}_C"
			.format({ header.name.replace(".", "_").replace("/", "_").upper() });
		fp << COPYRIGHT << "\n"
			"#ifndef " << guardName << "\n"
			"#define " << guardName << " 1\n"
			"\n"
			"#include \"../api.h\"\n"
			"/**/\n"
			"\n"
			"#include \"" << header.name << ".h\"\n"
			"\n"
			"DECL_BEGIN\n"
			"\n";
		userSourceLayout.append(fp.string);
		for (local f: header.order_libcUserSource) {
			userSourceLayout.append(UserSourceFunction(func: f, body: none));
			userSourceLayout.append("\n");
		}
		local fp = File.Writer();
		fp << "\n"
			"DECL_END\n"
			"\n"
			"#endif /* !" << guardName << " */\n";
		userSourceLayout.append(UserSourceExportTable);
		userSourceLayout.append(fp.string);
		missingSourceFunctionsByName = none;
		hasExportTable = true;
	}
	if (!hasExportTable) {
		/* Insert the export table just before a trailing "DECL_END" */
		local i = #userSourceLayout;
		for (;;) {
			local item;
			if (!i || ({ --i; item = userSourceLayout[i]; item !is string; }))
				throw Error("Unable to find suitable location for export table");
			local DECL_END_pos = item.rfind("\nDECL_END");
			if (DECL_END_pos < 0)
				continue;
			/* Split this item to inject the export table. */
			local before = userSourceLayout[:DECL_END_pos];
			local after = userSourceLayout[DECL_END_pos:];
			userSourceLayout.erase(i);
			userSourceLayout.insert(i, after);
			userSourceLayout.insert(i, UserSourceExportTable);
			if (before)
				userSourceLayout.insert(i, before);
			break;
		}
	}
	if (missingSourceFunctionsByName) {
		/* Insert missing functions.
		 * In an attempt to maintain implementation order with declaration order,
		 * try to inserted after/before other functions that are already present. */
		local prevPresentFunction: LibraryFunction | none = none;
		local it = header.order_libcUserSource.operator iter();
		foreach (local f: it) {
			if (f.name !in missingSourceFunctionsByName) {
				for (local e: userSourceLayout) {
					if (e is UserSourceFunction && e.func === f) {
						prevPresentFunction = f;
						break;
					}
				}
				continue;
			}
			if (prevPresentFunction is none) {
				/* Insert before the next function */
				local it2 = copy(it);
again_find_nextPresentFunction:
				local nextPresentFunction: LibraryFunction | none = none;
				foreach (local f2: it2) {
					if (f2.name in missingSourceFunctionsByName)
						continue;
					nextPresentFunction = f2;
					break;
				}
				if (nextPresentFunction is none) {
					/* No functions present at all.
					 * -> Insert the last function from @header.order_libcUserSource
					 *    just    before    the    @UserSourceExportTable    marker. */
					nextPresentFunction = header.order_libcUserSource.last;
					local i = #userSourceLayout - 1;
					while (userSourceLayout[i] !== UserSourceExportTable)
						--i;
					userSourceLayout.insert(i, "\n");
					userSourceLayout.insert(i, UserSourceFunction(
						func: nextPresentFunction, body: none));
				}
				/* Find where the next present function is at */
				local i = 0;
				for (;; ++i) {
					if (i >= #userSourceLayout)
						goto again_find_nextPresentFunction;
					local e = userSourceLayout[i];
					if (e is UserSourceFunction &&
					    e.func === nextPresentFunction)
						break;
				}
				/* Insert at userSourceLayout[i] */
				userSourceLayout.insert(i, "\n");
				userSourceLayout.insert(i, UserSourceFunction(
					func: f, body: none));
			} else {
				/* Find where @prevPresentFunction is at */
				local i = 0;
				for (;; ++i) {
					local e = userSourceLayout[i];
					if (e !is UserSourceFunction)
						continue;
					if (e.func !== prevPresentFunction)
						continue;
					break;
				}
				/* Insert at userSourceLayout[i + 1] */
				++i;
				/* Insert after the previous function */
				userSourceLayout.insert(i, UserSourceFunction(
					func: f, body: none));
				userSourceLayout.insert(i, "\n");
			}
			printUpdateMessage("Injecting missing function: {!r}"
				.format({ f.name }));
			prevPresentFunction = f;
		}
		missingSourceFunctionsByName = none;
	}

	local fp = File.Writer();
	/* Re-print the file's contents */
	for (local part: userSourceLayout) {
		if (part === UserSourceExportTable) {
			local expTab = File.Writer();
			local expTabCWriter = CWriter(expTab, ppAssume: ppAssume);
			header.cprintLibraryUserSourceExports(
				expTabCWriter, skippedFunctionNames);
			expTabCWriter.flush();
			expTab = expTab.string.lstrip("\n").rstrip();
			if (expTab)
				expTab += "\n";
			local expTabHash = hash(HASH_FUNCTION, expTab);
			fp << "/*[[[start:exports,hash:" << HASH_FUNCTION << "=" << expTabHash.hex() << "]]]*/\n"
				<< expTab
				<< "/*[[[end:exports]]]*/\n";
			continue;
		}
		if (part is UserSourceFunction) {
			local func: LibraryFunction = part.func;
			local funcCond = ppexpr.ppParse(escapeText(
					func.implementationPpCond, ESCAPE_MODE_NONE))
				.optimize(asBool: true, assume: ppAssume)
				.tostr();
			local bindings: {LibraryFunctionBinding...} = func.functionBindings;
			assert bindings, func.name;
			local implBinding: LibraryFunctionBinding = bindings.last;
			assert implBinding.functionBinding is FunctionImplementation, func.name;
			local headFp = File.Writer();
			if (funcCond != "1") {
				if (funcCond.startswith("defined(") && funcCond.endswith(")") &&
				    funcCond.findmatch("(", ")", 8) == #funcCond - 1)
					headFp << "#ifdef " << funcCond[8:-1];
				else if (funcCond.startswith("!defined(") && funcCond.endswith(")") &&
				         funcCond.findmatch("(", ")", 9) == #funcCond - 1)
					headFp << "#ifndef " << funcCond[9:-1];
				else {
					headFp << "#if " << funcCond;
				}
				headFp << "\n";
			}
			local isFirst = true;
			/* Deal with intern-alias bindings (*ugh* UGLY!!) */
			for (local b: bindings[:-1]) {
				assert b.functionBinding !is FunctionImplementation;
				local ppCond = ppexpr.ppParse(
					escapeText(b.ppCond, ESCAPE_MODE_NONE))
						.optimize(asBool: true, assume: ppAssume)
						.tostr();
				if (isFirst) {
					if (ppCond.startswith("defined(") && ppCond.endswith(")") &&
					    ppCond.findmatch("(", ")", 8) == #ppCond - 1)
						headFp << "#ifdef " << ppCond[8:-1];
					else if (ppCond.startswith("!defined(") && ppCond.endswith(")") &&
					         ppCond.findmatch("(", ")", 9) == #ppCond - 1)
						headFp << "#ifndef " << ppCond[9:-1];
					else {
						headFp << "#if " << ppCond;
					}
				} else {
					headFp << "#elif " << ppCond;
				}
				headFp << "\nDEFINE_INTERN_ALIAS(" << func.name << ", "
					<< str(b.functionBinding) << ");\n";
				isFirst = false;
			}
			if (!isFirst)
				headFp << "#else /* MAGIC:alias */\n";
			{
				local headWriter = CWriter(headFp, ppAssume: ppAssume);
				local doc = func.documentationString;
				if (doc)
					headWriter.printComment(doc);
				func.functionPrototype.cprintDeclarationWithoutTerminator(
					headWriter, ESCAPE_MODE_NONE,
					decl:                 "INTERN",
					exposedName:          func.name,
					injectedAttributes:   implBinding.implSection !is none
						? { "ATTR_SECTION({!r})".format({ implBinding.implSection }) }
						: none,
					breakAfterReturnType: true,
					oneArgumentPerLine:   true);
				headWriter.flush();
			}
			/* Figure out the body to use for the implementation */
			local usedBody = part.body;
			if (usedBody is none) {
				local bodyFp = File.Writer();
				bodyFp << "\n/*AUTO*/";
				escapeTextIntoFile(bodyFp, implBinding.functionBinding.body, ESCAPE_MODE_NONE);
				usedBody = bodyFp.string;
			}
			if (isStubFunctionImplementation(usedBody))
				stubUserFunctions.insert(func);
			/* Print the actual function */
			headFp = headFp.string.lstrip("\n").rstrip() + "\n";
			fp << "/*[[[head:" << func.name << ",hash:"
				<< HASH_FUNCTION << "="
				<< hash(HASH_FUNCTION, headFp).hex() << "]]]*/\n"
				<< headFp
				<< "/*[[[body:" << func.name << "]]]*/"
				<< usedBody;
			if (!usedBody.endswith("\n"))
				fp << "\n";
			if (!isFirst)
				fp << MAGIC_ALIAS_ENDIF;
			if (funcCond != "1")
				fp << MAGIC_IMPL_IF_ENDIF;
			fp << "/*[[[end:" << func.name << "]]]*/\n";
			continue;
		}
		fp << part;
	}
	fp = fp.string;
	/* Check if the new contents differ from origText */
	if (fp == origText)
		return; /* No change -> Nothing to do here! */
	if (!origText) {
		printUpdateMessage("Creating: {!r}".format({ filename }));
		with (criticalSection) {
			with (local newfp = File.open(filename, "wb"))
				newfp.write(fp.encode("utf-8"));
		}
		return;
	}
	/* If the content differ, then write the new contents back to the file. */
	printUpdateMessage("Updating: {!r}".format({ filename }));
	/* Use a temporary file to guaranty that deemon crashing  will
	 * not  cause a us  to end up lost  data, instead allowing the
	 * user to manually rename files in order to recover any data. */
	local tempFileFilename = "{}.{}.latest".format({ fs.headof(filename), fs.tailof(filename) });
	local oldFileFilename = "{}.{}.old.latest".format({ fs.headof(filename), fs.tailof(filename) });
	with (local newfp = File.open(tempFileFilename, "wb"))
		newfp.write(fp.encode("utf-8"));
	with (criticalSection) {
		fs.rename(filename, oldFileFilename);
		fs.rename(tempFileFilename, filename);
		fs.unlink(oldFileFilename);
	}
}
