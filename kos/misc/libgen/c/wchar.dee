/* Copyright (c) 2019-2024 Griefer@Work                                       *
 *                                                                            *
 * This software is provided 'as-is', without any express or implied          *
 * warranty. In no event will the authors be held liable for any damages      *
 * arising from the use of this software.                                     *
 *                                                                            *
 * Permission is granted to anyone to use this software for any purpose,      *
 * including commercial applications, and to alter it and redistribute it     *
 * freely, subject to the following restrictions:                             *
 *                                                                            *
 * 1. The origin of this software must not be misrepresented; you must not    *
 *    claim that you wrote the original software. If you use this software    *
 *    in a product, an acknowledgement (see the following) in the product     *
 *    documentation is required:                                              *
 *    Portions Copyright (c) 2019-2024 Griefer@Work                           *
 * 2. Altered source versions must be plainly marked as such, and must not be *
 *    misrepresented as being the original software.                          *
 * 3. This notice may not be removed or altered from any source distribution. *
 */

import * from deemon;
import * from .cheaders;
import * from .escape;
import * from .parser;
import * from .globals;
import * from .namespace;
import Function from .cheaders;

global WcharFunction;

@@Replacements for wchar-related keywords
global wcharReplacementEscapes: {string: (string, string)} = Dict({
	"wchar_t"               : ("char16_t", "char32_t"),
	"__wchar_t"             : ("__char16_t", "__char32_t"),
	"__WCHAR_TYPE__"        : ("__CHAR16_TYPE__", "__CHAR32_TYPE__"),
	"__SIZEOF_WCHAR_T__"    : ("2", "4"),
	"LIBCCALL"              : ("LIBDCALL", "LIBKCALL"),
	"__LIBCCALL"            : ("__LIBDCALL", "__LIBKCALL"),
	"VLIBCCALL"             : ("VLIBDCALL", "VLIBKCALL"),
	"__VLIBCCALL"           : ("__VLIBDCALL", "__VLIBKCALL"),
	"ATTR_LIBC_WPRINTF"     : ("ATTR_LIBC_C16PRINTF", "ATTR_LIBC_C32PRINTF"),
	"__ATTR_LIBC_WPRINTF"   : ("__ATTR_LIBC_C16PRINTF", "__ATTR_LIBC_C32PRINTF"),
	"ATTR_LIBC_WPRINTF_P"   : ("ATTR_LIBC_C16PRINTF_P", "ATTR_LIBC_C32PRINTF_P"),
	"__ATTR_LIBC_WPRINTF_P" : ("__ATTR_LIBC_C16PRINTF_P", "__ATTR_LIBC_C32PRINTF_P"),
	"ATTR_LIBC_WSCANF"      : ("ATTR_LIBC_C16SCANF", "ATTR_LIBC_C32SCANF"),
	"__ATTR_LIBC_WSCANF"    : ("__ATTR_LIBC_C16SCANF", "__ATTR_LIBC_C32SCANF"),
	"ATTR_LIBC_WCSFTIME"    : ("ATTR_LIBC_C16FTIME", "ATTR_LIBC_C32FTIME"),
	"__ATTR_LIBC_WCSFTIME"  : ("__ATTR_LIBC_C16FTIME", "__ATTR_LIBC_C32FTIME"),
});

@@Additional keywords-replacements used by in-library implementations of DOS variants
global dosReplacementEscapes: {string: string} = Dict({
	"EOK" : "0",
	"__libc_geterrno"    : "__libd_geterrno",
	"__libc_seterrno"    : "__libd_seterrno",
	"__libc_geterrno_or" : "__libd_geterrno_or",
	"libc_geterrno"      : "libd_geterrno",
	"libc_seterrno"      : "libd_seterrno",
	"libc_geterrno_or"   : "libd_geterrno_or",
});

@@Replacements for wchar-related headers
global wcharReplacementHeaders: {string: (string, string)} = Dict({
	"<bits/crt/wformat-printer.h>"   : ("<bits/crt/uformat-printer.h>",   "<bits/crt/uformat-printer.h>"),
	"<parts/wchar/format-printer.h>" : ("<parts/uchar/format-printer.h>", "<parts/uchar/format-printer.h>"),
	"<parts/wchar/process.h>"        : ("<parts/uchar/process.h>",        "<parts/uchar/process.h>"),
	"<parts/wchar/stdio.h>"          : ("<parts/uchar/stdio.h>",          "<parts/uchar/stdio.h>"),
	"<parts/wchar/unistd.h>"         : ("<parts/uchar/unistd.h>",         "<parts/uchar/unistd.h>"),
	"<parts/wchar/utime.h>"          : ("<parts/uchar/utime.h>",          "<parts/uchar/utime.h>"),
});

global final WCHAR_REPLACEMENT_CHAR16 = 0; /* Replace with char16 */
global final WCHAR_REPLACEMENT_CHAR32 = 1; /* Replace with char32 */
global final WCHAR_REPLACEMENT_WIDTH: (int, int) = { 16, 32 };
global final WCHAR_REPLACEMENT_SIZE:  (int, int) = { 2, 4 };
global final WCHAR_REPLACEMENT_STR:   (string, string) = { "u", "U" };
global final WCHAR_REPLACEMENT_CC:    (string, string) = { "LIBDCALL", "LIBKCALL" };
global final WCHAR_REPLACEMENT_VCC:   (string, string) = { "VLIBDCALL", "VLIBKCALL" };

@@Mapping of all wchar functions ever defined (by name)
@@Duplicate entries aren't allowed
global allWcharFunctionsByName: {string: WcharFunction} = Dict();

@@Mapping from "myfun" to "libd_myfun"
global allDosVariantsByName: {string: LibraryFunction} = Dict();


@@Replace a single, given @keyword with its wchar replacement
function replaceWcharTextKeyword(keyword: string, mode: int,
		forInLibraryImplementation: bool = false): string {
	/* Check for explicitly defined keyword replacements */
	local repl = wcharReplacementEscapes.get(keyword);
	if (repl !is none)
		return repl[mode];
	/* Check for references to other [[wchar]]-functions */
	repl = allWcharFunctionsByName.get(keyword);
	if (repl !is none) {
		/* Yes, this is a [[wchar]]-function! */
		repl = repl.wc_header_uchar[mode];
		if (repl !is none)
			return repl.name;
		repl = allWcharFunctionsByName[keyword];
		/* Complain if referencing a  [[wchar]] function function some  uchar
		 * variant, but no uchar variant exists for that referenced function. */
		throw Error(f"Missing %\{uchar{
			WCHAR_REPLACEMENT_WIDTH[mode]
		}\}-variant of [[wchar]] Function {repr repl.wc_func.name}");
	}
	if (keyword.startswith("$")) {
		if (#keyword >= 2 && keyword[1] != "$") {
			/* Replace without the leading "$" */
			local withoutDollar = keyword[1:];
			if (forInLibraryImplementation && mode == WCHAR_REPLACEMENT_CHAR16) {
				repl = dosReplacementEscapes.get(withoutDollar);
				if (repl !is none)
					return repl;
			}
			repl = replaceWcharTextKeyword(withoutDollar, mode, forInLibraryImplementation);
			if (repl !== withoutDollar)
				return "$" + repl;
		}
	}

	/* Fallback: No replacement exists for this keyword */
	return keyword;
}

@@Replace some given wide character @text according to @mode
@@NOTE: The  text   generated  by   this  function   is  _NOT_   _FINAL_!
@@      Whatever is returned by this function is still going to be passed
@@      through  @escapeTextIntoFile, at which point further replacements
@@      may still take place!
@@@param: mode:        Either @WCHAR_REPLACEMENT_CHAR16, or @WCHAR_REPLACEMENT_CHAR32
@@@param: keyOverride: An optional callback that may be used to override the replacement
@@                     for certain keywords.
@@                     When given, this callback is  invoked with every keyword, such  that
@@                     a non-@none return value becomes the replacement string, and a @none
@@                     return value causes normal replacement to be performed.
function replaceWcharText(
		text: string | CParser | UserString, mode: int,
		keyOverride: Callable with string = none,
		forInLibraryImplementation: bool = false): string | UserString {
	{
		/* Quick check: If @test is a single keyword, then we don't need a file writer and CParser */
		local usedText = text;
		if (usedText is UserString)
			usedText = usedText.text;
		if (usedText is string) {
			if (!usedText)
				return text; /* Special case: Empty string */
			/* Simple case: replace-single-keyword */
			if (usedText.issymbol()) {
				local result;
				if (keyOverride !is none) {
					result = keyOverride(usedText);
					if (result !is none)
						goto got_simple_result;
				}
				try {
					result = replaceWcharTextKeyword(usedText, mode, forInLibraryImplementation);
				} catch (Error as e) {
					if (text is UserString)
						text.err(e.message);
					throw;
				}
got_simple_result:
				if (result === usedText)
					result = text; /* Maintain the @UserString indirection if possible */
				return result;
			}
			/* Optimization for things such as "0", "1", etc...
			 * (very likely in case of preprocessor conditions) */
			if (usedText.isnumeric())
				return text;
		}
	}
	/* Expensive case: Must replace an entire text-block */
	local fp = File.Writer();
	local self = CParser(text);
	local flushStart = self.tokEnd;
	for (;;) {
		local tok = self.next();
		switch (tok) {

		case "":
			goto done;

		case "@":
			/* Deal with escaped keywords */
			do {
				tok = self.next();
			} while (tok !in ["", "@"]);
			continue;

		case "#":
			/* Check for header replacements */
			tok = self.next();
			if (tok in ["include", "include_next"]) {
				local headerStart = self.tokEnd;
				local headerEnd = self.text.find("\n", headerStart, self.end);
				if (headerEnd < 0)
					headerEnd = self.end;
				while (headerStart < headerEnd && self.text.isspace(headerStart))
					++headerStart;
				while (headerEnd > headerStart && self.text.isspace(headerEnd - 1))
					--headerEnd;
				self.tokEnd = headerEnd;
				local newHeaderName = wcharReplacementHeaders.get(
					self.text[headerStart:headerEnd].strip())[mode];
				if (newHeaderName is none)
					continue;
				if (flushStart < headerStart)
					fp << self.text[flushStart:headerStart];
				fp << newHeaderName;
				flushStart = headerEnd;
			}
			continue;

		case "__has_include":
		case "__has_include_next":
			tok = self.next();
			if (tok == "(") {
				self.next();
				local headerStart = self.tokStart;
				self.skipPair("(", ")");
				local headerEnd = self.tokStart;
				while (headerEnd > headerStart && self.text.isspace(headerEnd - 1))
					--headerEnd;
				local newHeaderName =
					wcharReplacementHeaders.get(
						self.text[headerStart:headerEnd])[mode];
				if (newHeaderName is none)
					continue;
				if (flushStart < headerStart)
					fp << self.text[flushStart:headerStart];
				fp << newHeaderName;
				flushStart = headerEnd;
			}
			continue;

		default:
			if (!tok.issymbol()) {
				if (tok.startswith('L"') || tok.startswith("L'")) {
					/* Wide-character string/char constant
					 * -> Convert to unicode character constant */
					if (flushStart < self.tokStart)
						fp << self.text[flushStart:self.tokStart];
					fp << WCHAR_REPLACEMENT_STR[mode];
					flushStart = self.tokStart + 1;
				}
				continue;
			}
			break;
		}
		local repl;
		if (keyOverride !is none) {
			repl = keyOverride(tok);
			if (repl !is none)
				goto got_repl;
		}
		try {
			repl = replaceWcharTextKeyword(tok, mode, forInLibraryImplementation);
		} catch (Error as e) {
			self.err(e.message);
		}
		/* Not replaced (NOTE: Use a same-object-check here, since
		 * @replaceWcharTextKeyword re-returns the given keyword if
		 * no replacement was performed, meaning that we don't actually
		 * have to compare the underlying strings (or rather:  string)) */
got_repl:
		if (repl === tok)
			continue;
		/* Insert the keyword replacement */
		if (flushStart < self.tokStart)
			fp << self.text[flushStart:self.tokStart];
		fp << repl;
		flushStart = self.tokEnd;
	}
done:
	if (flushStart < self.end)
		fp << self.text[flushStart:self.end];
	return fp.string;
}


function replaceWcharTextArray(
		textArray: {(string | CParser | UserString)...}, mode: int,
		keyOverride: Callable with string = none): {(string | UserString)...} {
	if (!textArray)
		return textArray;
	local result = [];
	local changed = false;
	for (local text: textArray) {
		local repl = replaceWcharText(text, mode, keyOverride);
		if (repl !== text)
			changed = true;
		result.append(repl);
	}
	if (!changed)
		return textArray;
	return result;
}

function replaceWcharCType(self: CType, mode: int): CType {
	local oldBefore = self.beforeName;
	local oldAfter  = self.afterName;
	local newBefore = replaceWcharText(oldBefore, mode);
	local newAfter  = replaceWcharText(oldAfter, mode);
	if (newBefore === oldBefore && newAfter === oldAfter)
		return self;
	return CType(beforeName: newBefore, afterName: newAfter);
}

function replaceWcharArgument(self: Argument, mode: int): Argument {
	local oldType = self.ctype;
	local newType = replaceWcharCType(oldType, mode);
	if (newType === oldType)
		return self;
	return Argument(name: self.name, protoTypeName: self.protoTypeName, ctype: newType);
}

@@Construct a new wchar-replaced prototype from @self
function replaceWcharPrototype(self: FunctionPrototype, mode: int): FunctionPrototype {
	local result = FunctionPrototype(
		attributes: replaceWcharTextArray(self.attributes, mode),
		nothrow:    replaceWcharText(self.nothrow, mode),
		cc:         replaceWcharText(self.cc, mode),
		returnType: replaceWcharCType(self.returnType, mode),
		declPrefix: replaceWcharTextArray(self.declPrefix, mode));
	local argv = [];
	for (local a: self.argv)
		argv.append(replaceWcharArgument(a, mode));
	result.argv = argv;
	if (self.ellipsisArgumentTypes !is none) {
		local tsp = [];
		for (local x: self.ellipsisArgumentTypes)
			tsp.append(replaceWcharCType(x, mode));
		result.ellipsisArgumentTypes = tsp;
	}
	return result;
}

@@Construct a new wchar-replaced prototype from @self
function replaceWcharPrototypes(
		self: {(string | UserString, {FunctionPrototype...})...},
		mode: int): {(string | UserString, {FunctionPrototype...})...} {
	local newPrototypes = [];
	for (local ppCond, protos: self) {
		local newProtos = [];
		for (local proto: protos)
			newProtos.append(replaceWcharPrototype(proto, mode));
		newPrototypes.append((replaceWcharText(ppCond, mode), newProtos));
	}
	return newPrototypes;
}

@@Similar to @replaceWcharPrototype, but only do a shallow  replacement,
@@such that the resulting prototype is only correct under the assumption
@@that      `sizeof(wchar_t)      ==       WCHAR_REPLACEMENT_SIZE[mode]`
@@In  practice, this  means that  only calling  conventions are replaced
function replaceWcharPrototypeShallow(self: FunctionPrototype, mode: int): FunctionPrototype {
	local result = copy self;
	result.cc = replaceWcharText(result.cc, mode);
	return result;
}

@@Similar to @replaceWcharPrototypes, but  only do a shallow  replacement,
@@such that the resulting prototypes are only correct under the assumption
@@that `sizeof(wchar_t) == WCHAR_REPLACEMENT_SIZE[mode]`
@@In practice, this means that only calling conventions are replaced
function replaceWcharPrototypesShallow(
		self: {(string | UserString, {FunctionPrototype...})...},
		mode: int): {(string | UserString, {FunctionPrototype...})...} {
	local newPrototypes = [];
	for (local ppCond, protos: self) {
		local newProtos = [];
		for (local proto: protos)
			newProtos.append(replaceWcharPrototypeShallow(proto, mode));
		newPrototypes.append((ppCond, newProtos));
	}
	return newPrototypes;
}

function replaceWcharFunctionImplementation(
		self: FunctionImplementation, mode: int,
		functionName: string | UserString,
		prototype: FunctionPrototype,
		forInLibraryImplementation: bool): FunctionImplementation {
	local oldFunctionName: string = str(self.name);
	local keyOverride = (keyword: string): string | none -> {
		/* Special handling: References to the function's own name
		 * must  be replaced with `functionName', rather than with
		 * the default uchar-replacement */
		if (keyword == oldFunctionName)
			return functionName;
		return none;
	};
	local result = FunctionImplementation(
		body: replaceWcharText(self.body, mode,
			keyOverride:                keyOverride,
			forInLibraryImplementation: forInLibraryImplementation),
		name:         functionName,
		implPrefix:   replaceWcharTextArray(self.implPrefix, mode, keyOverride: keyOverride));
#if 1 /* This must be used so-as to catch explicit dependencies in uchar-functions.
       * an example of this would be c16execl(), where the dependency on c16execv()
       * has to be declared explicitly, as it would not be detected automatically */
	local deps: {string: Function} = self.dependencyFunctions;
	if (deps) {
		local newDeps = Dict();
		for (local name, func: deps) {
			/* Try to see what happends if we were to replace `name' according
			 * to %[define_wchar_replacement(...)] rules. This must be done to
			 * deal with automatic dependencies who's keywords got transformed
			 * into the name of some other function. (s.a. `wmemcpy', which is
			 * replaced with `memcpyw' for uchar16, and `memcpyl' for uchar32) */
			local replacedName = str(replaceWcharText(
				name, mode, keyOverride: keyOverride));
			if (!replacedName.issymbol()) {
				/* Deal with the replacement containing multiple keywords.
				 * Handle this case  by checking if  the replacement  text
				 * ends with a keyword.
				 * This behavior goes hand-in-hand with stuff like:
				 * >> %[define_wchar_replacement(wmemcpy = "(char16_t *)memcpyw", "(char32_t *)memcpyl")]
				 * where the actual, new dependency is the last keyword of the
				 * provided such, i.e. "memcpyw" for "(char16_t *)memcpyw"
				 */
				local kwdStart = #replacedName;
				while (kwdStart && replacedName.issymcont(kwdStart - 1))
					--kwdStart;
				replacedName = replacedName[kwdStart:];
			}
			if (!replacedName)
				continue;
#if 1 /* Safety check to ensure that wchar-dependencies are replaced consistently */
			local wcs = allWcharFunctionsByName.get(replacedName);
			if (wcs !is none) {
				func = wcs.wc_header_uchar[mode];
				if (func is none) {
					throw Error(f"Missing %\{uchar{
						WCHAR_REPLACEMENT_WIDTH[mode]
					}\}-variant of [[wchar]] Function {repr func.name}");
				}
				newDeps[replacedName] = func;
				continue;
			}
#endif
			if (replacedName != name) {
				/* Dependency   was  converted  to  some  other  function.
				 * This can happen due to use of define_wchar_replacement.
				 * Simply handle this case by loading the new, overwritten
				 * dependency for our specific uchar-variant. */
				func = allFunctionsByName.get(replacedName);
				if (func is none)
					continue;
			} else if (forInLibraryImplementation && mode == WCHAR_REPLACEMENT_CHAR16) {
				/* Check if this dependency has a custom DOS variant. */
				local libFunc: LibraryFunction = allDosVariantsByName.get(name);
				if (libFunc !is none) {
					func = Function(
						name:                     name,
						internalName:             libFunc.name,
						originalSystemHeaderName: libFunc.originalSystemHeaderName,
//						bindings:                 [],
						documentation:            libFunc.documentation);
				}
			}
			newDeps[replacedName] = func;
		}
		result.dependencies = newDeps;
	}
#else
	result.dependencies = scanForNamesOfDependentFunctions(
		result.body, functionName, prototype, forcedDependencies,
		unforcedDependencies, noAutoDependencyScanning);
#endif
	return result;
}


class XcharImplementation {
	this = default;
	public member loaderImpl: none | Callable | LoaderFunctionImplementation;     /* Implementation */
	public member prototype: FunctionPrototype;                                   /* Primary prototype */
	public member prototypes: {(string | UserString, {FunctionPrototype...})...}; /* Extended prototypes */
}

class WcharFunction {
	this = default;

	/* Wchar implementation features */
	public member wc_func: Function; /* The underlying wchar function */
	public member wc_loaderImpl: none | Callable | LoaderFunctionImplementation; /* Implementations */
	public member wc_prototype: FunctionPrototype | Callable; /* Primary prototype */
	public member wc_prototypes: {(string | UserString, {FunctionPrototype...})...} | Callable; /* Extended prototypes */
	/* The associated %{uchar16} and %{uchar32} functions (if any) */
	public member wc_header_uchar: (Function, Function) = [none, none];
	public member wc_internal_uchar: (LibraryFunction, LibraryFunction);

	public property wcLoaderImpl: none | LoaderFunctionImplementation = {
		get(): none | LoaderFunctionImplementation {
			local result = wc_loaderImpl;
			if (result is Callable)
				result = wc_loaderImpl = result();
			return result;
		}
	}
	public property wcPrototype: FunctionPrototype = {
		get(): FunctionPrototype {
			local result = wc_prototype;
			if (result is Callable)
				result = wc_prototype = result();
			return result;
		}
	}
	public property wcPrototypes: {(string | UserString, {FunctionPrototype...})...} = {
		get(): {(string | UserString, {FunctionPrototype...})...} {
			local result = wc_prototypes;
			if (result is Callable)
				result = wc_prototypes = result();
			return result;
		}
	}

	private member m_cx_cache: {(string, int, bool): XcharImplementation} = Dict();
	@@Return an approriate X-char implementation for the given @functionName and @mode
	public function getXCharImplementation(
			functionName: string | UserString, mode: int,
			forInLibraryImplementation: bool): XcharImplementation {
		local key = (str(functionName), mode, forInLibraryImplementation);
		local result = m_cx_cache.get(key);
		if (result is none) {
			result = XcharImplementation();
			/* Convert prototypes */
			local wcPrototype = this.wcPrototype;
			local wcPrototypes = this.wcPrototypes;
			local wcLoaderImpl = this.wcLoaderImpl;
			result.prototype = replaceWcharPrototype(wcPrototype, mode);
			/* Optimization for the  likely case of  only a  single
			 * (aliasing) prototype being defined for the prototype
			 * listing */
			if (#wcPrototypes == 1) {
				local p0 = wcPrototypes[0];
				if (p0[0] == "1") {
					p0 = p0[1];
					if (#p0 == 1 && p0[0] === wcPrototype) {
						result.prototypes = { ("1", { result.prototype }) };
						goto got_result_prototypes;
					}
				}
			}
			result.prototypes = replaceWcharPrototypes(wcPrototypes, mode);
got_result_prototypes:
			result.loaderImpl = wcLoaderImpl is none ? none : LoaderFunctionImplementation(
				impl: replaceWcharFunctionImplementation(
					wcLoaderImpl.impl, mode, functionName,
					result.prototype, forInLibraryImplementation),
				ppCond:       replaceWcharText(wcLoaderImpl.ppCond, mode),
				ppCondPrefix: replaceWcharTextArray(wcLoaderImpl.ppCondPrefix, mode));
			m_cx_cache[key] = result;
		}
		return result;
	}

}
