/* Copyright (c) 2019-2025 Griefer@Work                                       *
 *                                                                            *
 * This software is provided 'as-is', without any express or implied          *
 * warranty. In no event will the authors be held liable for any damages      *
 * arising from the use of this software.                                     *
 *                                                                            *
 * Permission is granted to anyone to use this software for any purpose,      *
 * including commercial applications, and to alter it and redistribute it     *
 * freely, subject to the following restrictions:                             *
 *                                                                            *
 * 1. The origin of this software must not be misrepresented; you must not    *
 *    claim that you wrote the original software. If you use this software    *
 *    in a product, an acknowledgement (see the following) in the product     *
 *    documentation is required:                                              *
 *    Portions Copyright (c) 2019-2025 Griefer@Work                           *
 * 2. Altered source versions must be plainly marked as such, and must not be *
 *    misrepresented as being the original software.                          *
 * 3. This notice may not be removed or altered from any source distribution. *
 */

import util;
import * from deemon;
import * from .cheaders;
import * from .escape;
import * from .parser;
import * from .globals;
import * from .namespace;
import Function from .cheaders;

global Generator;
global generators;

@@Generators can  be used  to convert  implementations
@@and prototypes of one function into those of another
@@function. Examples include  str2wcs or  double2float
class Generator {
	this = default;

	@@Returns   the   default   name   of   the   base   function,   given   the
	@@name  of   the  function   who's   implementation  is   being   generated.
	@@> function getDefaultBaseFunctionName(name: string): string | none;
	@@If the name could not be deduced, the function should return @none instead
	public member getDefaultBaseFunctionName: Callable with string;

	@@Register the pairing of two functions
	@@This information may be used by the generator to improve generated code
	@@> function registerFunctionPairing(generatedFunctionName: string, baseFunctionName: string);
	public member registerFunctionPairing: Callable with (string, string) = none;

	@@Replace   text,  as   in  prototype  typenames,   or  the  body   of  a  function
	@@> function replaceText(text: string | CParser | UserString): string | UserString;
	public member replaceText: Callable with (string | CParser | UserString);

	@@Same  as  @replaceText,  but  is  optional  and  used  to  convert  documentation  strings
	@@> function replaceDocumentation(text: string | CParser | UserString): string | UserString;
	public member replaceDocumentation: Callable with (string | CParser | UserString) = none;

	@@An optional callback to provide a @LoaderFunctionImplementation
	@@for the given base-funciton. Not providing this callback is the
	@@same as implementing it as follows:
	@@>>function generateLoaderFunctionImplementation(
	@@>>		baseFunction:             Function,
	@@>>		newFunctionName:          string,
	@@>>		prototype:                FunctionPrototype | Callable,
	@@>>		baseLocalFunction:        LocalFunction | none,
	@@>>		forcedDependencies:       {string...},
	@@>>		unforcedDependencies:     {string...},
	@@>>		noAutoDependencyScanning: bool)
	@@>>	: LoaderFunctionImplementation | none
	@@>>{
	@@>>	if (baseLocalFunction is none)
	@@>>		return none;
	@@>>	return LoaderFunctionImplementation(
	@@>>		ppCond:       this.replaceText(baseLocalFunction.ppCond),
	@@>>		ppCondPrefix: this.replaceTextArray(baseLocalFunction.ppCondPrefix),
	@@>>		impl:         this.replaceFunctionImplementation(
	@@>>			baseLocalFunction.functionImpl, newFunctionName, prototype,
	@@>>			forcedDependencies:       forcedDependencies,
	@@>>			unforcedDependencies:     unforcedDependencies,
	@@>>			noAutoDependencyScanning: noAutoDependencyScanning));
	@@>>}
	public member generateLoaderFunctionImplementation: Callable with (
			/* baseFunction:             */ Function,
			/* newFunctionName:          */ string,
			/* prototype:                */ FunctionPrototype | Callable,
			/* baseLocalFunction:        */ LocalFunction | none,
			/* forcedDependencies:       */ {string...},
			/* unforcedDependencies:     */ {string...},
			/* noAutoDependencyScanning: */ bool)
		/* : LoaderFunctionImplementation | none */
		= none;

	public function replaceTextArray(strings: {string...}): {string...} {
		if (!strings)
			return strings;
		local result = [];
		local changed = false;
		for (local s: strings) {
			local repl = replaceText(s);
			if (repl !== s)
				changed = true;
			result.append(repl);
		}
		if (!changed)
			return strings;
		return result;
	}

	public function replaceCType(
			self: CType): CType {
		local newBeforeName = replaceText(self.beforeName);
		local newAfterName = replaceText(self.afterName);
		if (newBeforeName === self.beforeName &&
		    newAfterName === self.afterName)
			return self;
		return CType(
			beforeName: newBeforeName,
			afterName:  newAfterName);
	}

	public function replaceArgument(self: Argument): Argument {
		local newName          = replaceText(self.name);
		local newProtoTypeName = replaceText(self.protoTypeName);
		local newCtype         = replaceCType(self.ctype);
		if (newName === self.name &&
		    newProtoTypeName === self.protoTypeName &&
		    newCtype === self.ctype)
			return self;
		return Argument(
			name:          newName,
			protoTypeName: newProtoTypeName,
			ctype:         newCtype);
	}

	public function replaceCTypeList(
			self: {CType...}): {CType...} {
		local changed = false;
		local result = [];
		for (local ct: self) {
			local repl = replaceCType(ct);
			if (repl !== ct)
				changed = true;
			result.append(repl);
		}
		if (!changed)
			return self;
		return result;
	}

	public function replaceArgumentList(self: {Argument...}): {Argument...} {
		local changed = false;
		local result = [];
		for (local a: self) {
			local repl = replaceArgument(a);
			if (repl !== a)
				changed = true;
			result.append(repl);
		}
		if (!changed)
			return self;
		return result;
	}

	public function replaceFunctionPrototype(
			self: FunctionPrototype): FunctionPrototype {
		local newAttributes            = replaceTextArray(self.attributes);
		local newNothrow               = replaceText(self.nothrow);
		local newCc                    = replaceText(self.cc);
		local newReturnType            = replaceCType(self.returnType);
		local newArgv                  = replaceArgumentList(self.argv);
		local newEllipsisArgumentTypes = replaceCTypeList(self.ellipsisArgumentTypes);
		local newDeclPrefix            = replaceTextArray(self.declPrefix);
		if (newAttributes === self.attributes && newNothrow === self.nothrow &&
		    newCc === self.cc && newReturnType === self.returnType &&
		    newArgv === self.argv &&
		    newEllipsisArgumentTypes === self.ellipsisArgumentTypes &&
		    newDeclPrefix === self.declPrefix)
			return self;
		return FunctionPrototype(
			attributes:            newAttributes,
			nothrow:               newNothrow,
			cc:                    newCc,
			returnType:            newReturnType,
			argv:                  newArgv,
			ellipsisArgumentTypes: newEllipsisArgumentTypes,
			declPrefix:            newDeclPrefix);
	}

	public function replaceFunctionImplementation(
			self: FunctionImplementation,
			newFunctionName: string,
			prototype: FunctionPrototype | Callable,
			forcedDependencies: {string...} = none,
			unforcedDependencies: {string...} = none,
			noAutoDependencyScanning: bool = false): FunctionImplementation {
		local result = FunctionImplementation(
			body:         replaceText(self.body),
			name:         newFunctionName,
			implPrefix:   replaceTextArray(self.implPrefix));
		/* Scan for dependencies */
		result.dependencies = scanForNamesOfDependentFunctions(
			result.body, newFunctionName, prototype,
			forcedDependencies:       forcedDependencies,
			unforcedDependencies:     unforcedDependencies,
			noAutoDependencyScanning: noAutoDependencyScanning);
		return result;
	}

}


@@Replacements for str2wcs-related keywords
global str2wcsReplacementEscapes: {string: string} = Dict({
	"char"                 : "wchar_t",
	"__SIZEOF_CHAR__"      : "__SIZEOF_WCHAR_T__",
	"ATTR_LIBC_PRINTF"     : "ATTR_LIBC_WPRINTF",
	"__ATTR_LIBC_PRINTF"   : "__ATTR_LIBC_WPRINTF",
	"ATTR_LIBC_PRINTF_P"   : "ATTR_LIBC_WPRINTF_P",
	"__ATTR_LIBC_PRINTF_P" : "__ATTR_LIBC_WPRINTF_P",
	"ATTR_LIBC_SCANF"      : "ATTR_LIBC_WSCANF",
	"__ATTR_LIBC_SCANF"    : "__ATTR_LIBC_WSCANF",
	"ATTR_LIBC_STRFTIME"   : "ATTR_LIBC_WCSFTIME",
	"__ATTR_LIBC_STRFTIME" : "__ATTR_LIBC_WCSFTIME",
});

@@Replacement-headers in str2wcs functions
global str2wcsHeaderReplacementEscapes: {string: string} = Dict();

@@str2wcs will convert all keywords starting with @"str" with @"wcs"
@@This is  a  list  of  keywords that  aren't  replaced  like  that.
global str2wcsNotFunctionNameKeywords: {string...} = {
	"string", "stringp", "stretch", "str", "struct"
};


function str2wcs_getDefaultBaseFunctionName(name: string): string | none {
	if (name.startswith("wcs"))
		return "str" + name[3:];
	return none;
}

function str2wcs_registerFunctionPairing(
		generatedFunctionName: string, baseFunctionName: string) {
	str2wcsReplacementEscapes.setnew(baseFunctionName, generatedFunctionName);
}

function str2wcs_replaceWord(
		word: string | UserString): string | UserString {
	/* Check for explicit replacements */
	local usedWord = str word;
	local result = str2wcsReplacementEscapes.get(usedWord);
	if (result !is none)
		return result;
	/* Deal with automatic function-name replacements. */
	if (usedWord.startswith("str") && usedWord !in str2wcsNotFunctionNameKeywords)
		return "wcs" + usedWord[3:];
	if (usedWord.startswith("__CRT_HAVE_")) {
		local substr = usedWord[11:];
		result = str2wcs_replaceWord(substr);
		if (result !== substr)
			return "__CRT_HAVE_" + result;
	}
	return word;
}

function str2wcs_replaceText(
		text: string | CParser | UserString): string | UserString {
	{
		/* Quick check: Singular keyword */
		local usedText = text;
		if (usedText is UserString)
			usedText = usedText.text;
		if (usedText is string) {
			if (!usedText)
				return text; /* Special case: Empty string */
			/* Simple case: replace-single-keyword */
			if (usedText.issymbol())
				return str2wcs_replaceWord(text);
			/* Optimization for things such as "0", "1", etc...
			 * (very likely in case of preprocessor conditions) */
			if (usedText.isnumeric())
				return text;
		}
	}
	local fp = File.Writer();
	local self = CParser(text);
	local flushStart = self.tokEnd;
	for (;;) {
		local tok = self.next();
		switch (tok) {

		case "":
			goto done;

		case "#":
			/* Check for header replacements */
			tok = self.next();
			if (tok in ["include", "include_next"]) {
				local headerStart = self.tokEnd;
				local headerEnd = self.text.find("\n", headerStart, self.end);
				if (headerEnd < 0)
					headerEnd = self.end;
				while (headerStart < headerEnd && self.text.isspace(headerStart))
					++headerStart;
				while (headerEnd > headerStart && self.text.isspace(headerEnd - 1))
					--headerEnd;
				self.tokEnd = headerEnd;
				local newHeaderName = str2wcsHeaderReplacementEscapes.get(
					self.text[headerStart:headerEnd].strip());
				if (newHeaderName is none)
					continue;
				if (flushStart < headerStart)
					fp << self.text[flushStart:headerStart];
				fp << newHeaderName;
				flushStart = headerEnd;
			}
			continue;

		case "__has_include":
		case "__has_include_next":
			tok = self.next();
			if (tok == "(") {
				self.next();
				local headerStart = self.tokStart;
				self.skipPair("(", ")");
				local headerEnd = self.tokStart;
				while (headerEnd > headerStart && self.text.isspace(headerEnd - 1))
					--headerEnd;
				local newHeaderName =
					str2wcsHeaderReplacementEscapes.get(
						self.text[headerStart:headerEnd]);
				if (newHeaderName is none)
					continue;
				if (flushStart < headerStart)
					fp << self.text[flushStart:headerStart];
				fp << newHeaderName;
				flushStart = headerEnd;
			}
			continue;

		case "@":
			do {
				tok = self.next();
			} while (tok !in ["", "@"]);
			continue;

		default:
			break;
		}
		if (!tok.issymbol())
			continue;
		if (tok in ["signed", "unsigned"]) {
			/* Special case: Must not blindly replace "char" after "signed" or "unsigned"
			 * Instead,   replace   `[un]signed char'   with   `wchar_t'   as   a  whole! */
			local suStart = self.tokStart;
			tok = self.next();
			if (tok != "char")
				continue;
			if (flushStart < suStart)
				fp << self.text[flushStart:suStart];
			fp << "wchar_t";
			flushStart = self.tokEnd;
			continue;
		}
		local repl = str2wcs_replaceWord(tok);
		if (repl === tok)
			continue;
		/* Insert the keyword replacement */
		if (flushStart < self.tokStart)
			fp << self.text[flushStart:self.tokStart];
		fp << repl;
		flushStart = self.tokEnd;
	}
done:
	if (flushStart < self.end) {
		if (flushStart == 0)
			return text;
		fp << self.text[flushStart:self.end];
	}
	return fp.string;
}




@@Replacements for double2float and double2ldouble-related keywords
global mathReplacementEscapes: {string: (string, string)} = Dict({
	"double" : ("float", "__LONGDOUBLE"),
});
global final MATH_REPLACEMENT_NAMES: (string, string) = { "float", "ldouble" };
global final MATH_REPLACEMENT_SUFFIX: (string, string) = { "f", "L" };
global final MATH_REPLACEMENT_MODE_FLOAT: int = 0;
global final MATH_REPLACEMENT_MODE_LDBL:  int = 1;

@@@param: mode: Either @MATH_REPLACEMENT_MODE_FLOAT, or @MATH_REPLACEMENT_MODE_LDBL
function math_replaceWord(
		word: string | UserString,
		mode: int): string | UserString {
	/* Check for explicit replacements */
	local usedWord = str word;
	local result = mathReplacementEscapes.get(usedWord);
	if (result !is none)
		return result[mode];
	if (usedWord.startswith("__CRT_HAVE_")) {
		local substr = usedWord[11:];
		result = math_replaceWord(substr, mode);
		if (result !== substr)
			return "__CRT_HAVE_" + result;
	}
	return word;
}

@@@param: mode: Either @MATH_REPLACEMENT_MODE_FLOAT, or @MATH_REPLACEMENT_MODE_LDBL
function math_replaceText(
		text: string | CParser | UserString,
		mode: int): string | UserString {
	{
		/* Quick check: Singular keyword */
		local usedText = text;
		if (usedText is UserString)
			usedText = usedText.text;
		if (usedText is string) {
			if (!usedText)
				return text; /* Special case: Empty string */
			/* Simple case: replace-single-keyword */
			if (usedText.issymbol())
				return math_replaceWord(text, mode);
			/* Optimization for things such as "0", "1", etc...
			 * (very likely in case of preprocessor conditions) */
			if (usedText.isnumeric())
				return text;
		}
	}
	local fp = File.Writer();
	local self = CParser(text);
	local flushStart = self.tokEnd;
	for (;;) {
		local repl;
		local tok = self.next();
do_handle_tok:
		switch (tok) {

		case "":
			goto done;

		case "@":
			do {
				tok = self.next();
			} while (tok !in ["", "@"]);
			continue;

		case "#":
			tok = self.next();
			if (tok in ["include", "include_next"]) {
				/* Don't replace text within #include directives! */
				local headerEnd = self.text.find("\n", self.tokEnd, self.end);
				if (headerEnd < 0)
					headerEnd = self.end;
				self.tokEnd = headerEnd;
			}
			continue;

		case "double":
			if (mode != MATH_REPLACEMENT_MODE_LDBL)
				break;
			if (flushStart < self.tokStart)
				fp << self.text[flushStart:self.tokStart];
			flushStart = self.tokEnd;
			tok = self.next();
			if (tok != "_Complex") {
				fp << math_replaceWord("double", mode);
				goto do_handle_tok;
			} else {
				flushStart = self.tokEnd;
				fp << "long double _Complex";
				continue;
			}
			break;

		case "__MAGIC_FLOAT_TYPE_IS_DOUBLE":
			repl = "0";
			goto do_insert_repl;

		case "__MAGIC_FLOAT_TYPE_IS_FLOAT":
			repl = { MATH_REPLACEMENT_MODE_FLOAT: "1", MATH_REPLACEMENT_MODE_LDBL: "0" }[mode];
			goto do_insert_repl;

		case "__MAGIC_FLOAT_TYPE_IS_LONG_DOUBLE":
			repl = { MATH_REPLACEMENT_MODE_FLOAT: "0", MATH_REPLACEMENT_MODE_LDBL: "1" }[mode];
			goto do_insert_repl;

		default:
			if (!tok.issymbol()) {
				if ("." in tok && tok.isnumeric(0)) {
					if (!tok.endswith("f") && !tok.endswith("L")) {
						repl = tok + MATH_REPLACEMENT_SUFFIX[mode];
						goto do_insert_repl;
					}
				}
				continue;
			}
			break;
		}
		repl = math_replaceWord(tok, mode);
		if (repl === tok)
			continue;
		/* Insert the keyword replacement */
do_insert_repl:
		if (flushStart < self.tokStart)
			fp << self.text[flushStart:self.tokStart];
		fp << repl;
		flushStart = self.tokEnd;
	}
done:
	if (flushStart < self.end) {
		if (flushStart == 0)
			return text;
		fp << self.text[flushStart:self.end];
	}
	return fp.string;
}

function double2float_replaceText(
		text: string | CParser | UserString): string | UserString {
	return math_replaceText(text, MATH_REPLACEMENT_MODE_FLOAT);
}

function double2ldouble_replaceText(
		text: string | CParser | UserString): string | UserString {
	return math_replaceText(text, MATH_REPLACEMENT_MODE_LDBL);
}

@@@param: mode: Either @MATH_REPLACEMENT_MODE_FLOAT, or @MATH_REPLACEMENT_MODE_LDBL
function math_defineReplacement(
		keyword: string, repl: string, mode: int) {
	for (;;) {
		local existing = mathReplacementEscapes.get(keyword);
		if (existing !is none) {
			local oldDef = existing[mode];
			if (oldDef !is none) {
				if (oldDef != repl) {
err_redef:
					throw Error(
						f"%[define_double2{MATH_REPLACEMENT_NAMES[mode]}_replacement]: "
						f"Re-definition of {repr keyword} as {repr repl} (was: {repr oldDef})"
					);
				}
				return;
			}
		}
		local newDef = mode == MATH_REPLACEMENT_MODE_FLOAT
			? (repl, existing[1])
			: (existing[0], repl);
		if (existing is none) {
			if (!mathReplacementEscapes.setnew(keyword, newDef))
				continue;
		} else {
			local ok, realExisting = mathReplacementEscapes
				.setold_ex(keyword, newDef)...;
			if (!ok)
				continue;
			if (existing != realExisting) {
				existing = realExisting;
				goto err_redef;
			}
		}
		break;
	}
}

function double2float_defineReplacement(repl: string, keyword: string) {
	return math_defineReplacement(keyword, repl, MATH_REPLACEMENT_MODE_FLOAT);
}
function double2ldouble_defineReplacement(repl: string, keyword: string) {
	return math_defineReplacement(keyword, repl, MATH_REPLACEMENT_MODE_LDBL);
}
function double2float_getDefaultBaseFunctionName(name: string): string {
	if (name.endswith("f"))
		return name[:-1];
	return none;
}
function double2ldouble_getDefaultBaseFunctionName(name: string): string {
	if (name.endswith("l"))
		return name[:-1];
	return none;
}

global MATH_GENERATORS: (Generator, Generator);

function math_constructCallToBaseExpression(
		mode: int, prototype: FunctionPrototype,
		basePrototype: FunctionPrototype,
		baseFunctionName: string): string {
	File.Writer fp;
	if (!prototype.returnType.isVoid) {
		fp << "return ";
		if (!basePrototype.returnType.implicitlyConvertibleTo(prototype.returnType))
			prototype.returnType.cprintCCastPrefixForGenerator(fp);
	}
	fp << baseFunctionName << "(";
	local bsArgc = #basePrototype.argv;
	local myArgc = #prototype.argv;
	local isFirst = true;
	for (local i: [:bsArgc]) {
		if (!isFirst)
			fp << ", ";
		isFirst = false;
		if (i > myArgc) {
			fp << "0";
			continue;
		}
		local bsArg = basePrototype.argv[i];
		local myArg = prototype.argv[i];
		if (!myArg.ctype.implicitlyConvertibleTo(bsArg.ctype))
			bsArg.ctype.cprintCCastPrefixForGenerator(fp);
		fp << myArg.name;
	}
	fp << ")";
	return fp.string;
}


@@@param: mode: Either @MATH_REPLACEMENT_MODE_FLOAT, or @MATH_REPLACEMENT_MODE_LDBL
function math_generateLoaderFunctionImplementation(
		mode:                     int,
		baseFunction:             Function,
		newFunctionName:          string,
		prototype:                FunctionPrototype | Callable,
		baseLocalFunction:        LocalFunction | none,
		forcedDependencies:       {string...},
		unforcedDependencies:     {string...},
		noAutoDependencyScanning: bool)
	: LoaderFunctionImplementation | none
{
	/* Math function generators are somewhat  special, in that they can  ~magically~
	 * create implementations where previously there were none. Though in actuality,
	 * there's really nothing special about it:
	 * >> acosl(*) %{generate(double2ldouble("acos"))}
	 * Same as:
	 *
	 * if (baseLocalFunction !is none) {
	 *     if (<CONVERTED_REQUIRES_OF:acos> == "1") {
	 *         >> __LONGDOUBLE acosl(__LONGDOUBLE x) {
	 *         >> <CONVERTED_BODY_OF:acos>
	 *         >> }
	 *     } else {
	 *         >> [[dependency(acos)]]
	 *         >> [[requires(<CONVERTED_REQUIRES_OF:acos> || $has_function(acos))]]
	 *         >> __LONGDOUBLE acosl(__LONGDOUBLE x) {
	 *         >> @@pp_if <CONVERTED_REQUIRES_OF:acos>@@
	 *         >> <CONVERTED_BODY_OF:acos>
	 *         >> @@pp_else@@
	 *         >>      return (__LONGDOUBLE)acos((double)x);
	 *         >> @@pp_endif@@
	 *         >> }
	 *     }
	 * } else {
	 *     >> [[dependency(acos)]]
	 *     >> [[requires($has_function(acos))]]
	 *     >> __LONGDOUBLE acosl(__LONGDOUBLE x) {
	 *     >>      return (__LONGDOUBLE)acos((double)x);
	 *     >> }
	 * }
	 */
	local gen = MATH_GENERATORS[mode];
	if (baseLocalFunction !is none) {
		local baseLocalFunctionImplementation: FunctionImplementation = baseLocalFunction.functionImpl;
		local convertedPpCond = str(math_replaceText(baseLocalFunction.ppCond, mode));
		if (convertedPpCond == "1") {
			/* Simply copy the base function 1-on-1 */
			local impl = gen.replaceFunctionImplementation(
				baseLocalFunctionImplementation, newFunctionName, prototype,
				forcedDependencies:       forcedDependencies,
				unforcedDependencies:     unforcedDependencies,
				noAutoDependencyScanning: noAutoDependencyScanning);
			return LoaderFunctionImplementation(impl: impl);
		}
		/* Wrap the underlying function's implementation */
		local convertedBody = str(math_replaceText(
			baseLocalFunctionImplementation.body, mode));
		for (;;) {
			convertedBody = convertedBody.strip();
			if (convertedBody.startswith("{") && convertedBody.endswith("}") &&
			    convertedBody.findmatch("{", "}", 1) == #convertedBody-1) {
				convertedBody = convertedBody[1:-1];
				continue;
			}
			break;
		}
		if (prototype is Callable)
			prototype = prototype();
		local result = FunctionImplementation(
			body: f"\{\n"
				f"@@pp_if {convertedPpCond}@@\n"
				f"	{convertedBody}\n"
				f"@@pp_else@@\n"
				f"	{math_constructCallToBaseExpression(
						mode, prototype, baseLocalFunction.functionPrototype,
						baseLocalFunction.name)};\n"
				f"@@pp_endif@@\n"
				f"\}",
			name:       newFunctionName,
			implPrefix: gen.replaceTextArray(baseLocalFunctionImplementation.implPrefix));
		/* Scan for dependencies within @convertedBody */
		local resultDependencies: {string: Function};
		resultDependencies = Dict(scanForNamesOfDependentFunctions(
			convertedBody, newFunctionName, prototype,
			forcedDependencies:       forcedDependencies,
			unforcedDependencies:     unforcedDependencies,
			noAutoDependencyScanning: noAutoDependencyScanning)());
		/* Also force a dependency on the actual base function (since
		 * that  one's  getting  invoked from  the  `callBase` part!) */
		resultDependencies[baseLocalFunction.name] = baseFunction;
		result.dependencies = resultDependencies;
		return LoaderFunctionImplementation(
			impl:         result,
			/* Include mention of the call-to-base variant in implementation's requires */
			ppCond:       f"{convertedPpCond} || $has_function({baseFunction.name})",
			ppCondPrefix: gen.replaceTextArray(baseLocalFunction.ppCondPrefix));
	} else {
		/* Simply generate a call to the base-function:
		 * >> [[dependency(acos)]]
		 * >> [[requires($has_function(acos))]]
		 * >> __LONGDOUBLE acosl(__LONGDOUBLE x) {
		 * >>      return (__LONGDOUBLE)acos((double)x);
		 * >> } */
		local baseName: string = baseFunction.name;
		local basePrototype: FunctionPrototype = baseFunction.onlyPrototype;
		if (basePrototype is none) {
			throw Error(
				f"Cannot generate math implementation for {repr newFunctionName}: "
				f"Base function {repr baseName} has no local variant, and is exposed "
				f"through multiple prototypes"
			);
		}
		if (prototype is Callable)
			prototype = prototype();
		return LoaderFunctionImplementation(
			impl:   FunctionImplementation(
				body: f"\{\n"
					f"	{math_constructCallToBaseExpression(
							mode, prototype, basePrototype, baseName)};\n"
					f"\}",
				name:         newFunctionName,
				dependencies: { baseName : baseFunction }),
			ppCond: f"$has_function({baseFunction.name})"
		);
	}
}

function double2float_generateLoaderFunctionImplementation(
		baseFunction:             Function,
		newFunctionName:          string,
		prototype:                FunctionPrototype | Callable,
		baseLocalFunction:        LocalFunction | none,
		forcedDependencies:       {string...},
		unforcedDependencies:     {string...},
		noAutoDependencyScanning: bool)
	: LoaderFunctionImplementation | none
{
	return math_generateLoaderFunctionImplementation(
		MATH_REPLACEMENT_MODE_FLOAT, baseFunction,
		newFunctionName, prototype, baseLocalFunction,
		forcedDependencies, unforcedDependencies,
		noAutoDependencyScanning);
}

function double2ldouble_generateLoaderFunctionImplementation(
		baseFunction:             Function,
		newFunctionName:          string,
		prototype:                FunctionPrototype | Callable,
		baseLocalFunction:        LocalFunction | none,
		forcedDependencies:       {string...},
		unforcedDependencies:     {string...},
		noAutoDependencyScanning: bool)
	: LoaderFunctionImplementation | none
{
	return math_generateLoaderFunctionImplementation(
		MATH_REPLACEMENT_MODE_LDBL, baseFunction,
		newFunctionName, prototype, baseLocalFunction,
		forcedDependencies, unforcedDependencies,
		noAutoDependencyScanning);
}




MATH_GENERATORS = (
	Generator(
		getDefaultBaseFunctionName:           double2float_getDefaultBaseFunctionName,
		registerFunctionPairing:              double2float_defineReplacement,
		replaceText:                          double2float_replaceText,
		generateLoaderFunctionImplementation: double2float_generateLoaderFunctionImplementation),
	Generator(
		getDefaultBaseFunctionName:           double2ldouble_getDefaultBaseFunctionName,
		registerFunctionPairing:              double2ldouble_defineReplacement,
		replaceText:                          double2ldouble_replaceText,
		generateLoaderFunctionImplementation: double2ldouble_generateLoaderFunctionImplementation),
);

global generators: {string: Generator} = Dict({
	"str2wcs" : Generator(
		getDefaultBaseFunctionName: str2wcs_getDefaultBaseFunctionName,
		registerFunctionPairing:    str2wcs_registerFunctionPairing,
		replaceText:                str2wcs_replaceText),
	"double2float"   : MATH_GENERATORS[0],
	"double2ldouble" : MATH_GENERATORS[1],
});




/* FUNCTION TEMPLATES */
class TemplateArgument {
	this = default;
	public member name: UserString | string;
	public member defl: UserString | string | none = none;
}
class TemplateInstantiation {
	this = default;
	public member body: string;
	public member implPrefix: {string...};
	public member ppCond: string;
	public member ppCondPrefix: {string...};
}

function _templateInjectArguments(body: string | UserString, args: {string: string}): string {
	local bodyStr = str body;
	File.Writer fp;
	local flushStart = 0;
	local i = 0, len = #bodyStr;
	while (i < len) {
		if (!bodyStr.startswith("${", i)) {
			++i;
			continue;
		}
		fp << bodyStr[flushStart:i];
		i += 2;
		local nameEnd = bodyStr.index("}", i);
		local argName = bodyStr[i:nameEnd];
		local argValue = args.get(argName);
		if (argValue is none) {
			if (body is UserString)
				body.errAt(i, f"Undefined template argument {repr argName}");
			argValue = args[argName]; /* Force an exception */
		}
		fp << argValue;
		i = flushStart = nameEnd + 1;
	}
	fp << bodyStr[flushStart:len];
	return fp.string;
}

function _templateInjectArgumentsList(bodies: {string | UserString...}, args: {string: string}): {string...} {
	for (local body: bodies) {
		yield _templateInjectArguments(body, args);
	}
}


class Template {
	this = default;

	@@Template name (usually prefixed by @"tpl_")
	public member name: string | UserString;

	@@Template arguments
	public member args: {TemplateArgument...} = [];

	@@Template body
	public member body: string | UserString;

	@@Implementation prefixes
	public member implPrefix: {(string | UserString)...} = [];

	public member ppCond: string | UserString = "1";
	public member ppCondPrefix: {(string | UserString)...} = [];

	@@Template mapped by name
	public property argsByName: {string: TemplateArgument} = {
		get(): {string: TemplateArgument} {
			if (m_argsByName !is bound) {
				m_argsByName = Dict(for (local arg: args) (str arg.name, arg));
			}
			return m_argsByName;
		}
	}
	private member m_argsByName: {string: TemplateArgument};

	private function _err(message: string) {
		if (this.name is UserString)
			this.name.err(message);
		throw Error(message);
	}

	@@Instantiate this template with the given @instArgs
	public function instantiate(instArgs: {string | UserString...}): TemplateInstantiation {
		if (#instArgs > #this.args) {
			this._err(
				f"Too many arguments for template {repr this.name} "
				f"(takes {#this.args}, but given {#instArgs})");
		}
		local usedArgs: {string: string} = Dict();
		for (local i, arg: util.enumerate(this.args)) {
			local value: UserString | string = arg.defl;
			if (i < #instArgs)
				value = str instArgs[i];
			if (value is none) {
				this._err(
					f"Missing template argument {repr arg.name} needed by {repr this.name}");
			}
			usedArgs[str arg.name] = value;
		}
		return TemplateInstantiation(
			body:         _templateInjectArguments(this.body, usedArgs),
			implPrefix:   Tuple(_templateInjectArgumentsList(this.implPrefix, usedArgs)),
			ppCond:       _templateInjectArguments(this.ppCond, usedArgs),
			ppCondPrefix: Tuple(_templateInjectArgumentsList(this.ppCondPrefix, usedArgs)),
		);
	}
}

@@Mapping of template name to template
global templates: {string: Template} = Dict();
