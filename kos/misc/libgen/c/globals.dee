/* Copyright (c) 2019-2020 Griefer@Work                                       *
 *                                                                            *
 * This software is provided 'as-is', without any express or implied          *
 * warranty. In no event will the authors be held liable for any damages      *
 * arising from the use of this software.                                     *
 *                                                                            *
 * Permission is granted to anyone to use this software for any purpose,      *
 * including commercial applications, and to alter it and redistribute it     *
 * freely, subject to the following restrictions:                             *
 *                                                                            *
 * 1. The origin of this software must not be misrepresented; you must not    *
 *    claim that you wrote the original software. If you use this software    *
 *    in a product, an acknowledgement (see the following) in the product     *
 *    documentation is required:                                              *
 *    Portions Copyright (c) 2019-2020 Griefer@Work                           *
 * 2. Altered source versions must be plainly marked as such, and must not be *
 *    misrepresented as being the original software.                          *
 * 3. This notice may not be removed or altered from any source distribution. *
 */

import * from deemon;
import * from collections;

#define Function           Object /* Function from .cheaders */
#define LocalFunction      Object /* LocalFunction from .cheaders */
#define LibraryFunction    Object /* LibraryFunction from .cheaders */
#define SystemHeader       Object /* SystemHeader from .cheaders */
#define FunctionPrototype  Object /* FunctionPrototype from .cheaders */
#define UserString         Object /* UserString from .parser */

class _DuplicateFunctionMarker { }
global DuplicateFunctionMarker = _DuplicateFunctionMarker();

@@Mapping of all functions ever defined (by name)
@@Functions with multiple definitions are stored as @DuplicateFunctionMarker
global allFunctionsByName: {string: (Function | _DuplicateFunctionMarker)} = Dict();

@@Mapping of all local functions ever defined (by name)
@@Functions with multiple definitions are stored as @DuplicateFunctionMarker
global allLocalFunctionsByName: {string: LocalFunction | _DuplicateFunctionMarker} = Dict();

@@Mapping of all library functions ever defined (by name)
global allLibraryFunctionsByName: {string: LibraryFunction} = Dict();

@@Mapping of system header names to the actual system headers
@@e.g.: @allSystemheaders["sys.stat"] for <sys/stat.h>
global allSystemHeaders: {string: SystemHeader} = Dict();

@@HashSet of all functions for which the <local/header/function.h> file was ever used
global neededLocalFunction: {LocalFunction...} = HashSet();




@@Lookup a function, given its name
function findFunctionByName(name: string | UserString): Function {
	local usedName = str name;
	local result: Function;
	try {
		if ("." in usedName) {
			/* Header-Specific function name. */
			local headerName;
			headerName, none, usedName = usedName.rpartition(".")...;
			result = allSystemHeaders[headerName].functionsByName[usedName];
		} else {
			result = allFunctionsByName[usedName];
		}
		if (result === DuplicateFunctionMarker)
			throw Error("Ambiguous Function: {!r}".format({ name }));
	} catch (Error as e) {
		if (hasattr(name, "err"))
			name.err(e.message);
		throw;
	}
	return result;
}

@@Lookup a local function, given its name
function findLocalFunctionByName(name: string | UserString): LocalFunction {
	local usedName = str name;
	local result: LocalFunction;
	try {
		if ("." in usedName) {
			/* Header-Specific function name. */
			local headerName;
			headerName, none, usedName = usedName.rpartition(".")...;
			result = allSystemHeaders[headerName].localFunctionsByName[usedName];
		} else {
			result = allLocalFunctionsByName[usedName];
		}
		if (result === DuplicateFunctionMarker)
			throw Error("Ambiguous local function: {!r}".format({ name }));
	} catch (e...) {
		if (hasattr(name, "err"))
			name.err(e.message);
		throw;
	}
	return result;
}

