/* Copyright (c) 2019-2021 Griefer@Work                                       *
 *                                                                            *
 * This software is provided 'as-is', without any express or implied          *
 * warranty. In no event will the authors be held liable for any damages      *
 * arising from the use of this software.                                     *
 *                                                                            *
 * Permission is granted to anyone to use this software for any purpose,      *
 * including commercial applications, and to alter it and redistribute it     *
 * freely, subject to the following restrictions:                             *
 *                                                                            *
 * 1. The origin of this software must not be misrepresented; you must not    *
 *    claim that you wrote the original software. If you use this software    *
 *    in a product, an acknowledgement (see the following) in the product     *
 *    documentation is required:                                              *
 *    Portions Copyright (c) 2019-2021 Griefer@Work                           *
 * 2. Altered source versions must be plainly marked as such, and must not be *
 *    misrepresented as being the original software.                          *
 * 3. This notice may not be removed or altered from any source distribution. *
 */

import * from deemon;
import * from ipc;
import * from .libmagic;

function testCodeCompilesSuccessfully(toolChain: Toolchain, code: string): bool {
	local proc = toolChain.createFeatureTestCompilerProcess("c++");
	local r, w = Pipe.new()...;
	proc.stdin = r;
#ifdef __WINDOWS__
	local nul = File.open("NUL", "w");
#else
	local nul = File.open("/dev/null", "w");
#endif
	proc.stdout = nul;
	//proc.stderr = nul;
	proc.start();
	r.close();
	w << code;
	w.close();
	return proc.join() == 0;
}

class ToolchainFeatures {
	this = default;
	@@Builtin functions
	public member builtins: {string...} = [];
}

final local knownBuiltinMathFunctions: {(string, string, {string...})...} = {
	("T", "__builtin_acos", { "T" }),
	("T", "__builtin_asin", { "T" }),
	("T", "__builtin_atan", { "T" }),
	("T", "__builtin_atan2", { "T", "T" }),
	("T", "__builtin_cos", { "T" }),
	("T", "__builtin_sin", { "T" }),
	("T", "__builtin_tan", { "T" }),
	("T", "__builtin_cosh", { "T" }),
	("T", "__builtin_sinh", { "T" }),
	("T", "__builtin_tanh", { "T" }),
	("T", "__builtin_exp", { "T" }),
	("T", "__builtin_frexp", { "T", "int *" }),
	("T", "__builtin_ldexp", { "T", "int" }),
	("T", "__builtin_log", { "T" }),
	("T", "__builtin_log10", { "T" }),
	("T", "__builtin_modf", { "T", "T *" }),
	("T", "__builtin_pow", { "T", "T" }),
	("T", "__builtin_sqrt", { "T" }),
	("T", "__builtin_sqrt", { "T" }),
	("T", "__builtin_fabs", { "T" }),
	("T", "__builtin_floor", { "T" }),
	("T", "__builtin_fmod", { "T", "T" }),
	("T", "__builtin_acosh", { "T" }),
	("T", "__builtin_asinh", { "T" }),
	("T", "__builtin_atanh", { "T" }),
	("T", "__builtin_expm1", { "T" }),
	("T", "__builtin_log1p", { "T" }),
	("T", "__builtin_logb", { "T" }),
	("T", "__builtin_cbrt", { "T" }),
	("T", "__builtin_rint", { "T" }),
	("T", "__builtin_nextafter", { "T", "T" }),
	("T", "__builtin_remainder", { "T", "T" }),
	("int", "__builtin_ilogb", { "T" }),
	("T", "__builtin_exp2", { "T" }),
	("T", "__builtin_log2", { "T" }),
	("T", "__builtin_copysign", { "T", "T" }),
	("T", "__builtin_nan", { "char const *" }),
	("T", "__builtin_tgamma", { "T" }),
	("T", "__builtin_nexttoward", { "T", "long double" }),
	("T", "__builtin_scalbn", { "T", "int" }),
	("T", "__builtin_scalbln", { "T", "long int" }),
	("T", "__builtin_nearbyint", { "T" }),
	("T", "__builtin_round", { "T" }),
	("T", "__builtin_trunc", { "T" }),
	("T", "__builtin_remquo", { "T", "T", "int *" }),
	("long int", "__builtin_lrint", { "T" }),
	("long int", "__builtin_lround", { "T" }),
	("T", "__builtin_fdim", { "T", "T" }),
	("T", "__builtin_fmax", { "T", "T" }),
	("T", "__builtin_fmin", { "T", "T" }),
	("T", "__builtin_fma", { "T", "T", "T" }),
	("long long", "__builtin_llrint", { "T" }),
	("long long", "__builtin_llround", { "T" }),
	("T", "__builtin_hypot", { "T", "T" }),
	("T", "__builtin_erf", { "T" }),
	("T", "__builtin_erfc", { "T" }),
	("T", "__builtin_lgamma", { "T" }),
};
final local knownBuiltinFunctions: {(string, string, {string...})...} = {
};


function gatherToolchainFeatures(toolChain: Toolchain): ToolchainFeatures {
	local result = ToolchainFeatures();
	function checkForBuiltin(return_type: string, name: string, arg_types: {string...}) {
		File.Writer code;
		code <<
			"int main() {\n"
			"\t" << return_type << " result;\n";
		local i = 0;
		for (local t: arg_types) {
			code << "\t" << t << " arg" << i << " = (" << t << ")0;\n";
			++i;
		}
		code << "\tresult = " << name << "("
			<< ", ".join(for (local i: [:#arg_types]) "arg" + i) <<
			");\n"
			"\treturn !!result;\n"
			"}\n";
		print "Checking for:", return_type, "{}({})".format({ name, ", ".join(arg_types) }),;
		if (testCodeCompilesSuccessfully(toolChain, code.string)) {
			result.builtins.append(name);
			print " +++ Available";
		} else {
			print " --- Missing";
		}
	}
	function checkForMathBuiltin(return_type: string, name: string, arg_types: {string...}) {
		for (local typ, suffix: {
			("float", "f"),
			("double", ""),
			("long double", "l")
		}) {
			checkForBuiltin(
				return_type.replace("T", typ),
				name + suffix,
				for (local t: arg_types)
					t.replace("T", typ),
			);
		}
	}
	for (local x: knownBuiltinMathFunctions)
		checkForMathBuiltin(x...);
	for (local x: knownBuiltinFunctions)
		checkForBuiltin(x...);
	return result;
}



function generateCompilerSpecs(toolChain: Toolchain, outFileName: string, COPYRIGHT: string) {
	local features = gatherToolchainFeatures(toolChain);
	with (local fp = File.open(outFileName, "w")) {
		fp << COPYRIGHT << "\n\n";
		for (local b: features.builtins) {
			fp << "#define __GCC_HAS_BUILTIN_" << b << "\n";
		}
	}
}
