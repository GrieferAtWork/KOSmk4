/* Copyright (c) 2019-2025 Griefer@Work                                       *
 *                                                                            *
 * This software is provided 'as-is', without any express or implied          *
 * warranty. In no event will the authors be held liable for any damages      *
 * arising from the use of this software.                                     *
 *                                                                            *
 * Permission is granted to anyone to use this software for any purpose,      *
 * including commercial applications, and to alter it and redistribute it     *
 * freely, subject to the following restrictions:                             *
 *                                                                            *
 * 1. The origin of this software must not be misrepresented; you must not    *
 *    claim that you wrote the original software. If you use this software    *
 *    in a product, an acknowledgement (see the following) in the product     *
 *    documentation is required:                                              *
 *    Portions Copyright (c) 2019-2025 Griefer@Work                           *
 * 2. Altered source versions must be plainly marked as such, and must not be *
 *    misrepresented as being the original software.                          *
 * 3. This notice may not be removed or altered from any source distribution. *
 */

/* Group compilation steps for working with MTOOLS */

import ipc;
import fs;
import * from deemon;
import OPT_LINK_OUTPUT from .c;
import * from ..libmagic;

@@Toolchain configuration: string
@@The filename of the MTOOLS base executable (`mtools.exe')
global final TOOLCHAIN_MTOOLS_EXE = "MTOOLS.exe";

@@Toolchain configuration: string
@@The filename of the MTOOLS disk
global final TOOLCHAIN_MTOOLS_DISK = "MTOOLS.disk";

/* MFORMAT options */
global final OPT_MFORMAT_TOTAL_SECTORS    = "MFORMAT.total_sectors";      /* int */
global final OPT_MFORMAT_HEADS            = "MFORMAT.heads";              /* int */
global final OPT_MFORMAT_SECTORS_PER_HEAD = "MFORMAT.sectors_per_head";   /* int */
global final OPT_MFORMAT_VOLUME_LABEL     = "MFORMAT.volume_label";       /* string */


@@Option: string
@@On-disk output filename for MCOPY
global final OPT_MCOPY_OUTPUT = "MCOPY.output";

@@Option: string
@@Input file for MCOPY (when unset, use `OPT_LINK_OUTPUT' instead)
global final OPT_MCOPY_INPUT = "MCOPY.input";


function mtoolsInvoke(self: BoundStep, cmd: string, args: {string...}): Waitable {
	local toolchainOptions = self.toolchain.options;
	local mToolsExe = toolchainOptions[TOOLCHAIN_MTOOLS_EXE];
	local proc = ipc.Process(mToolsExe, { mToolsExe, "-c", cmd, "-i",
		toolchainOptions[TOOLCHAIN_MTOOLS_DISK], args...});
	if (self.toolchain.config.VERBOSE)
		print log: ("Exec ", repr proc.argv);
	proc.stdout = log;
	proc.stderr = log;
	proc.start();
	return WaitableJoin(proc);
}

function MTOOLS_getModifiedOutputFiles(self: BoundStep): {string...} {
	yield self.toolchain.options[TOOLCHAIN_MTOOLS_DISK];
}

function MFORMAT_run(self: BoundStep): {Waitable...} {
	local options = self.group.options;
	local disk = self.toolchain.options[TOOLCHAIN_MTOOLS_DISK];
	local num_sectors = options[OPT_MFORMAT_TOTAL_SECTORS];
	local fp = File.open(disk, "w,nobuf");
	fp.seek((num_sectors * 512) - 1);
	fp.write("\0");
	fp.close();
	local args = [
		"-T", str(num_sectors),
		"-h", str(options[OPT_MFORMAT_HEADS]),
		"-s", str(options[OPT_MFORMAT_SECTORS_PER_HEAD]),
	];
	local label = options.get(OPT_MFORMAT_VOLUME_LABEL);
	if (label !is none) {
		args.append("-v");
		args.append(label);
	}
	yield mtoolsInvoke(self, "mformat", args);
}

function MFORMAT_tostr(self: BoundStep): string {
	return f"Mformat {repr self.toolchain.options[TOOLCHAIN_MTOOLS_DISK]}";
}


function MMD(self: BoundStep, cache: HashSet with string, path: string) {
	path = path.replace("\\", "/").strip("/").strip();
	if ("/" in path)
		MMD(self, cache, path.rpartition("/").first);
	if (path !in cache) {
		cache.insert(path);
		try {
			mtoolsInvoke(self, "mmd", { "-D", "s", "::/" + path }).waitfor();
		} catch (...) {
		}
	}
}

function MCOPY_split(self: BoundStep): {BoundStep...} {
	local group = self.group;
	local options = group.options;
	local input = options.get(OPT_MCOPY_INPUT);
	if (input is none)
		input = options[OPT_LINK_OUTPUT];
	for (local f: group.enumerateWildcardFiles(input))
		yield self.createChildStep(f);
}

function MCOPY_getOutputFilename(
		options: {string: Object}, input: string): string {
	local result = options[OPT_MCOPY_OUTPUT].replace("\\", "/").lstrip("/");
	if (result.endswith("/"))
		result = result + fs.tailof(input);
	return result;
}

function MCOPY_run(self: BoundStep): {Waitable...} {
	local th = Thread((self: BoundStep) -> {
		local group: Group = self.group;
		local options: {string: Object} = group.options;
		local input: string = self.userData;
		local final DISK_MMD_CACHE: string = "MTOOLS.disk_mmd_cache";
		local toolchainOptions: {string: Object} = self.toolchain.options;
		local mmdCache: {string: {string...}} = toolchainOptions.get(DISK_MMD_CACHE);
		if (mmdCache is none)
			toolchainOptions[DISK_MMD_CACHE] = mmdCache = Dict();
		local diskname: string = toolchainOptions[TOOLCHAIN_MTOOLS_DISK];
		local knownDirs: HashSet with string = mmdCache.get(diskname);
		if (knownDirs is none)
			mmdCache[diskname] = knownDirs = HashSet();
		local output: string = MCOPY_getOutputFilename(options, input);
		/* Make sure that all directories leading up
		 * to the file  to-be created created  exist */
		MMD(self, knownDirs, output.rpartition("/").first);
		/* Copy the actual file onto the disk. */
		mtoolsInvoke(self, "mcopy", {
			"-D", "o", input, "::/" + output
		}).waitfor();
	}, (self, ));
	th.start();
	yield WaitableJoin(th);
}

function MCOPY_getRequiredFiles(self: BoundStep): {string...} {
	yield self.userData;
}

function MCOPY_tostr(self: BoundStep): string {
	local group = self.group;
	local options = group.options;
	return f"Mcopy {self.toolchain.options[TOOLCHAIN_MTOOLS_DISK]}:{group.options[OPT_MCOPY_OUTPUT]}";
}


@@MFORMAT
@@Create a new disk
global MFORMAT = Step(
	name: "MFORMAT",
	options: {
		OPT_MFORMAT_TOTAL_SECTORS,
		OPT_MFORMAT_HEADS,
		OPT_MFORMAT_SECTORS_PER_HEAD,
		OPT_MFORMAT_VOLUME_LABEL,
	},
	run: MFORMAT_run,
	tostr: MFORMAT_tostr,
	getProducedFiles: MTOOLS_getModifiedOutputFiles,
);

@@MCOPY
@@A step used to copy `OPT_MCOPY_INPUT' to the mtools disk `OPT_MCOPY_OUTPUT'
global MCOPY = Step(
	name: "MCOPY",
	options: {
		OPT_MCOPY_OUTPUT,
		OPT_MCOPY_INPUT,
		OPT_LINK_OUTPUT,
	},
	split: MCOPY_split,
	run: MCOPY_run,
	tostr: MCOPY_tostr,
	getRequiredFiles: MCOPY_getRequiredFiles,
	getModifiedOutputFiles: MTOOLS_getModifiedOutputFiles,
);





@@Find the originating filename (within the host fs) of a given @diskFile filename
@@If no such filename could be found, return @none instead
function findDiskFileOrigin(groups: {Group...}, diskFile: string): string | none {
	diskFile = diskFile.lstrip("/").strip().replace("\\", "/");
	for (local g: groups) {
		for (local s: g.steps) {
			if (s.run !== MCOPY_run)
				continue;
			local input: string = g.options.get(OPT_MCOPY_INPUT);
			if (input is none)
				input = g.options[OPT_LINK_OUTPUT];
			local output = MCOPY_getOutputFilename(g.options, input);
			if (output == diskFile) {
				/* Found it! */
				if ("*" in input)
					input = fs.headof(input) + fs.tailof(output);
				return g.fixFilename(input);
			}
		}
	}
	return none;
}
