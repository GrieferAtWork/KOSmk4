/* Copyright (c) 2019-2023 Griefer@Work                                       *
 *                                                                            *
 * This software is provided 'as-is', without any express or implied          *
 * warranty. In no event will the authors be held liable for any damages      *
 * arising from the use of this software.                                     *
 *                                                                            *
 * Permission is granted to anyone to use this software for any purpose,      *
 * including commercial applications, and to alter it and redistribute it     *
 * freely, subject to the following restrictions:                             *
 *                                                                            *
 * 1. The origin of this software must not be misrepresented; you must not    *
 *    claim that you wrote the original software. If you use this software    *
 *    in a product, an acknowledgement (see the following) in the product     *
 *    documentation is required:                                              *
 *    Portions Copyright (c) 2019-2023 Griefer@Work                           *
 * 2. Altered source versions must be plainly marked as such, and must not be *
 *    misrepresented as being the original software.                          *
 * 3. This notice may not be removed or altered from any source distribution. *
 */

/* Interface with the options database */

import * from deemon;
import * from errors;
import * from .utils;
import fs;

/*
 * NOTE: To fully re-generate `options.txt' (needed after you've removed  the
 *       last  config option from  a file that  previously contained some, or
 *       after fully removing/renaming a file that contained config options),
 *       you may use the following commandline:
 * >> rm -f kos/misc/config/options-db.txt && grep -lr '\[\[\[config' kos | grep -v '\.dec' | grep -v '\.md' | xargs deemon kos/misc/libgen/autom8.dee
 */

function loadOptions(): {string: {Bytes...}} {
	local result = Dict();
	local currentFilename: string | none = none;
	local currentOptions: {Bytes...} = [];
	try {
		for (local line: File.open(OPTIONS_DB_FILENAME).read().splitlines(false)) {
			if (line.startswith("#"))
				continue; /* Comment */
			if (line.startswith("\t")) {
				currentOptions.append(line[1:]);
			} else if (line) {
				if (currentFilename !is none)
					result[currentFilename] = currentOptions;
				currentFilename = line.decode("utf-8");
				currentOptions  = [];
			}
		}
	} catch (FileNotFound) {
	}
	if (currentFilename !is none)
		result[currentFilename] = currentOptions;
	return result;
}

function copyOptions(opt: {string: {Bytes...}}): {string: {Bytes...}} {
	local result = Dict();
	for (local filename, opts: opt)
		result[filename] = copy opts;
	return result;
}

@@Mapping for FILENAME->OPTION_LINES
global final varying OPTIONS: {string: {Bytes...}} = loadOptions();
global final varying _ORIG_OPTIONS: {string: {Bytes...}} = copyOptions(OPTIONS);

@@Set to true if @OPTIONS may have been modified
global maybeModified: bool = false;


function forceSave() {
	maybeModified = false;
	local newOptionsFilename = fs.joinpath(fs.headof(OPTIONS_DB_FILENAME), "options-db-new.txt");
	local oldOptionsFilename = fs.joinpath(fs.headof(OPTIONS_DB_FILENAME), "options-db-old.txt");
	with (local fp = File.open(newOptionsFilename, "wb")) {
		fp << "# Autogenerated file (by `options-db.dee') - DO NOT EDIT!\n";
		for (local filename: OPTIONS.keys.sorted()) {
			local opts = OPTIONS[filename];
			fp << filename << "\n";
			for (local opt: opts)
				fp << "\t" << opt << "\n";
			fp << "\n";
		}
	}
	try {
		fs.rename(OPTIONS_DB_FILENAME, oldOptionsFilename);
	} catch (FileNotFound) {
		fs.rename(newOptionsFilename, OPTIONS_DB_FILENAME);
		return;
	} @[interrupt] catch (...) {
		try fs.unlink(newOptionsFilename); catch (...);
		throw;
	}
	try {
		fs.rename(newOptionsFilename, OPTIONS_DB_FILENAME);
		try {
			fs.unlink(oldOptionsFilename);
		} @[interrupt] catch (...) {
			try fs.rename(OPTIONS_DB_FILENAME, newOptionsFilename); catch (...);
			throw;
		}
	} @[interrupt] catch (...) {
		try fs.rename(oldOptionsFilename, OPTIONS_DB_FILENAME); catch (...);
		try fs.unlink(newOptionsFilename); catch (...);
		throw;
	}
}

function save() {
	if (maybeModified) {
		if (#_ORIG_OPTIONS != #OPTIONS) {
			forceSave();
		} else {
			for (local filename, opts: OPTIONS) {
				local oldOpts = _ORIG_OPTIONS.get(filename);
				if (oldOpts is none || oldOpts != opts) {
					forceSave();
					return;
				}
			}
		}
	}
}

function setMaybeModified() {
	if (!maybeModified) {
		AppExit.atexit(save);
		maybeModified = true;
	}
}


function normalizeFilename(filename: string): string {
	return fs.relpath(filename, getKosRootDir())
#ifdef __WINDOWS__
		.replace(r"\", r"/")
#endif /* __WINDOWS__ */
		;
}

function clearFileConfig(filename: string) {
	try {
		del OPTIONS[filename];
	} catch (...) {
	}
	setMaybeModified();
}

function addFileConfigOption(filename: string, optionLine: string | Bytes) {
	local opts = OPTIONS.get(filename, none);
	if (opts is none)
		OPTIONS[filename] = opts = [];
	if (optionLine !in opts)
		opts.append(optionLine.bytes());
	setMaybeModified();
}
