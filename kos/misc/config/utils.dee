/* Copyright (c) 2019-2024 Griefer@Work                                       *
 *                                                                            *
 * This software is provided 'as-is', without any express or implied          *
 * warranty. In no event will the authors be held liable for any damages      *
 * arising from the use of this software.                                     *
 *                                                                            *
 * Permission is granted to anyone to use this software for any purpose,      *
 * including commercial applications, and to alter it and redistribute it     *
 * freely, subject to the following restrictions:                             *
 *                                                                            *
 * 1. The origin of this software must not be misrepresented; you must not    *
 *    claim that you wrote the original software. If you use this software    *
 *    in a product, an acknowledgement (see the following) in the product     *
 *    documentation is required:                                              *
 *    Portions Copyright (c) 2019-2024 Griefer@Work                           *
 * 2. Altered source versions must be plainly marked as such, and must not be *
 *    misrepresented as being the original software.                          *
 * 3. This notice may not be removed or altered from any source distribution. *
 */

import * from deemon;
import * from errors;
import * from ..libgen.c.ppexpr;
import fs;

global final OPTIONS_DB_FILENAME = fs.joinpath(fs.headof(__FILE__), "options-db.txt");

global _KOS_ROOTDIR = none;
function getKosRootDir(): string {
	if (_KOS_ROOTDIR is none)
		_KOS_ROOTDIR = fs.expand(fs.joinpath(fs.headof(__FILE__), "../../.."), "ap");
	return _KOS_ROOTDIR;
}

function getConfigDisabledIntegerValue(configName: string): int {
	return {
		"CONFIG_MAX_CPU_COUNT" : 1
	}.get(configName, 0);
}

function getConfigInverseName(configName: string): string {
	local result = {
		"CONFIG_MAX_CPU_COUNT" : "CONFIG_NO_SMP"
	}.get(configName);
	if (result !is none)
		return result;
	local configPos = configName.find("CONFIG_");
	if (configPos >= 0) {
		configPos += 7;
	} else {
		configPos = 0;
	}
	local configPos2 = configName.find("HAVE_", configPos);
	if (configPos2 >= 0)
		configPos = configPos2 + 5;
	local configPos2 = configName.find("USE_", configPos);
	if (configPos2 >= 0)
		configPos = configPos2 + 4;
	if (configName.startswith("NO_", configPos))
		return configName[:configPos] + configName[configPos+3:];
	return f"{
		configName[:configPos]
			.rsstrip("HAVE_")
			.rsstrip("USE_")
	}NO_{configName[configPos:]}";
}


function printConfigLoader(
		fp: File, configName: string, configType: string,
		configValue: string, required: bool) {
	if (configType == "bool") {
		local noName = getConfigInverseName(configName);
		fp << "#ifdef " << noName << "\n"
			"#undef " << configName << "\n"
			"#elif !defined(" << configName << ")\n";
		if (configValue in ["true", "false"]) {
			fp <<
				"#define " << (configValue == "true" ? configName : noName) << "\n";
		} else {
			configValue = optimize(configValue);
			fp << optimizeForIfdef(configValue) <<
				"#define " << configName << "\n"
				<< optimizeForElse(configValue) <<
				"#define " << noName << "\n"
				<< optimizeForEndif(f"!({configValue})");
		}
		fp << "#elif (-" << configName << " - 1) == -1\n"
			"#undef " << configName << "\n"
			"#define " << noName << "\n"
			"#endif /* ... */\n";
	} else if (configType == "int" && !required) {
		local noName = getConfigInverseName(configName);
		local disabledValue = getConfigDisabledIntegerValue(configName);
		fp << "#ifdef " << noName << "\n"
			"#undef " << configName << "\n"
			"#define " << configName << " " << disabledValue << "\n"
			"#elif !defined(" << configName << ")\n"
			"#define " << configName << " " << configValue << "\n";
		if (configValue == "0")
			fp << "#define " << noName << " 1\n";
		fp << "#elif (" << configName << " + 0) <= " << disabledValue << "\n"
			"#undef " << configName << "\n"
			"#define " << noName << "\n"
			"#define " << configName << " " << disabledValue << "\n"
			"#endif /* ... */\n";
	} else {
		fp << "#ifndef " << configName << "\n"
			"#define " << configName << " " << configValue << "\n"
			"#endif /* !" << configName << " */\n";
	}
}
