/* Copyright (c) 2019-2021 Griefer@Work                                       *
 *                                                                            *
 * This software is provided 'as-is', without any express or implied          *
 * warranty. In no event will the authors be held liable for any damages      *
 * arising from the use of this software.                                     *
 *                                                                            *
 * Permission is granted to anyone to use this software for any purpose,      *
 * including commercial applications, and to alter it and redistribute it     *
 * freely, subject to the following restrictions:                             *
 *                                                                            *
 * 1. The origin of this software must not be misrepresented; you must not    *
 *    claim that you wrote the original software. If you use this software    *
 *    in a product, an acknowledgement (see the following) in the product     *
 *    documentation is required:                                              *
 *    Portions Copyright (c) 2019-2021 Griefer@Work                           *
 * 2. Altered source versions must be plainly marked as such, and must not be *
 *    misrepresented as being the original software.                          *
 * 3. This notice may not be removed or altered from any source distribution. *
 */
#ifdef __WINDOWS__
#define EXE(x) x ".exe"
#else
#define EXE(x) x
#endif
import fs;
import ipc;
import * from deemon;
import * from ..libmagic.libmagic;


function doRunDeemonScript(
		filename: string, additionalArguments: {string...} = none): ipc.Process {
	local proc = ipc.Process(EXE("./binutils/deemon/deemon"),
		[filename, additionalArguments...]);
	proc.start();
	return proc;
}



function doRunDeemonScriptIfFilesAreOutOfDate(
		script: string, inputs: {string...}, latestSuffix: string = none,
		additionalArguments: {string...} = none): (string, ipc.Process) | none {
	assert inputs;
	local latest = normalizePath(getLatestFilenameOf(
		latestSuffix is none ? script : "{}.{}".format({ script, latestSuffix })), false);
	local oldestOutput = getLastModfiedTime(latest);
	if (oldestOutput is none) {
		print "[PRE] Running script", repr script, "because it hasn't been run, yet";
		return (latest, doRunDeemonScript(script, additionalArguments));
	}
	for (local x: inputs) {
		x = normalizePath(x, false);
		local tm = getLastModfiedTime(x);
		if (tm > oldestOutput) {
			print "[PRE] Running script", repr script, "because", repr x, "was changed";
			return (latest, doRunDeemonScript(script, additionalArguments));
		}
	}
}

function listQueryFiles(query: string): {string...} {
	local head = fs.headof(query);
	for (local x: fs.query(query)) {
		yield "{}/{}".format({ head, x });
	}
}

function runGenerateSyscalls(
		xarch_path: string, TARGET_ARCH: string,
		TARGET: Module): (string, ipc.Process) | none {
	local result = doRunDeemonScriptIfFilesAreOutOfDate(
		script: "kos/misc/magicgenerator/generate_syscalls.dee",
		inputs: { "kos/include/asm/syscalls.def" });
	if (result is none) {
		result = doRunDeemonScriptIfFilesAreOutOfDate(
			script: "kos/misc/magicgenerator/generate_syscalls.dee",
			inputs: { "{}/asm/syscalls{}.def".format({ xarch_path, TARGET.SUFFIX }), },
			latestSuffix: TARGET_ARCH,
			additionalArguments: { TARGET_ARCH });
	}
	return result;
}

function runGenerateHeaders(): (string, ipc.Process) | none {
	return doRunDeemonScriptIfFilesAreOutOfDate(
		script: "kos/misc/magicgenerator/generate_headers.dee",
		inputs: listQueryFiles("kos/src/libc/magic/*.c")
	);
}

function updateAutomaticSourcesOnDemand(TARGET_ARCH: string, TARGET: Module) {
	local autoScripts: {(string, ipc.Process)...} = [];
	function collect(x: (string, ipc.Process) | none) {
		if (x !is none)
			autoScripts.append(x);
	}
	local xarch_path = "kos/include/{}-kos".format({ TARGET.XARCH });

	collect(runGenerateSyscalls(xarch_path, TARGET_ARCH, TARGET));
	collect(runGenerateHeaders());

	local now = none;
	while (autoScripts) {
		local latest, proc = autoScripts.pop()...;
		joinProcess(proc);
		File.open(latest, "wb").close();
		now = setForceChanged(latest, now);
	}
}
