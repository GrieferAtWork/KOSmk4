/* Copyright (c) 2019-2025 Griefer@Work                                       *
 *                                                                            *
 * This software is provided 'as-is', without any express or implied          *
 * warranty. In no event will the authors be held liable for any damages      *
 * arising from the use of this software.                                     *
 *                                                                            *
 * Permission is granted to anyone to use this software for any purpose,      *
 * including commercial applications, and to alter it and redistribute it     *
 * freely, subject to the following restrictions:                             *
 *                                                                            *
 * 1. The origin of this software must not be misrepresented; you must not    *
 *    claim that you wrote the original software. If you use this software    *
 *    in a product, an acknowledgement (see the following) in the product     *
 *    documentation is required:                                              *
 *    Portions Copyright (c) 2019-2025 Griefer@Work                           *
 * 2. Altered source versions must be plainly marked as such, and must not be *
 *    misrepresented as being the original software.                          *
 * 3. This notice may not be removed or altered from any source distribution. *
 */

import posix;
import * from deemon;

/* To  generate a .editorconfig file for use with Visual Studio, we wan't a fully
 * customized "cpp_include_cleanup_alternate_files" tag. For this, system headers
 * that  shouldn't be included directly declare header(s) that should be included
 * indead. This tag must appear as a comment before the first non-comment  token,
 * and have the form of:
 * >> //!included_by <stdio.h>
 * >> / *!included_by <stdio.h>* /
 */

posix.chdir(posix.headof(__FILE__) + "/../../.."); /* $PROJPATH */

global final ROOTDIR = posix.getcwd().replace("/", "\\").rstrip("\\");


@@Set of stuff like @("stddef.h", "cstddef")
global cpp_include_cleanup_alternate_files: {(string, string)...} = HashSet();
global cpp_include_cleanup_replacement_files: {string: string} = Dict();
global cpp_include_cleanup_excluded_files: {string...} = HashSet();

function scanFileForEditorConfigTags(filename: string, includeFilename: string) {
	print("Scanning ", repr filename, " (as: <", includeFilename, ">)");
	local data = File.open(filename, "rb").read();
	local i = 0, len = #data;
	while (i < len) {
		if (data.isspace(i)) {
			++i;
			continue;
		}
		local startOfComment;
		local endOfComment;
		if (data.startswith("//", i)) {
			startOfComment = i + 2;
			endOfComment = data.find("\n", startOfComment);
			if (endOfComment < 0)
				break;
			i = endOfComment + 1;
		} else if (data.startswith("/*", i)) {
			startOfComment = i + 2;
			endOfComment = data.find("*/", startOfComment);
			if (endOfComment < 0)
				break;
			i = endOfComment + 2;
		} else {
			break;
		}
		local comment = data[startOfComment:endOfComment].strip();
		if (comment.startswith("!included_by")) {
			comment = comment[12:].lstrip();
			if (comment.startswith("<") && comment.endswith(">")) {
				comment = comment[1:-1].decode("utf-8");
				cpp_include_cleanup_alternate_files.insert((comment, includeFilename));
			}
		} else if (comment.startswith("!always_includes")) {
			comment = comment[16:].lstrip();
			if (comment.startswith("<") && comment.endswith(">")) {
				comment = comment[1:-1].decode("utf-8");
				cpp_include_cleanup_alternate_files.insert((includeFilename, comment));
			}
		} else if (comment.startswith("!replace_with_include")) {
			comment = comment[21:].lstrip();
			if (comment.startswith("<") && comment.endswith(">")) {
				comment = comment[1:-1].decode("utf-8");
				cpp_include_cleanup_replacement_files[includeFilename] = comment;
				cpp_include_cleanup_alternate_files.insert((comment, includeFilename));
			}
		} else if (comment.startswith("!replaces_include")) {
			comment = comment[17:].lstrip();
			if (comment.startswith("<") && comment.endswith(">")) {
				comment = comment[1:-1].decode("utf-8");
				cpp_include_cleanup_replacement_files[comment] = includeFilename;
				cpp_include_cleanup_alternate_files.insert((includeFilename, comment));
			}
		} else if (comment == "!ignore_unnecessary_include") {
			cpp_include_cleanup_excluded_files.insert(includeFilename);
		}
	}
}

function scanDirectoryForEditorConfigTags(path: string, relBase: string) {
	for (local ent: posix.opendir(path, skipdots: true)) {
		if (ent.d_type == posix.DT_DIR) {
			scanDirectoryForEditorConfigTags(ent.d_fullname, f"{relBase}{ent.d_name}/");
		} else if (ent.d_type == posix.DT_REG) {
			local includeFilename = relBase + ent.d_name;
			for (local prefix: {
					"i386-kos/c++/15.2.0/i686-kos/",
					"i386-kos/c++/15.2.0/",
					"i386-kos/",
					"arm-kos/c++/15.2.0/i686-kos/",
					"arm-kos/c++/15.2.0/",
					"arm-kos/",
			}) {
				if (includeFilename.startswith(prefix)) {
					local nonArchFilename = ent.d_fullname
							.replace("\\", "/")
							.replace(prefix, "");
					if (posix.stat.isreg(nonArchFilename))
						includeFilename = includeFilename[#prefix:];
					break;
				}
			}
			scanFileForEditorConfigTags(ent.d_fullname, includeFilename);
		}
	}
}

function createTransitiveIncludeRules() {
	for (;;) {
		local alwaysIncludeRules: {string: {string...}} = Dict();
		for (local thisFile, alwaysIncludesThisFile: cpp_include_cleanup_alternate_files) {
			alwaysIncludeRules.setdefault(thisFile, HashSet()).insert(alwaysIncludesThisFile);
		}
		local extraRules: {(string, string)...} = HashSet();
		for (local thisFile, alwaysIncludesThisFile: cpp_include_cleanup_alternate_files) {
			local transitiveIncludes = alwaysIncludeRules.get(alwaysIncludesThisFile);
			if (transitiveIncludes !is none) {
				for (local transitiveInclude: transitiveIncludes)
					extraRules.insert((thisFile, transitiveInclude));
			}
		}
		if (!extraRules)
			break;
		local didExpand = false;
		for (local extraRule: extraRules) {
			if (cpp_include_cleanup_alternate_files.insert(extraRule))
				didExpand = true;
		}
		if (!didExpand)
			break;
	}
	for (;;) {
		local overrides: {string: string} = Dict();
		for (local replaceThis, withThis: cpp_include_cleanup_replacement_files) {
			local recursiveReplace = cpp_include_cleanup_replacement_files.get(withThis);
			if (recursiveReplace !is none)
				overrides[replaceThis] = recursiveReplace;
		}
		if (!overrides)
			break;
		for (local replaceThis, withThis: overrides)
			cpp_include_cleanup_replacement_files[replaceThis] = withThis;
	}
}

function main() {
	scanDirectoryForEditorConfigTags(f"{ROOTDIR}/kos/include", "");
	scanDirectoryForEditorConfigTags(f"{ROOTDIR}/kos/src/kernel/include", "");
	createTransitiveIncludeRules();

	print "Generating .editorconfig";
	with (local out = File.open(f"{ROOTDIR}/kos/.editorconfig", "wb")) {
		print out: ("# Generated file (by /kos/misc/build/editorconfig.dee) -- DO NOT EDIT");
		print out: ("root = true");
		print out: ("");
		print out: ("[*]");

		/* Strings that VS seems to read from .editorconfig */
		// tab_size insert_tabs indent_braces indent_size align_parameters indentation_reference indent_case_contents preserve_parameter_indentation indent_case_braces indent_case_labels indent_preprocessor indent_goto_labels indent_namespace_contents indent_access_specifiers indent_lambda_braces preserve_comment_indentation newline_type_brace newline_namespace_brace newline_control_block_brace newline_function_brace newline_scope_brace newline_lambda_brace newline_empty_function_close_brace newline_empty_type_close_brace newline_keyword_else newline_keyword_catch space_before_function_parenthesis newline_keyword_while space_between_empty_function_parentheses space_within_function_parentheses space_within_control_block_parentheses space_before_control_block_parenthesis space_within_cast_parentheses space_before_lambda_parenthesis space_within_expression_parentheses space_after_cast_parenthesis space_between_empty_braces space_before_block_brace space_within_init_list_braces space_before_init_list_brace space_before_bracket preserve_init_list_space space_before_empty_bracket space_within_brackets group_brackets space_between_empty_brackets space_between_empty_lambda_brackets space_within_lambda_brackets space_after_comma space_before_comma space_before_inheritance_colon trim_space_around_scope remove_space_before_semicolon space_before_constructor_colon trim_space_unary_operator space_after_semicolon space_around_assignment_operator space_around_binary_operator space_around_conditional_operator pointer_alignment use_ue_macro_formatting preserve_block cpp_include_cleanup_remove_unused cpp_include_cleanup_add_missing cpp_include_cleanup_excluded_files cpp_include_cleanup_replacement_files cpp_include_cleanup_alternate_files cpp_include_cleanup_required_files cpp_includes_style cpp_includes_use_forward_slash cpp_include_cleanup_optimize_unused cpp_include_cleanup_sort_after_edits cpp_sort_includes_priority_style cpp_sort_includes_error_tag_type cpp_sort_includes_priority_matching_header cpp_sort_includes_priority_case_sensitive cpp_sort_includes_keep_groups

		print out: ("cpp_sort_includes_error_tag_type = none");
		print out: ("cpp_sort_includes_priority_case_sensitive = true");
		print out: ("cpp_sort_includes_priority_style = quoted");
		print out: ("cpp_includes_style = default");
		print out: ("cpp_includes_use_forward_slash = true");
		print out: ("cpp_include_cleanup_sort_after_edits = false");
		print out: ("cpp_include_cleanup_add_missing_error_tag_type = suggestion");
		print out: ("cpp_include_cleanup_remove_unused_error_tag_type = dimmed");
		print out: ("cpp_include_cleanup_optimize_unused_error_tag_type = suggestion");
		print out: ("cpp_include_cleanup_alternate_files = ", ",".join(
			for (local useThis, insteadOf: cpp_include_cleanup_alternate_files.sorted())
				f"{useThis}:{insteadOf}"
		));
		print out: ("cpp_include_cleanup_replacement_files = ", ",".join(
			for (local replaceThis, withThis: cpp_include_cleanup_replacement_files.sorted())
				f"{replaceThis}:{withThis}"
		));
		print out: ("cpp_include_cleanup_excluded_files = ", ",".join(
			cpp_include_cleanup_excluded_files.sorted()
		));
	}
	print "DONE";
}


#ifdef __MAIN__
main();
#endif /* __MAIN__ */
