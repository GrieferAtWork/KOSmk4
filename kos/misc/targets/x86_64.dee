/* Copyright (c) 2018 Griefer@Work                                            *
 *                                                                            *
 * This software is provided 'as-is', without any express or implied          *
 * warranty. In no event will the authors be held liable for any damages      *
 * arising from the use of this software.                                     *
 *                                                                            *
 * Permission is granted to anyone to use this software for any purpose,      *
 * including commercial applications, and to alter it and redistribute it     *
 * freely, subject to the following restrictions:                             *
 *                                                                            *
 * 1. The origin of this software must not be misrepresented; you must not    *
 *    claim that you wrote the original software. If you use this software    *
 *    in a product, an acknowledgement in the product documentation would be  *
 *    appreciated but is not required.                                        *
 * 2. Altered source versions must be plainly marked as such, and must not be *
 *    misrepresented as being the original software.                          *
 * 3. This notice may not be removed or altered from any source distribution. *
 */

import * from deemon;

@@Cross-Arch name:
@@  - @"/kos/src/libc/hybrid/arch/{XARCH}/...
@@  - @"/kos/include/{XARCH}-kos/...
@@  - @"/bin/{XARCH}-kos-{CONFIG}/...
@@  - ...
global final XARCH = "i386";

@@The GCC cross-compiler prefix
global final CROSS_PREFIX = "binutils/x86_64-kos/bin/x86_64-kos-";

@@sizeof(void *) of this target
global final POINTER_SIZE = 8;

@@Suffix for various files:
@@  - Assembly files (e.g.: @"/kos/src/libc/hybrid/arch/{XARCH}/*{SUFFIX}.S")
@@  - System call definition files (e.g. @"/kos/include/{XARCH}-kos/asm/syscalls{SUFFIX}.def")
@@  - ...
global final SUFFIX = "64";

@@Query pattern for matching assembly file names:
@@  - @"/kos/src/libc/hybrid/arch/{XARCH}/{ASMFILES}"
global final ASMFILES = "*64.S";

/* on-disk paths */
global final DISK_LIBPATH = "/lib64/";
global final DISK_USRLIBPATH = "/usr/lib64/";

@@The value of @KERNEL_CORE_BASE for this target
global final KERNEL_CORE_BASE = 0xffffffff80000000;

@@The ELF SIZE32 relocation for this target (if available)
global final R_TARGET_SIZE32 = "R_X86_64_SIZE32";

@@GNU AS pseudo-directive for emitting a pointer
global final AS_PTR = ".quad";

@@GNU AS pseudo-directive for emitting a 32-bit integer
global final AS_I32 = ".int";

@@An optional function called before building is started
function build(magic: Module) {

	/* Re-configure for i386 settions */
	magic.TARGET_ARCH = "i386";
	magic.TARGET = import(".i386");
	local saved_CONFIG_ONLY_BUILD_LIBRARIES = magic.CONFIG_ONLY_BUILD_LIBRARIES;
	local saved_options = deepcopy magic.options;

	/* Build for i386 */
	print "Building cross-arch for x86_64: i386-kos-",;
	print magic.getConfig(),;
	print "...";
	magic.build(reconfigure: [](magic: Module) {
		import TOOLCHAIN_MTOOLS_DISK from ..libmagic.steps.mtools;
		/* Re-configure to output files into the x86_64 binpath */
		magic.TARGET_BINPATH              = "/bin/x86_64-kos-" + magic.getConfig();
		magic.KERNEL_BINARY               = none;
		magic.CONFIG_ONLY_BUILD_LIBRARIES = true;
		/* Also output files into the x86_64 disk image! */
		magic.toolchain.options[TOOLCHAIN_MTOOLS_DISK] = magic.TARGET_BINPATH[1:] + "/disk.img";
		/* Re-configure the toolchain cache to use x86_64 paths, rather than i386 ones.
		 * This is required to properly handle library dependencies for compatibility
		 * mode system libraries. */
		magic.toolchain._stdlibCache.clear();
		magic.TARGET.provideToolchainCache(
			magic.toolchain, "x86_64-kos-" + magic.getConfig());
	});

	/* Restore x86_64 settions */
	magic.options.clear();
	magic.options.update(saved_options);
	magic.CONFIG_ONLY_BUILD_LIBRARIES = saved_CONFIG_ONLY_BUILD_LIBRARIES;
	magic.groups.clear();
	magic.TARGET_ARCH = "x86_64";
	import . as mytarget;
	magic.TARGET = mytarget;
	magic.toolchain._stdlibCache.clear();

	/* Build for x86_64 */
	print "Building cross-arch for x86_64: x86_64-kos-",;
	print magic.getConfig(),;
	print "...";
	magic.build();
}

@@Provide a cache for the toolchain.
function provideToolchainCache(toolchain/*: Toolchain*/, TARGET_NAME: string) {
	toolchain.provideStdlibCache(
		("c++", ("-fstack-protector-strong", )), (
			{	"binutils/x86_64-kos/lib/gcc/x86_64-kos/9.1.0",
				"binutils/x86_64-kos/x86_64-kos/lib",
				"binutils/x86_64-kos/lib",
				"bin/" + TARGET_NAME + "/lib64" },
			{ "stdc++", "m", "ssp_nonshared", "ssp", "gcc", "c", "dl" },
			{ "bin/" + TARGET_NAME + "/lib64/crt0.o" }
		));
	toolchain.provideStdlibCache(
		("c++", ()), (
			{	"binutils/x86_64-kos/lib/gcc/x86_64-kos/9.1.0",
				"binutils/x86_64-kos/x86_64-kos/lib",
				"binutils/x86_64-kos/lib",
				"bin/" + TARGET_NAME + "/lib64" },
			{ "stdc++", "m", "gcc", "c", "dl" },
			{ "bin/" + TARGET_NAME + "/lib64/crt0.o" }
		));
	toolchain.provideStdlibCache(
		("c", ("-fstack-protector-strong", )), (
			{	"binutils/x86_64-kos/lib/gcc/x86_64-kos/9.1.0",
				"binutils/x86_64-kos/x86_64-kos/lib",
				"binutils/x86_64-kos/lib",
				"bin/" + TARGET_NAME + "/lib64" },
			{ "ssp_nonshared", "ssp", "gcc", "c", "dl" },
			{ "bin/" + TARGET_NAME + "/lib64/crt0.o" }
		));
	toolchain.provideStdlibCache(
		("c", ()), (
			{	"binutils/x86_64-kos/lib/gcc/x86_64-kos/9.1.0",
				"binutils/x86_64-kos/x86_64-kos/lib",
				"binutils/x86_64-kos/lib",
				"bin/" + TARGET_NAME + "/lib64" },
			{ "gcc", "c", "dl" },
			{ "bin/" + TARGET_NAME + "/lib64/crt0.o" }
		));
}

