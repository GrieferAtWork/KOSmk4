/* Copyright (c) 2019-2025 Griefer@Work                                       *
 *                                                                            *
 * This software is provided 'as-is', without any express or implied          *
 * warranty. In no event will the authors be held liable for any damages      *
 * arising from the use of this software.                                     *
 *                                                                            *
 * Permission is granted to anyone to use this software for any purpose,      *
 * including commercial applications, and to alter it and redistribute it     *
 * freely, subject to the following restrictions:                             *
 *                                                                            *
 * 1. The origin of this software must not be misrepresented; you must not    *
 *    claim that you wrote the original software. If you use this software    *
 *    in a product, an acknowledgement (see the following) in the product     *
 *    documentation is required:                                              *
 *    Portions Copyright (c) 2019-2025 Griefer@Work                           *
 * 2. Altered source versions must be plainly marked as such, and must not be *
 *    misrepresented as being the original software.                          *
 * 3. This notice may not be removed or altered from any source distribution. *
 */

import * from deemon;

@@Cross-Arch name:
@@  - @"/kos/src/libc/hybrid/arch/{XARCH}/...
@@  - @"/kos/include/{XARCH}-kos/...
@@  - @"/bin/{XARCH}-kos-{CONFIG}/...
@@  - ...
global final XARCH = "i386";

@@Cross-Arch CPU name:
@@  - @"/kos/include/{XARCH}-kos/c++/12.1.0/{CPUNAME}-kos
@@  - ...
global final CPUNAME = "x86_64";

@@The GCC cross-compiler prefix
global final CROSS_PREFIX = "binutils/x86_64-kos/bin/x86_64-kos-";

@@sizeof(void *) of this target
global final POINTER_SIZE = 8;

@@Suffix for various files:
@@  - Assembly files (e.g.: @"/kos/src/libc/hybrid/arch/{XARCH}/*{SUFFIX}.S")
@@  - System call definition files (e.g. @"/kos/include/{XARCH}-kos/asm/syscalls{SUFFIX}.def")
@@  - ...
global final SUFFIX = "64";

@@Query pattern for matching assembly file names:
@@  - @"/kos/src/libc/hybrid/arch/{XARCH}/{ASMFILES}"
global final ASMFILES = "*64.S";

/* on-disk paths */
global final DISK_LIBPATH = "/lib64/";
global final DISK_USRLIBPATH = "/usr/lib64/";

@@The value of @KERNEL_CORE_BASE for this target
global final KERNEL_CORE_BASE = 0xffffffff80000000;

@@The ELF SIZE32 relocation for this target (if available)
global final R_TARGET_SIZE32 = "R_X86_64_SIZE32";

@@GNU AS pseudo-directive for emitting a pointer
global final AS_PTR = ".quad";

@@GNU AS pseudo-directive for emitting a 32-bit integer
global final AS_I32 = ".int";

@@Libdl implements the PE-compatibility mode system
global final DL_HAVE_PE_COMPAT = true;

@@GDB architecture name for this target
global final GDBARCH = "i386:x86-64:intel";

@@Intellisense mode for visual studio / vs-code
global final VS_INTELLISENSE_MODE = "linux-gcc-x64";

@@Fake target name for visual studio
global final VS_PROJECT_TARGET = "x64";

@@An optional function called before building is started
function build(magic: Module) {
	import updateAutomaticSourcesOnDemand from ..magicgenerator.ondemand;

	/* Re-configure for i386 settions */
	magic.TARGET_ARCH = "i386";
	magic.TARGET = import(".i386");
	local saved_OPT_ONLY_BUILD_LIBRARIES = magic.OPT_ONLY_BUILD_LIBRARIES;
	local saved_OPT_DONT_BUILD = magic.OPT_DONT_BUILD;
	local x64Options = deepcopy magic.options;
	local x64Toolchain = deepcopy magic.toolchain;
	local x64CONFIG = magic.config.CONFIG;
	magic.config.CONFIG = none;
	local x64Config = deepcopy magic.config;
	magic.config.CONFIG = x64CONFIG;
	x64Config.CONFIG = x64CONFIG;
	magic.OPT_DONT_BUILD = true;

	/* Generate build steps for i386 */
	local binTargetName = f"x86_64-kos-{x64Config.CONFIG.name}";
	magic.build(reconfigure: (magic: Module) -> {
		import TOOLCHAIN_MTOOLS_DISK from ..libmagic.steps.mtools;
		/* Re-configure to output files into the x86_64 binpath */
		magic.KERNEL_BINARY               = none;
		magic.OPT_ONLY_BUILD_LIBRARIES = true;
		/* Also output files into the x86_64 disk image! */
		magic.toolchain.options[TOOLCHAIN_MTOOLS_DISK] = magic.TARGET_BINPATH[1:] + "/disk.img";
		/* Re-configure the toolchain cache to use x86_64 paths, rather than i386 ones.
		 * This is required to properly  handle library dependencies for  compatibility
		 * mode system libraries. */
		magic.toolchain._stdlibCache.clear();
		magic.toolchain.name = f"x86_32-kos-{x64Config.CONFIG.name}";
		magic.TARGET.provideToolchainCache(
			magic.toolchain, f"x86_64-kos-{x64Config.CONFIG.name}");
	}, binTargetName: binTargetName);
	/* Check that source generators are up-to-date. */
	updateAutomaticSourcesOnDemand("i386", magic.TARGET);

	/* Collect 32-bit build settings */
	local x32Toolchain = magic.toolchain;
	local x32Groups = magic.groups;

	/* Restore x86_64 settings */
	magic.toolchain = x64Toolchain;
	magic.options = x64Options;
	magic.OPT_ONLY_BUILD_LIBRARIES = saved_OPT_ONLY_BUILD_LIBRARIES;
	local x64Groups = [];
	magic.groups = x64Groups;

	magic.TARGET_ARCH = "x86_64";
	import . as target_x86_64;
	magic.TARGET = target_x86_64;
	magic.config = x64Config;
	x64Toolchain._stdlibCache.clear();
	x64Toolchain.config = x64Config;
	x64Toolchain.name = f"x86_64-kos-{x64Config.CONFIG.name}";

	/* Generate build steps for x86_64 */
	magic.build();

	/* Setup available toolchains. */
	magic.toolchainsAndGroups = {
		(x32Toolchain, x32Groups),
		(x64Toolchain, x64Groups),
	};

	magic.OPT_DONT_BUILD = saved_OPT_DONT_BUILD;
	if (saved_OPT_DONT_BUILD)
		return;

	/* Check that source generators are up-to-date. */
	updateAutomaticSourcesOnDemand("x86_64", target_x86_64);

	/* Execute 32-bit and 64-bit build steps in parallel */
	return magic.buildToolchainsAndGroups();
}

@@Provide a cache for the toolchain.
function provideToolchainCache(toolchain/*: Toolchain*/, TARGET_NAME: string) {
	toolchain.provideStdlibCache(
		("c++", ("-fstack-protector-strong", )), (
			{	"binutils/x86_64-kos/lib/gcc/x86_64-kos/12.1.0",
				"binutils/x86_64-kos/x86_64-kos/lib",
				"binutils/x86_64-kos/lib",
				"bin/" + TARGET_NAME + "/lib64" },
			{ "stdc++", "m", "ssp_nonshared", "ssp", "gcc", "c", "dl" },
			{ "bin/" + TARGET_NAME + "/lib64/crt0.o" }
		));
	toolchain.provideStdlibCache(
		("c++", ()), (
			{	"binutils/x86_64-kos/lib/gcc/x86_64-kos/12.1.0",
				"binutils/x86_64-kos/x86_64-kos/lib",
				"binutils/x86_64-kos/lib",
				"bin/" + TARGET_NAME + "/lib64" },
			{ "stdc++", "m", "gcc", "c", "dl" },
			{ "bin/" + TARGET_NAME + "/lib64/crt0.o" }
		));
	toolchain.provideStdlibCache(
		("c", ("-fstack-protector-strong", )), (
			{	"binutils/x86_64-kos/lib/gcc/x86_64-kos/12.1.0",
				"binutils/x86_64-kos/x86_64-kos/lib",
				"binutils/x86_64-kos/lib",
				"bin/" + TARGET_NAME + "/lib64" },
			{ "ssp_nonshared", "ssp", "gcc", "c", "dl" },
			{ "bin/" + TARGET_NAME + "/lib64/crt0.o" }
		));
	toolchain.provideStdlibCache(
		("c", ()), (
			{	"binutils/x86_64-kos/lib/gcc/x86_64-kos/12.1.0",
				"binutils/x86_64-kos/x86_64-kos/lib",
				"binutils/x86_64-kos/lib",
				"bin/" + TARGET_NAME + "/lib64" },
			{ "gcc", "c", "dl" },
			{ "bin/" + TARGET_NAME + "/lib64/crt0.o" }
		));
	toolchain.provideStdlibCache(
		("assembler-with-cpp", ()), (
			{	"binutils/x86_64-kos/lib/gcc/x86_64-kos/12.1.0",
				"binutils/x86_64-kos/x86_64-kos/lib",
				"binutils/x86_64-kos/lib",
				"bin/" + TARGET_NAME + "/lib64" },
			{ "gcc", "c", "dl" },
			{ "bin/" + TARGET_NAME + "/lib64/crt0.o" }
		));
	toolchain.provideStdlibCache(
		("assembler-with-cpp", ("-fstack-protector-strong",)), (
			{	"binutils/x86_64-kos/lib/gcc/x86_64-kos/12.1.0",
				"binutils/x86_64-kos/x86_64-kos/lib",
				"binutils/x86_64-kos/lib",
				"bin/" + TARGET_NAME + "/lib64" },
			{ "ssp_nonshared", "ssp", "gcc", "c", "dl", "gcc" },
			{ "bin/" + TARGET_NAME + "/lib64/crt0.o" }
		));
}
