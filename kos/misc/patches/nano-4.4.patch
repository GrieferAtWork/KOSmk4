diff -Naur nano-4.4-orig/lib/cdefs.h nano-4.4/lib/cdefs.h
--- nano-4.4-orig/lib/cdefs.h	2019-08-25 10:52:51.000000000 +0200
+++ nano-4.4/lib/cdefs.h	2019-09-08 12:14:18.196749800 +0200
@@ -31,19 +31,19 @@
 #endif
 
 /* Some user header file might have defined this before.  */
-#undef	__P
-#undef	__PMT
+#undef	__NANO_P
+#undef	__NANO_PMT
 
 #ifdef __GNUC__
 
 /* All functions, except those with callbacks or those that
    synchronize memory, are leaf functions.  */
 # if __GNUC_PREREQ (4, 6) && !defined _LIBC
-#  define __LEAF , __leaf__
-#  define __LEAF_ATTR __attribute__ ((__leaf__))
+#  define __NANO_LEAF , __leaf__
+#  define __NANO_LEAF_ATTR __attribute__ ((__leaf__))
 # else
-#  define __LEAF
-#  define __LEAF_ATTR
+#  define __NANO_LEAF
+#  define __NANO_LEAF_ATTR
 # endif
 
 /* GCC can always grok prototypes.  For C++ programs we add throw()
@@ -52,21 +52,21 @@
    as non-throwing using a function attribute since programs can use
    the -fexceptions options for C code as well.  */
 # if !defined __cplusplus && __GNUC_PREREQ (3, 3)
-#  define __THROW	__attribute__ ((__nothrow__ __LEAF))
-#  define __THROWNL	__attribute__ ((__nothrow__))
-#  define __NTH(fct)	__attribute__ ((__nothrow__ __LEAF)) fct
-#  define __NTHNL(fct)  __attribute__ ((__nothrow__)) fct
+#  define __NANO_THROW	__attribute__ ((__nothrow__ __NANO_LEAF))
+#  define __NANO_THROWNL	__attribute__ ((__nothrow__))
+#  define __NANO_NTH(fct)	__attribute__ ((__nothrow__ __NANO_LEAF)) fct
+#  define __NANO_NTHNL(fct)  __attribute__ ((__nothrow__)) fct
 # else
 #  if defined __cplusplus && __GNUC_PREREQ (2,8)
-#   define __THROW	throw ()
-#   define __THROWNL	throw ()
-#   define __NTH(fct)	__LEAF_ATTR fct throw ()
-#   define __NTHNL(fct) fct throw ()
+#   define __NANO_THROW	throw ()
+#   define __NANO_THROWNL	throw ()
+#   define __NANO_NTH(fct)	__NANO_LEAF_ATTR fct throw ()
+#   define __NANO_NTHNL(fct) fct throw ()
 #  else
-#   define __THROW
-#   define __THROWNL
-#   define __NTH(fct)	fct
-#   define __NTHNL(fct) fct
+#   define __NANO_THROW
+#   define __NANO_THROWNL
+#   define __NANO_NTH(fct)	fct
+#   define __NANO_NTHNL(fct) fct
 #  endif
 # endif
 
@@ -79,9 +79,9 @@
 #  define __inline		/* No inline functions.  */
 # endif
 
-# define __THROW
-# define __THROWNL
-# define __NTH(fct)	fct
+# define __NANO_THROW
+# define __NANO_THROWNL
+# define __NANO_NTH(fct)	fct
 
 #endif	/* GCC.  */
 
@@ -96,14 +96,14 @@
 
 /* These two macros are not used in glibc anymore.  They are kept here
    only because some other projects expect the macros to be defined.  */
-#define __P(args)	args
-#define __PMT(args)	args
+#define __NANO_P(args)	args
+#define __NANO_PMT(args)	args
 
 /* For these things, GCC behaves the ANSI way normally,
    and the non-ANSI way under -traditional.  */
 
-#define __CONCAT(x,y)	x ## y
-#define __STRING(x)	#x
+#define __NANO_CONCAT(x,y)	x ## y
+#define __NANO_STRING(x)	#x
 
 /* This is not a typedef so `const __ptr_t' does the right thing.  */
 #define __ptr_t void *
@@ -111,11 +111,11 @@
 
 /* C++ needs to know that types and declarations are C, not C++.  */
 #ifdef	__cplusplus
-# define __BEGIN_DECLS	extern "C" {
-# define __END_DECLS	}
+# define __NANO_BEGIN_DECLS	extern "C" {
+# define __NANO_END_DECLS	}
 #else
-# define __BEGIN_DECLS
-# define __END_DECLS
+# define __NANO_BEGIN_DECLS
+# define __NANO_END_DECLS
 #endif
 
 
@@ -160,36 +160,36 @@
 
 
 /* __asm__ ("xyz") is used throughout the headers to rename functions
-   at the assembly language level.  This is wrapped by the __REDIRECT
+   at the assembly language level.  This is wrapped by the __NANO_REDIRECT
    macro, in order to support compilers that can do this some other
    way.  When compilers don't support asm-names at all, we have to do
    preprocessor tricks instead (which don't have exactly the right
    semantics, but it's the best we can do).
 
    Example:
-   int __REDIRECT(setpgrp, (__pid_t pid, __pid_t pgrp), setpgid); */
+   int __NANO_REDIRECT(setpgrp, (__pid_t pid, __pid_t pgrp), setpgid); */
 
 #if defined __GNUC__ && __GNUC__ >= 2
 
-# define __REDIRECT(name, proto, alias) name proto __asm__ (__ASMNAME (#alias))
+# define __NANO_REDIRECT(name, proto, alias) name proto __asm__ (__NANO_ASMNAME (#alias))
 # ifdef __cplusplus
-#  define __REDIRECT_NTH(name, proto, alias) \
-     name proto __THROW __asm__ (__ASMNAME (#alias))
-#  define __REDIRECT_NTHNL(name, proto, alias) \
-     name proto __THROWNL __asm__ (__ASMNAME (#alias))
+#  define __NANO_REDIRECT_NTH(name, proto, alias) \
+     name proto __NANO_THROW __asm__ (__NANO_ASMNAME (#alias))
+#  define __NANO_REDIRECT_NTHNL(name, proto, alias) \
+     name proto __NANO_THROWNL __asm__ (__NANO_ASMNAME (#alias))
 # else
-#  define __REDIRECT_NTH(name, proto, alias) \
-     name proto __asm__ (__ASMNAME (#alias)) __THROW
-#  define __REDIRECT_NTHNL(name, proto, alias) \
-     name proto __asm__ (__ASMNAME (#alias)) __THROWNL
+#  define __NANO_REDIRECT_NTH(name, proto, alias) \
+     name proto __asm__ (__NANO_ASMNAME (#alias)) __NANO_THROW
+#  define __NANO_REDIRECT_NTHNL(name, proto, alias) \
+     name proto __asm__ (__NANO_ASMNAME (#alias)) __NANO_THROWNL
 # endif
-# define __ASMNAME(cname)  __ASMNAME2 (__USER_LABEL_PREFIX__, cname)
-# define __ASMNAME2(prefix, cname) __STRING (prefix) cname
+# define __NANO_ASMNAME(cname)  __NANO_ASMNAME2 (__USER_LABEL_PREFIX__, cname)
+# define __NANO_ASMNAME2(prefix, cname) __NANO_STRING (prefix) cname
 
 /*
 #elif __SOME_OTHER_COMPILER__
 
-# define __REDIRECT(name, proto, alias) name proto; \
+# define __NANO_REDIRECT(name, proto, alias) name proto; \
 	_Pragma("let " #name " = " #alias)
 */
 #endif
@@ -451,33 +451,33 @@
 
 #if defined __LONG_DOUBLE_MATH_OPTIONAL && defined __NO_LONG_DOUBLE_MATH
 # define __LDBL_COMPAT 1
-# ifdef __REDIRECT
-#  define __LDBL_REDIR1(name, proto, alias) __REDIRECT (name, proto, alias)
+# ifdef __NANO_REDIRECT
+#  define __LDBL_REDIR1(name, proto, alias) __NANO_REDIRECT (name, proto, alias)
 #  define __LDBL_REDIR(name, proto) \
   __LDBL_REDIR1 (name, proto, __nldbl_##name)
-#  define __LDBL_REDIR1_NTH(name, proto, alias) __REDIRECT_NTH (name, proto, alias)
+#  define __LDBL_REDIR1_NTH(name, proto, alias) __NANO_REDIRECT_NTH (name, proto, alias)
 #  define __LDBL_REDIR_NTH(name, proto) \
   __LDBL_REDIR1_NTH (name, proto, __nldbl_##name)
 #  define __LDBL_REDIR1_DECL(name, alias) \
-  extern __typeof (name) name __asm (__ASMNAME (#alias));
+  extern __typeof (name) name __asm (__NANO_ASMNAME (#alias));
 #  define __LDBL_REDIR_DECL(name) \
-  extern __typeof (name) name __asm (__ASMNAME ("__nldbl_" #name));
-#  define __REDIRECT_LDBL(name, proto, alias) \
+  extern __typeof (name) name __asm (__NANO_ASMNAME ("__nldbl_" #name));
+#  define __NANO_REDIRECT_LDBL(name, proto, alias) \
   __LDBL_REDIR1 (name, proto, __nldbl_##alias)
-#  define __REDIRECT_NTH_LDBL(name, proto, alias) \
+#  define __NANO_REDIRECT_NTH_LDBL(name, proto, alias) \
   __LDBL_REDIR1_NTH (name, proto, __nldbl_##alias)
 # endif
 #endif
-#if !defined __LDBL_COMPAT || !defined __REDIRECT
+#if !defined __LDBL_COMPAT || !defined __NANO_REDIRECT
 # define __LDBL_REDIR1(name, proto, alias) name proto
 # define __LDBL_REDIR(name, proto) name proto
-# define __LDBL_REDIR1_NTH(name, proto, alias) name proto __THROW
-# define __LDBL_REDIR_NTH(name, proto) name proto __THROW
+# define __LDBL_REDIR1_NTH(name, proto, alias) name proto __NANO_THROW
+# define __LDBL_REDIR_NTH(name, proto) name proto __NANO_THROW
 # define __LDBL_REDIR_DECL(name)
-# ifdef __REDIRECT
-#  define __REDIRECT_LDBL(name, proto, alias) __REDIRECT (name, proto, alias)
-#  define __REDIRECT_NTH_LDBL(name, proto, alias) \
-  __REDIRECT_NTH (name, proto, alias)
+# ifdef __NANO_REDIRECT
+#  define __NANO_REDIRECT_LDBL(name, proto, alias) __NANO_REDIRECT (name, proto, alias)
+#  define __NANO_REDIRECT_NTH_LDBL(name, proto, alias) \
+  __NANO_REDIRECT_NTH (name, proto, alias)
 # endif
 #endif
 
diff -Naur nano-4.4-orig/lib/fnmatch.c nano-4.4/lib/fnmatch.c
--- nano-4.4-orig/lib/fnmatch.c	2019-08-25 10:52:51.000000000 +0200
+++ nano-4.4/lib/fnmatch.c	2019-09-08 12:12:58.660319400 +0200
@@ -53,7 +53,7 @@
 # include "../locale/coll-lookup.h"
 # include <shlib-compat.h>
 
-# define CONCAT(a,b) __CONCAT(a,b)
+# define CONCAT(a,b) __NANO_CONCAT(a,b)
 # define mbsrtowcs __mbsrtowcs
 # define fnmatch __fnmatch
 extern int fnmatch (const char *pattern, const char *string, int flags);
diff -Naur nano-4.4-orig/lib/getopt-cdefs.in.h nano-4.4/lib/getopt-cdefs.in.h
--- nano-4.4-orig/lib/getopt-cdefs.in.h	2019-08-25 10:52:51.000000000 +0200
+++ nano-4.4/lib/getopt-cdefs.in.h	2019-09-08 12:14:18.203871700 +0200
@@ -32,18 +32,18 @@
 # include <sys/cdefs.h>
 #endif
 
-#ifndef __BEGIN_DECLS
+#ifndef __NANO_BEGIN_DECLS
 # ifdef __cplusplus
-#  define __BEGIN_DECLS extern "C" {
+#  define __NANO_BEGIN_DECLS extern "C" {
 # else
-#  define __BEGIN_DECLS /* nothing */
+#  define __NANO_BEGIN_DECLS /* nothing */
 # endif
 #endif
-#ifndef __END_DECLS
+#ifndef __NANO_END_DECLS
 # ifdef __cplusplus
-#  define __END_DECLS }
+#  define __NANO_END_DECLS }
 # else
-#  define __END_DECLS /* nothing */
+#  define __NANO_END_DECLS /* nothing */
 # endif
 #endif
 
@@ -56,11 +56,11 @@
 # endif
 #endif
 
-#ifndef __THROW
+#ifndef __NANO_THROW
 # if defined __cplusplus && __GNUC_PREREQ (2,8)
-#  define __THROW       throw ()
+#  define __NANO_THROW       throw ()
 # else
-#  define __THROW
+#  define __NANO_THROW
 # endif
 #endif
 
diff -Naur nano-4.4-orig/lib/getopt-core.h nano-4.4/lib/getopt-core.h
--- nano-4.4-orig/lib/getopt-core.h	2019-08-25 10:52:51.000000000 +0200
+++ nano-4.4/lib/getopt-core.h	2019-09-08 12:14:18.200878100 +0200
@@ -25,7 +25,7 @@
    a protective #error, because the guard macro for getopt.h in
    gnulib is not fixed.  */
 
-__BEGIN_DECLS
+__NANO_BEGIN_DECLS
 
 /* For communication from 'getopt' to the caller.
    When 'getopt' finds an option that takes an argument,
@@ -89,8 +89,8 @@
    writable.  */
 
 extern int getopt (int ___argc, char *const *___argv, const char *__shortopts)
-       __THROW _GL_ARG_NONNULL ((2, 3));
+       __NANO_THROW _GL_ARG_NONNULL ((2, 3));
 
-__END_DECLS
+__NANO_END_DECLS
 
 #endif /* _GETOPT_CORE_H */
diff -Naur nano-4.4-orig/lib/getopt-ext.h nano-4.4/lib/getopt-ext.h
--- nano-4.4-orig/lib/getopt-ext.h	2019-08-25 10:52:51.000000000 +0200
+++ nano-4.4/lib/getopt-ext.h	2019-09-08 12:14:18.202875100 +0200
@@ -24,7 +24,7 @@
    Unlike most bits headers, it does not have a protective #error,
    because the guard macro for getopt.h in gnulib is not fixed.  */
 
-__BEGIN_DECLS
+__NANO_BEGIN_DECLS
 
 /* Describe the long-named options requested by the application.
    The LONG_OPTIONS argument to getopt_long or getopt_long_only is a vector
@@ -66,12 +66,12 @@
 extern int getopt_long (int ___argc, char *__getopt_argv_const *___argv,
 			const char *__shortopts,
 		        const struct option *__longopts, int *__longind)
-       __THROW _GL_ARG_NONNULL ((2, 3));
+       __NANO_THROW _GL_ARG_NONNULL ((2, 3));
 extern int getopt_long_only (int ___argc, char *__getopt_argv_const *___argv,
 			     const char *__shortopts,
 		             const struct option *__longopts, int *__longind)
-       __THROW _GL_ARG_NONNULL ((2, 3));
+       __NANO_THROW _GL_ARG_NONNULL ((2, 3));
 
-__END_DECLS
+__NANO_END_DECLS
 
 #endif /* _GETOPT_EXT_H */
diff -Naur nano-4.4-orig/lib/glob-libc.h nano-4.4/lib/glob-libc.h
--- nano-4.4-orig/lib/glob-libc.h	2019-08-25 10:52:52.000000000 +0200
+++ nano-4.4/lib/glob-libc.h	2019-09-08 12:14:18.205867300 +0200
@@ -22,7 +22,7 @@
 # include <sys/cdefs.h>
 #endif
 
-__BEGIN_DECLS
+__NANO_BEGIN_DECLS
 
 #define __need_size_t
 #include <stddef.h>
@@ -137,25 +137,25 @@
 #if !defined __USE_FILE_OFFSET64 || defined __GLOB_GNULIB
 extern int glob (const char *__restrict __pattern, int __flags,
                  int (*__errfunc) (const char *, int),
-                 glob_t *__restrict __pglob) __THROW;
+                 glob_t *__restrict __pglob) __NANO_THROW;
 
 /* Free storage allocated in PGLOB by a previous 'glob' call.  */
-extern void globfree (glob_t *__pglob) __THROW;
+extern void globfree (glob_t *__pglob) __NANO_THROW;
 #else
-extern int __REDIRECT_NTH (glob, (const char *__restrict __pattern,
+extern int __NANO_REDIRECT_NTH (glob, (const char *__restrict __pattern,
                                   int __flags,
                                   int (*__errfunc) (const char *, int),
                                   glob_t *__restrict __pglob), glob64);
 
-extern void __REDIRECT_NTH (globfree, (glob_t *__pglob), globfree64);
+extern void __NANO_REDIRECT_NTH (globfree, (glob_t *__pglob), globfree64);
 #endif
 
 #ifdef __USE_LARGEFILE64
 extern int glob64 (const char *__restrict __pattern, int __flags,
                    int (*__errfunc) (const char *, int),
-                   glob64_t *__restrict __pglob) __THROW;
+                   glob64_t *__restrict __pglob) __NANO_THROW;
 
-extern void globfree64 (glob64_t *__pglob) __THROW;
+extern void globfree64 (glob64_t *__pglob) __NANO_THROW;
 #endif
 
 
@@ -165,9 +165,9 @@
 
    This function is not part of the interface specified by POSIX.2
    but several programs want to use it.  */
-extern int glob_pattern_p (const char *__pattern, int __quote) __THROW;
+extern int glob_pattern_p (const char *__pattern, int __quote) __NANO_THROW;
 #endif
 
-__END_DECLS
+__NANO_END_DECLS
 
 #endif /* glob.h  */
diff -Naur nano-4.4-orig/lib/glob.c nano-4.4/lib/glob.c
--- nano-4.4-orig/lib/glob.c	2019-08-25 10:52:52.000000000 +0200
+++ nano-4.4/lib/glob.c	2019-09-08 12:12:09.267782700 +0200
@@ -86,7 +86,7 @@
 #include <glob_internal.h>
 #include <scratch_buffer.h>
 
-static const char *next_brace_sub (const char *begin, int flags) __THROWNL;
+static const char *next_brace_sub (const char *begin, int flags) __NANO_THROWNL;
 
 /* The type of ((struct dirent *) 0)->d_type is 'unsigned char' on most
    platforms, but 'unsigned int' in the mingw from mingw.org.  */
@@ -217,8 +217,8 @@
 static int glob_in_dir (const char *pattern, const char *directory,
                         int flags, int (*errfunc) (const char *, int),
                         glob_t *pglob, size_t alloca_used);
-static int prefix_array (const char *prefix, char **array, size_t n) __THROWNL;
-static int collated_compare (const void *, const void *) __THROWNL;
+static int prefix_array (const char *prefix, char **array, size_t n) __NANO_THROWNL;
+static int collated_compare (const void *, const void *) __NANO_THROWNL;
 
 
 /* Return true if FILENAME is a directory or a symbolic link to a directory.
diff -Naur nano-4.4-orig/lib/libc-config.h nano-4.4/lib/libc-config.h
--- nano-4.4-orig/lib/libc-config.h	2019-08-25 10:52:52.000000000 +0200
+++ nano-4.4/lib/libc-config.h	2019-09-08 12:14:18.188757900 +0200
@@ -81,11 +81,11 @@
    <sys/cdefs.h>, so that they do not clash with any system-defined
    versions.  */
 #undef _SYS_CDEFS_H
-#undef __ASMNAME
-#undef __ASMNAME2
-#undef __BEGIN_DECLS
-#undef __CONCAT
-#undef __END_DECLS
+#undef __NANO_ASMNAME
+#undef __NANO_ASMNAME2
+#undef __NANO_BEGIN_DECLS
+#undef __NANO_CONCAT
+#undef __NANO_END_DECLS
 #undef __HAVE_GENERIC_SELECTION
 #undef __LDBL_COMPAT
 #undef __LDBL_REDIR
@@ -94,20 +94,20 @@
 #undef __LDBL_REDIR1_NTH
 #undef __LDBL_REDIR_DECL
 #undef __LDBL_REDIR_NTH
-#undef __LEAF
-#undef __LEAF_ATTR
-#undef __NTH
-#undef __NTHNL
-#undef __P
-#undef __PMT
-#undef __REDIRECT
-#undef __REDIRECT_LDBL
-#undef __REDIRECT_NTH
-#undef __REDIRECT_NTHNL
-#undef __REDIRECT_NTH_LDBL
-#undef __STRING
-#undef __THROW
-#undef __THROWNL
+#undef __NANO_LEAF
+#undef __NANO_LEAF_ATTR
+#undef __NANO_NTH
+#undef __NANO_NTHNL
+#undef __NANO_P
+#undef __NANO_PMT
+#undef __NANO_REDIRECT
+#undef __NANO_REDIRECT_LDBL
+#undef __NANO_REDIRECT_NTH
+#undef __NANO_REDIRECT_NTHNL
+#undef __NANO_REDIRECT_NTH_LDBL
+#undef __NANO_STRING
+#undef __NANO_THROW
+#undef __NANO_THROWNL
 #undef __always_inline
 #undef __attribute__
 #undef __attribute_alloc_size__
diff -Naur nano-4.4-orig/lib/stdio.in.h nano-4.4/lib/stdio.in.h
--- nano-4.4-orig/lib/stdio.in.h	2019-08-25 10:52:54.000000000 +0200
+++ nano-4.4/lib/stdio.in.h	2019-09-08 12:06:41.339212800 +0200
@@ -627,11 +627,11 @@
        && !defined __cplusplus)
 #   undef fwrite
 #   undef fwrite_unlocked
-extern size_t __REDIRECT (rpl_fwrite,
+extern size_t __NANO_REDIRECT (rpl_fwrite,
                           (const void *__restrict, size_t, size_t,
                            FILE *__restrict),
                           fwrite);
-extern size_t __REDIRECT (rpl_fwrite_unlocked,
+extern size_t __NANO_REDIRECT (rpl_fwrite_unlocked,
                           (const void *__restrict, size_t, size_t,
                            FILE *__restrict),
                           fwrite_unlocked);
