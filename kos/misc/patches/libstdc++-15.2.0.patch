diff -Naur 15.2.0-orig/bits/atomic_base.h 15.2.0/bits/atomic_base.h
--- 15.2.0-orig/bits/atomic_base.h	2025-08-24 15:44:46.282595000 +0200
+++ 15.2.0/bits/atomic_base.h	2025-08-24 15:44:49.050576000 +0200
@@ -1114,21 +1114,21 @@
     template<bool _AtomicRef = false, typename _Tp>
       _GLIBCXX_ALWAYS_INLINE bool
       compare_exchange_weak(_Tp* __ptr, _Val<_Tp>& __expected,
-			    _Val<_Tp> __desired, memory_order __success,
+			    _Val<_Tp> __desired, memory_order ___success,
 			    memory_order __failure) noexcept
       {
 	return __atomic_impl::__compare_exchange<_AtomicRef>(
-		   *__ptr, __expected, __desired, true, __success, __failure);
+		   *__ptr, __expected, __desired, true, ___success, __failure);
       }
 
     template<bool _AtomicRef = false, typename _Tp>
       _GLIBCXX_ALWAYS_INLINE bool
       compare_exchange_strong(_Tp* __ptr, _Val<_Tp>& __expected,
-			      _Val<_Tp> __desired, memory_order __success,
+			      _Val<_Tp> __desired, memory_order ___success,
 			      memory_order __failure) noexcept
       {
 	return __atomic_impl::__compare_exchange<_AtomicRef>(
-		   *__ptr, __expected, __desired, false, __success, __failure);
+		   *__ptr, __expected, __desired, false, ___success, __failure);
       }
 
 #if __glibcxx_atomic_wait
@@ -1373,42 +1373,42 @@
 
       bool
       compare_exchange_weak(_Fp& __expected, _Fp __desired,
-			    memory_order __success,
+			    memory_order ___success,
 			    memory_order __failure) noexcept
       {
 	return __atomic_impl::compare_exchange_weak(&_M_fp,
 						    __expected, __desired,
-						    __success, __failure);
+						    ___success, __failure);
       }
 
       bool
       compare_exchange_weak(_Fp& __expected, _Fp __desired,
-			    memory_order __success,
+			    memory_order ___success,
 			    memory_order __failure) volatile noexcept
       {
 	return __atomic_impl::compare_exchange_weak(&_M_fp,
 						    __expected, __desired,
-						    __success, __failure);
+						    ___success, __failure);
       }
 
       bool
       compare_exchange_strong(_Fp& __expected, _Fp __desired,
-			      memory_order __success,
+			      memory_order ___success,
 			      memory_order __failure) noexcept
       {
 	return __atomic_impl::compare_exchange_strong(&_M_fp,
 						      __expected, __desired,
-						      __success, __failure);
+						      ___success, __failure);
       }
 
       bool
       compare_exchange_strong(_Fp& __expected, _Fp __desired,
-			      memory_order __success,
+			      memory_order ___success,
 			      memory_order __failure) volatile noexcept
       {
 	return __atomic_impl::compare_exchange_strong(&_M_fp,
 						      __expected, __desired,
-						      __success, __failure);
+						      ___success, __failure);
       }
 
       bool
@@ -1571,20 +1571,20 @@
 
       bool
       compare_exchange_weak(_Tp& __expected, _Tp __desired,
-			    memory_order __success,
+			    memory_order ___success,
 			    memory_order __failure) const noexcept
       {
 	return __atomic_impl::compare_exchange_weak<true>(
-		 _M_ptr, __expected, __desired, __success, __failure);
+		 _M_ptr, __expected, __desired, ___success, __failure);
       }
 
       bool
       compare_exchange_strong(_Tp& __expected, _Tp __desired,
-			    memory_order __success,
+			    memory_order ___success,
 			    memory_order __failure) const noexcept
       {
 	return __atomic_impl::compare_exchange_strong<true>(
-		 _M_ptr, __expected, __desired, __success, __failure);
+		 _M_ptr, __expected, __desired, ___success, __failure);
       }
 
       bool
@@ -1686,20 +1686,20 @@
 
       bool
       compare_exchange_weak(_Tp& __expected, _Tp __desired,
-			    memory_order __success,
+			    memory_order ___success,
 			    memory_order __failure) const noexcept
       {
 	return __atomic_impl::compare_exchange_weak<true>(
-		 _M_ptr, __expected, __desired, __success, __failure);
+		 _M_ptr, __expected, __desired, ___success, __failure);
       }
 
       bool
       compare_exchange_strong(_Tp& __expected, _Tp __desired,
-			      memory_order __success,
+			      memory_order ___success,
 			      memory_order __failure) const noexcept
       {
 	return __atomic_impl::compare_exchange_strong<true>(
-		 _M_ptr, __expected, __desired, __success, __failure);
+		 _M_ptr, __expected, __desired, ___success, __failure);
       }
 
       bool
@@ -1861,20 +1861,20 @@
 
       bool
       compare_exchange_weak(_Fp& __expected, _Fp __desired,
-			    memory_order __success,
+			    memory_order ___success,
 			    memory_order __failure) const noexcept
       {
 	return __atomic_impl::compare_exchange_weak<true>(
-		 _M_ptr, __expected, __desired, __success, __failure);
+		 _M_ptr, __expected, __desired, ___success, __failure);
       }
 
       bool
       compare_exchange_strong(_Fp& __expected, _Fp __desired,
-			      memory_order __success,
+			      memory_order ___success,
 			      memory_order __failure) const noexcept
       {
 	return __atomic_impl::compare_exchange_strong<true>(
-		 _M_ptr, __expected, __desired, __success, __failure);
+		 _M_ptr, __expected, __desired, ___success, __failure);
       }
 
       bool
@@ -1990,20 +1990,20 @@
 
       bool
       compare_exchange_weak(_Tp*& __expected, _Tp* __desired,
-			    memory_order __success,
+			    memory_order ___success,
 			    memory_order __failure) const noexcept
       {
 	return __atomic_impl::compare_exchange_weak<true>(
-		 _M_ptr, __expected, __desired, __success, __failure);
+		 _M_ptr, __expected, __desired, ___success, __failure);
       }
 
       bool
       compare_exchange_strong(_Tp*& __expected, _Tp* __desired,
-			    memory_order __success,
+			    memory_order ___success,
 			    memory_order __failure) const noexcept
       {
 	return __atomic_impl::compare_exchange_strong<true>(
-		 _M_ptr, __expected, __desired, __success, __failure);
+		 _M_ptr, __expected, __desired, ___success, __failure);
       }
 
       bool
diff -Naur 15.2.0-orig/bits/basic_string.h 15.2.0/bits/basic_string.h
--- 15.2.0-orig/bits/basic_string.h	2025-08-24 15:44:46.300153200 +0200
+++ 15.2.0/bits/basic_string.h	2025-08-24 15:44:49.108547200 +0200
@@ -4426,13 +4426,13 @@
 
   template<>
     basic_istream<char>&
-    getline(basic_istream<char>& __in, basic_string<char>& __str,
+    getline(basic_istream<char>& ___in, basic_string<char>& __str,
 	    char __delim);
 
 #ifdef _GLIBCXX_USE_WCHAR_T
   template<>
     basic_istream<wchar_t>&
-    getline(basic_istream<wchar_t>& __in, basic_string<wchar_t>& __str,
+    getline(basic_istream<wchar_t>& ___in, basic_string<wchar_t>& __str,
 	    wchar_t __delim);
 #endif
 
diff -Naur 15.2.0-orig/bits/basic_string.tcc 15.2.0/bits/basic_string.tcc
--- 15.2.0-orig/bits/basic_string.tcc	2025-08-24 15:44:46.300153200 +0200
+++ 15.2.0/bits/basic_string.tcc	2025-08-24 15:44:49.136374700 +0200
@@ -863,7 +863,7 @@
   // 21.3.7.9 basic_string::getline and operators
   template<typename _CharT, typename _Traits, typename _Alloc>
     basic_istream<_CharT, _Traits>&
-    operator>>(basic_istream<_CharT, _Traits>& __in,
+    operator>>(basic_istream<_CharT, _Traits>& ___in,
 	       basic_string<_CharT, _Traits, _Alloc>& __str)
     {
       typedef basic_istream<_CharT, _Traits>		__istream_type;
@@ -876,7 +876,7 @@
 
       __size_type __extracted = 0;
       typename __ios_base::iostate __err = __ios_base::goodbit;
-      typename __istream_type::sentry __cerb(__in, false);
+      typename __istream_type::sentry __cerb(___in, false);
       if (__cerb)
 	{
 	  __try
@@ -885,12 +885,12 @@
 	      __str.erase();
 	      _CharT __buf[128];
 	      __size_type __len = 0;	      
-	      const streamsize __w = __in.width();
+	      const streamsize __w = ___in.width();
 	      const __size_type __n = __w > 0 ? static_cast<__size_type>(__w)
 		                              : __str.max_size();
-	      const __ctype_type& __ct = use_facet<__ctype_type>(__in.getloc());
+	      const __ctype_type& __ct = use_facet<__ctype_type>(___in.getloc());
 	      const __int_type __eof = _Traits::eof();
-	      __int_type __c = __in.rdbuf()->sgetc();
+	      __int_type __c = ___in.rdbuf()->sgetc();
 
 	      while (__extracted < __n
 		     && !_Traits::eq_int_type(__c, __eof)
@@ -904,17 +904,17 @@
 		    }
 		  __buf[__len++] = _Traits::to_char_type(__c);
 		  ++__extracted;
-		  __c = __in.rdbuf()->snextc();
+		  __c = ___in.rdbuf()->snextc();
 		}
 	      __str.append(__buf, __len);
 
 	      if (__extracted < __n && _Traits::eq_int_type(__c, __eof))
 		__err |= __ios_base::eofbit;
-	      __in.width(0);
+	      ___in.width(0);
 	    }
 	  __catch(__cxxabiv1::__forced_unwind&)
 	    {
-	      __in._M_setstate(__ios_base::badbit);
+	      ___in._M_setstate(__ios_base::badbit);
 	      __throw_exception_again;
 	    }
 	  __catch(...)
@@ -922,20 +922,20 @@
 	      // _GLIBCXX_RESOLVE_LIB_DEFECTS
 	      // 91. Description of operator>> and getline() for string<>
 	      // might cause endless loop
-	      __in._M_setstate(__ios_base::badbit);
+	      ___in._M_setstate(__ios_base::badbit);
 	    }
 	}
       // 211.  operator>>(istream&, string&) doesn't set failbit
       if (!__extracted)
 	__err |= __ios_base::failbit;
       if (__err)
-	__in.setstate(__err);
-      return __in;
+	___in.setstate(__err);
+      return ___in;
     }
 
   template<typename _CharT, typename _Traits, typename _Alloc>
     basic_istream<_CharT, _Traits>&
-    getline(basic_istream<_CharT, _Traits>& __in,
+    getline(basic_istream<_CharT, _Traits>& ___in,
 	    basic_string<_CharT, _Traits, _Alloc>& __str, _CharT __delim)
     {
       typedef basic_istream<_CharT, _Traits>		__istream_type;
@@ -947,7 +947,7 @@
       __size_type __extracted = 0;
       const __size_type __n = __str.max_size();
       typename __ios_base::iostate __err = __ios_base::goodbit;
-      typename __istream_type::sentry __cerb(__in, true);
+      typename __istream_type::sentry __cerb(___in, true);
       if (__cerb)
 	{
 	  __try
@@ -955,7 +955,7 @@
 	      __str.erase();
 	      const __int_type __idelim = _Traits::to_int_type(__delim);
 	      const __int_type __eof = _Traits::eof();
-	      __int_type __c = __in.rdbuf()->sgetc();
+	      __int_type __c = ___in.rdbuf()->sgetc();
 
 	      while (__extracted < __n
 		     && !_Traits::eq_int_type(__c, __eof)
@@ -963,7 +963,7 @@
 		{
 		  __str += _Traits::to_char_type(__c);
 		  ++__extracted;
-		  __c = __in.rdbuf()->snextc();
+		  __c = ___in.rdbuf()->snextc();
 		}
 
 	      if (_Traits::eq_int_type(__c, __eof))
@@ -971,14 +971,14 @@
 	      else if (_Traits::eq_int_type(__c, __idelim))
 		{
 		  ++__extracted;		  
-		  __in.rdbuf()->sbumpc();
+		  ___in.rdbuf()->sbumpc();
 		}
 	      else
 		__err |= __ios_base::failbit;
 	    }
 	  __catch(__cxxabiv1::__forced_unwind&)
 	    {
-	      __in._M_setstate(__ios_base::badbit);
+	      ___in._M_setstate(__ios_base::badbit);
 	      __throw_exception_again;
 	    }
 	  __catch(...)
@@ -986,14 +986,14 @@
 	      // _GLIBCXX_RESOLVE_LIB_DEFECTS
 	      // 91. Description of operator>> and getline() for string<>
 	      // might cause endless loop
-	      __in._M_setstate(__ios_base::badbit);
+	      ___in._M_setstate(__ios_base::badbit);
 	    }
 	}
       if (!__extracted)
 	__err |= __ios_base::failbit;
       if (__err)
-	__in.setstate(__err);
-      return __in;
+	___in.setstate(__err);
+      return ___in;
     }
 
   // Inhibit implicit instantiations for required instantiations,
diff -Naur 15.2.0-orig/bits/chrono_io.h 15.2.0/bits/chrono_io.h
--- 15.2.0-orig/bits/chrono_io.h	2025-08-24 15:44:46.300153200 +0200
+++ 15.2.0/bits/chrono_io.h	2025-08-24 15:44:49.235771700 +0200
@@ -105,15 +105,15 @@
 
   template<typename _Period, typename _CharT, typename _Out>
     inline _Out
-    __fmt_units_suffix(_Out __out) noexcept
+    __fmt_units_suffix(_Out ___out) noexcept
     {
       if (auto __s = __detail::__units_suffix<_Period, _CharT>(); __s.size())
-	return __format::__write(std::move(__out), __s);
+	return __format::__write(std::move(___out), __s);
       else if constexpr (_Period::den == 1)
-	return std::format_to(std::move(__out), _GLIBCXX_WIDEN("[{}]s"),
+	return std::format_to(std::move(___out), _GLIBCXX_WIDEN("[{}]s"),
 			      (uintmax_t)_Period::num);
       else
-	return std::format_to(std::move(__out), _GLIBCXX_WIDEN("[{}/{}]s"),
+	return std::format_to(std::move(___out), _GLIBCXX_WIDEN("[{}/{}]s"),
 			      (uintmax_t)_Period::num,
 			      (uintmax_t)_Period::den);
     }
@@ -526,7 +526,7 @@
 		}
 #endif
 
-	  _Sink_iter<_CharT> __out;
+	  _Sink_iter<_CharT> ___out;
 	  __format::_Str_sink<_CharT> __sink;
 	  bool __write_direct = false;
 	  if constexpr (is_same_v<typename _FormatContext::iterator,
@@ -534,29 +534,29 @@
 	    {
 	      if (_M_spec._M_width_kind == __format::_WP_none)
 		{
-		  __out = __fc.out();
+		  ___out = __fc.out();
 		  __write_direct = true;
 		}
 	      else
-		__out = __sink.out();
+		___out = __sink.out();
 	    }
 	  else
-	    __out = __sink.out();
+	    ___out = __sink.out();
 
 	  // formatter<duration> passes the correct value of __is_neg
 	  // for durations but for hh_mm_ss we decide it here.
 	  if constexpr (__is_specialization_of<_Tp, chrono::hh_mm_ss>)
 	    __is_neg = __t.is_negative();
 
-	  auto __print_sign = [&__is_neg, &__out] {
+	  auto __print_sign = [&__is_neg, &___out] {
 	    if constexpr (chrono::__is_duration_v<_Tp>
 			    || __is_specialization_of<_Tp, chrono::hh_mm_ss>)
 	      if (__is_neg)
 		{
-		  *__out++ = _S_plus_minus[1];
+		  *___out++ = _S_plus_minus[1];
 		  __is_neg = false;
 		}
-	    return std::move(__out);
+	    return std::move(___out);
 	  };
 
 	  // Characters to output for "%n", "%t" and "%%" specifiers.
@@ -572,63 +572,63 @@
 		{
 		case 'a':
 		case 'A':
-		  __out = _M_a_A(__t, std::move(__out), __fc, __c == 'A');
+		  ___out = _M_a_A(__t, std::move(___out), __fc, __c == 'A');
 		  break;
 		case 'b':
 		case 'h':
 		case 'B':
-		  __out = _M_b_B(__t, std::move(__out), __fc, __c == 'B');
+		  ___out = _M_b_B(__t, std::move(___out), __fc, __c == 'B');
 		  break;
 		case 'c':
 		case 'r':
 		case 'x':
 		case 'X':
-		  __out = _M_c_r_x_X(__t, std::move(__out), __fc, __c, __mod);
+		  ___out = _M_c_r_x_X(__t, std::move(___out), __fc, __c, __mod);
 		  break;
 		case 'C':
 		case 'y':
 		case 'Y':
-		  __out = _M_C_y_Y(__t, std::move(__out), __fc, __c, __mod);
+		  ___out = _M_C_y_Y(__t, std::move(___out), __fc, __c, __mod);
 		  break;
 		case 'd':
 		case 'e':
-		  __out = _M_d_e(__t, std::move(__out), __fc, __c, __mod == 'O');
+		  ___out = _M_d_e(__t, std::move(___out), __fc, __c, __mod == 'O');
 		  break;
 		case 'D':
-		  __out = _M_D(__t, std::move(__out), __fc);
+		  ___out = _M_D(__t, std::move(___out), __fc);
 		  break;
 		case 'F':
-		  __out = _M_F(__t, std::move(__out), __fc);
+		  ___out = _M_F(__t, std::move(___out), __fc);
 		  break;
 		case 'g':
 		case 'G':
-		  __out = _M_g_G(__t, std::move(__out), __fc, __c == 'G');
+		  ___out = _M_g_G(__t, std::move(___out), __fc, __c == 'G');
 		  break;
 		case 'H':
 		case 'I':
-		  __out = _M_H_I(__t, __print_sign(), __fc, __c, __mod == 'O');
+		  ___out = _M_H_I(__t, __print_sign(), __fc, __c, __mod == 'O');
 		  break;
 		case 'j':
-		  __out = _M_j(__t, __print_sign(), __fc);
+		  ___out = _M_j(__t, __print_sign(), __fc);
 		  break;
 		case 'm':
-		  __out = _M_m(__t, std::move(__out), __fc, __mod == 'O');
+		  ___out = _M_m(__t, std::move(___out), __fc, __mod == 'O');
 		  break;
 		case 'M':
-		  __out = _M_M(__t, __print_sign(), __fc, __mod == 'O');
+		  ___out = _M_M(__t, __print_sign(), __fc, __mod == 'O');
 		  break;
 		case 'p':
-		  __out = _M_p(__t, std::move(__out), __fc);
+		  ___out = _M_p(__t, std::move(___out), __fc);
 		  break;
 		case 'q':
-		  __out = _M_q(__t, std::move(__out), __fc);
+		  ___out = _M_q(__t, std::move(___out), __fc);
 		  break;
 		case 'Q':
 		  // %Q The duration's numeric value.
 		  if constexpr (chrono::__is_duration_v<_Tp>)
 		    // _GLIBCXX_RESOLVE_LIB_DEFECTS
 		    // 4118. How should duration formatters format custom rep?
-		    __out = std::format_to(__print_sign(), _S_empty_spec,
+		    ___out = std::format_to(__print_sign(), _S_empty_spec,
 					   +__t.count());
 		  else
 		    __throw_format_error("chrono format error: argument is "
@@ -636,35 +636,35 @@
 		  break;
 		case 'R':
 		case 'T':
-		  __out = _M_R_T(__t, __print_sign(), __fc, __c == 'T');
+		  ___out = _M_R_T(__t, __print_sign(), __fc, __c == 'T');
 		  break;
 		case 'S':
-		  __out = _M_S(__t, __print_sign(), __fc, __mod == 'O');
+		  ___out = _M_S(__t, __print_sign(), __fc, __mod == 'O');
 		  break;
 		case 'u':
 		case 'w':
-		  __out = _M_u_w(__t, std::move(__out), __fc, __c, __mod == 'O');
+		  ___out = _M_u_w(__t, std::move(___out), __fc, __c, __mod == 'O');
 		  break;
 		case 'U':
 		case 'V':
 		case 'W':
-		  __out = _M_U_V_W(__t, std::move(__out), __fc, __c,
+		  ___out = _M_U_V_W(__t, std::move(___out), __fc, __c,
 				   __mod == 'O');
 		  break;
 		case 'z':
-		  __out = _M_z(__t, std::move(__out), __fc, (bool)__mod);
+		  ___out = _M_z(__t, std::move(___out), __fc, (bool)__mod);
 		  break;
 		case 'Z':
-		  __out = _M_Z(__t, std::move(__out), __fc);
+		  ___out = _M_Z(__t, std::move(___out), __fc);
 		  break;
 		case 'n':
-		  *__out++ = __literals[0];
+		  *___out++ = __literals[0];
 		  break;
 		case 't':
-		  *__out++ = __literals[1];
+		  *___out++ = __literals[1];
 		  break;
 		case '%':
-		  *__out++ = __literals[2];
+		  *___out++ = __literals[2];
 		  break;
 		case 'O':
 		case 'E':
@@ -689,7 +689,7 @@
 		      __str.remove_suffix(__str.length() - __pos);
 		      __first += __pos + 1;
 		    }
-		  __out = __format::__write(std::move(__out), __str);
+		  ___out = __format::__write(std::move(___out), __str);
 		}
 	    }
 	  while (__first != __last);
@@ -697,7 +697,7 @@
 	  if constexpr (is_same_v<typename _FormatContext::iterator,
 				  _Sink_iter<_CharT>>)
 	    if (__write_direct)
-	      return __out;
+	      return ___out;
 
 	  auto __span = __sink.view();
 	  __string_view __str(__span.data(), __span.size());
@@ -810,7 +810,7 @@
 
       template<typename _OutIter>
 	_OutIter
-	_M_write(_OutIter __out, const locale& __loc, __string_view __s) const
+	_M_write(_OutIter ___out, const locale& __loc, __string_view __s) const
 	{
 #if defined _GLIBCXX_USE_NL_LANGINFO_L && __CHAR_BIT__ == 8
 	  __sso_string __buf;
@@ -828,12 +828,12 @@
 		  __s = __locale_encoding_to_utf8(__loc, __s, &__buf);
 		}
 #endif
-	  return __format::__write(std::move(__out), __s);
+	  return __format::__write(std::move(___out), __s);
 	}
 
       template<typename _Tp, typename _FormatContext>
 	typename _FormatContext::iterator
-	_M_a_A(const _Tp& __t, typename _FormatContext::iterator __out,
+	_M_a_A(const _Tp& __t, typename _FormatContext::iterator ___out,
 	       _FormatContext& __ctx, bool __full) const
 	{
 	  // %a Locale's abbreviated weekday name.
@@ -850,12 +850,12 @@
 	  else
 	    __tp._M_days_abbreviated(__days);
 	  __string_view __str(__days[__wd.c_encoding()]);
-	  return _M_write(std::move(__out), __loc, __str);
+	  return _M_write(std::move(___out), __loc, __str);
 	}
 
       template<typename _Tp, typename _FormatContext>
 	typename _FormatContext::iterator
-	_M_b_B(const _Tp& __t, typename _FormatContext::iterator __out,
+	_M_b_B(const _Tp& __t, typename _FormatContext::iterator ___out,
 	       _FormatContext& __ctx, bool __full) const
 	{
 	  // %b Locale's abbreviated month name.
@@ -871,12 +871,12 @@
 	  else
 	    __tp._M_months_abbreviated(__months);
 	  __string_view __str(__months[(unsigned)__m - 1]);
-	  return _M_write(std::move(__out), __loc, __str);
+	  return _M_write(std::move(___out), __loc, __str);
 	}
 
       template<typename _Tp, typename _FormatContext>
 	typename _FormatContext::iterator
-	_M_c_r_x_X(const _Tp& __t, typename _FormatContext::iterator __out,
+	_M_c_r_x_X(const _Tp& __t, typename _FormatContext::iterator ___out,
 		   _FormatContext& __ctx, _CharT __conv, _CharT __mod) const
 	{
 	  // %c  Locale's date and time representation.
@@ -941,13 +941,13 @@
 	    __tm.tm_sec = __hms.seconds().count();
 	  }
 
-	  return _M_locale_fmt(std::move(__out), _M_locale(__ctx), __tm,
+	  return _M_locale_fmt(std::move(___out), _M_locale(__ctx), __tm,
 			       __conv, __mod);
 	}
 
       template<typename _Tp, typename _FormatContext>
 	typename _FormatContext::iterator
-	_M_C_y_Y(const _Tp& __t, typename _FormatContext::iterator __out,
+	_M_C_y_Y(const _Tp& __t, typename _FormatContext::iterator ___out,
 	       _FormatContext& __ctx, _CharT __conv, _CharT __mod = 0) const
 	{
 	  // %C  Year divided by 100 using floored division.
@@ -965,7 +965,7 @@
 	      {
 		struct tm __tm{};
 		__tm.tm_year = (int)__y - 1900;
-		return _M_locale_fmt(std::move(__out), __loc, __tm,
+		return _M_locale_fmt(std::move(___out), __loc, __tm,
 				     __conv, __mod);
 	      }
 
@@ -995,12 +995,12 @@
 	  if (__conv == 'Y' || __conv == 'y')
 	    __s += _S_two_digits(__yi % 100);
 
-	  return __format::__write(std::move(__out), __string_view(__s));
+	  return __format::__write(std::move(___out), __string_view(__s));
 	}
 
       template<typename _Tp, typename _FormatContext>
 	typename _FormatContext::iterator
-	_M_D(const _Tp& __t, typename _FormatContext::iterator __out,
+	_M_D(const _Tp& __t, typename _FormatContext::iterator ___out,
 	     _FormatContext&) const
 	{
 	  auto __ymd = _S_date(__t);
@@ -1013,12 +1013,12 @@
 	  __s += _S_two_digits((unsigned)__ymd.day());
 	  __s += _S_slash;
 	  __s += _S_two_digits(__builtin_abs((int)__ymd.year()) % 100);
-	  return __format::__write(std::move(__out), __string_view(__s));
+	  return __format::__write(std::move(___out), __string_view(__s));
 	}
 
       template<typename _Tp, typename _FormatContext>
 	typename _FormatContext::iterator
-	_M_d_e(const _Tp& __t, typename _FormatContext::iterator __out,
+	_M_d_e(const _Tp& __t, typename _FormatContext::iterator ___out,
 	       _FormatContext& __ctx, _CharT __conv, bool __mod = false) const
 	{
 	  // %d  The day of month as a decimal number.
@@ -1034,7 +1034,7 @@
 	      {
 		struct tm __tm{};
 		__tm.tm_mday = __i;
-		return _M_locale_fmt(std::move(__out), __loc, __tm,
+		return _M_locale_fmt(std::move(___out), __loc, __tm,
 				     (char)__conv, 'O');
 	      }
 
@@ -1046,12 +1046,12 @@
 	      __buf[1] = __sv[1];
 	      __sv = {__buf, 2};
 	    }
-	  return __format::__write(std::move(__out), __sv);
+	  return __format::__write(std::move(___out), __sv);
 	}
 
       template<typename _Tp, typename _FormatContext>
 	typename _FormatContext::iterator
-	_M_F(const _Tp& __t, typename _FormatContext::iterator __out,
+	_M_F(const _Tp& __t, typename _FormatContext::iterator ___out,
 	     _FormatContext&) const
 	{
 	  auto __ymd = _S_date(__t);
@@ -1064,12 +1064,12 @@
 	  __s[__s.size() - 2] = __sv[0];
 	  __s[__s.size() - 1] = __sv[1];
 	  __sv = __s;
-	  return __format::__write(std::move(__out), __sv);
+	  return __format::__write(std::move(___out), __sv);
 	}
 
       template<typename _Tp, typename _FormatContext>
 	typename _FormatContext::iterator
-	_M_g_G(const _Tp& __t, typename _FormatContext::iterator __out,
+	_M_g_G(const _Tp& __t, typename _FormatContext::iterator ___out,
 	     _FormatContext& __ctx, bool __full) const
 	{
 	  // %g last two decimal digits of the ISO week-based year.
@@ -1080,12 +1080,12 @@
 	  __d -= (weekday(__d) - Monday) - days(3);
 	  // ISO week-based year is the year that contains that Thursday:
 	  year __y = year_month_day(__d).year();
-	  return _M_C_y_Y(__y, std::move(__out), __ctx, "yY"[__full]);
+	  return _M_C_y_Y(__y, std::move(___out), __ctx, "yY"[__full]);
 	}
 
       template<typename _Tp, typename _FormatContext>
 	typename _FormatContext::iterator
-	_M_H_I(const _Tp& __t, typename _FormatContext::iterator __out,
+	_M_H_I(const _Tp& __t, typename _FormatContext::iterator ___out,
 	       _FormatContext& __ctx, _CharT __conv, bool __mod = false) const
 	{
 	  // %H  The hour (24-hour clock) as a decimal number.
@@ -1101,7 +1101,7 @@
 	      {
 		struct tm __tm{};
 		__tm.tm_hour = __i;
-		return _M_locale_fmt(std::move(__out), __loc, __tm,
+		return _M_locale_fmt(std::move(___out), __loc, __tm,
 				     (char)__conv, 'O');
 	      }
 
@@ -1112,19 +1112,19 @@
 	      else if (__i > 12)
 		__i -= 12;
 	    }
-	  return __format::__write(std::move(__out), _S_two_digits(__i));
+	  return __format::__write(std::move(___out), _S_two_digits(__i));
 	}
 
       template<typename _Tp, typename _FormatContext>
 	typename _FormatContext::iterator
-	_M_j(const _Tp& __t, typename _FormatContext::iterator __out,
+	_M_j(const _Tp& __t, typename _FormatContext::iterator ___out,
 	     _FormatContext&) const
 	{
 	  if constexpr (chrono::__is_duration_v<_Tp>)
 	    {
 	      // Decimal number of days, without padding.
 	      unsigned __d = chrono::duration_cast<chrono::days>(__t).count();
-	      return std::format_to(std::move(__out), _S_empty_spec, __d);
+	      return std::format_to(std::move(___out), _S_empty_spec, __d);
 	    }
 	  else
 	    {
@@ -1139,14 +1139,14 @@
 		__d = __day - local_days(__ymd.year()/January/0);
 	      else
 		__d = __day - sys_days(__ymd.year()/January/0);
-	      return std::format_to(std::move(__out), _GLIBCXX_WIDEN("{:03d}"),
+	      return std::format_to(std::move(___out), _GLIBCXX_WIDEN("{:03d}"),
 				    __d.count());
 	    }
 	}
 
       template<typename _Tp, typename _FormatContext>
 	typename _FormatContext::iterator
-	_M_m(const _Tp& __t, typename _FormatContext::iterator __out,
+	_M_m(const _Tp& __t, typename _FormatContext::iterator ___out,
 	     _FormatContext& __ctx, bool __mod) const
 	{
 	  // %m  month as a decimal number.
@@ -1160,16 +1160,16 @@
 	      {
 		struct tm __tm{};
 		__tm.tm_mon = __i - 1;
-		return _M_locale_fmt(std::move(__out), __loc, __tm,
+		return _M_locale_fmt(std::move(___out), __loc, __tm,
 				     'm', 'O');
 	      }
 
-	  return __format::__write(std::move(__out), _S_two_digits(__i));
+	  return __format::__write(std::move(___out), _S_two_digits(__i));
 	}
 
       template<typename _Tp, typename _FormatContext>
 	typename _FormatContext::iterator
-	_M_M(const _Tp& __t, typename _FormatContext::iterator __out,
+	_M_M(const _Tp& __t, typename _FormatContext::iterator ___out,
 	     _FormatContext& __ctx, bool __mod) const
 	{
 	  // %M  The minute as a decimal number.
@@ -1183,16 +1183,16 @@
 	      {
 		struct tm __tm{};
 		__tm.tm_min = __i;
-		return _M_locale_fmt(std::move(__out), __loc, __tm,
+		return _M_locale_fmt(std::move(___out), __loc, __tm,
 				     'M', 'O');
 	      }
 
-	  return __format::__write(std::move(__out), _S_two_digits(__i));
+	  return __format::__write(std::move(___out), _S_two_digits(__i));
 	}
 
       template<typename _Tp, typename _FormatContext>
 	typename _FormatContext::iterator
-	_M_p(const _Tp& __t, typename _FormatContext::iterator __out,
+	_M_p(const _Tp& __t, typename _FormatContext::iterator ___out,
 	     _FormatContext& __ctx) const
 	{
 	  // %p The locale's equivalent of the AM/PM designations.
@@ -1201,13 +1201,13 @@
 	  const auto& __tp = use_facet<__timepunct<_CharT>>(__loc);
 	  const _CharT* __ampm[2];
 	  __tp._M_am_pm(__ampm);
-	  return _M_write(std::move(__out), __loc,
+	  return _M_write(std::move(___out), __loc,
 			  __ampm[__hms.hours().count() >= 12]);
 	}
 
       template<typename _Tp, typename _FormatContext>
 	typename _FormatContext::iterator
-	_M_q(const _Tp&, typename _FormatContext::iterator __out,
+	_M_q(const _Tp&, typename _FormatContext::iterator ___out,
 	     _FormatContext&) const
 	{
 	  // %q The duration's unit suffix
@@ -1217,7 +1217,7 @@
 	    {
 	      namespace __d = chrono::__detail;
 	      using period = typename _Tp::period;
-	      return __d::__fmt_units_suffix<period, _CharT>(std::move(__out));
+	      return __d::__fmt_units_suffix<period, _CharT>(std::move(___out));
 	    }
 	}
 
@@ -1225,7 +1225,7 @@
 
       template<typename _Tp, typename _FormatContext>
 	typename _FormatContext::iterator
-	_M_R_T(const _Tp& __t, typename _FormatContext::iterator __out,
+	_M_R_T(const _Tp& __t, typename _FormatContext::iterator ___out,
 	       _FormatContext& __ctx, bool __secs) const
 	{
 	  // %R Equivalent to %H:%M
@@ -1238,18 +1238,18 @@
 	  __s[__s.size() - 2] = __sv[0];
 	  __s[__s.size() - 1] = __sv[1];
 	  __sv = __s;
-	  __out = __format::__write(std::move(__out), __sv);
+	  ___out = __format::__write(std::move(___out), __sv);
 	  if (__secs)
 	    {
-	      *__out++ = _S_colon;
-	      __out = _M_S(__hms, std::move(__out), __ctx);
+	      *___out++ = _S_colon;
+	      ___out = _M_S(__hms, std::move(___out), __ctx);
 	    }
-	  return __out;
+	  return ___out;
 	}
 
       template<typename _Tp, typename _FormatContext>
 	typename _FormatContext::iterator
-	_M_S(const _Tp& __t, typename _FormatContext::iterator __out,
+	_M_S(const _Tp& __t, typename _FormatContext::iterator ___out,
 	     _FormatContext& __ctx, bool __mod = false) const
 	{
 	  // %S  Seconds as a decimal number.
@@ -1264,17 +1264,17 @@
 		  {
 		    struct tm __tm{};
 		    __tm.tm_sec = (int)__s.count();
-		    return _M_locale_fmt(std::move(__out), __loc, __tm,
+		    return _M_locale_fmt(std::move(___out), __loc, __tm,
 					 'S', 'O');
 		  }
 
 	      // %OS formats don't include subseconds, so just format that:
-	      return __format::__write(std::move(__out),
+	      return __format::__write(std::move(___out),
 				       _S_two_digits(__s.count()));
 	    }
 
 	  if constexpr (__hms.fractional_width == 0)
-	    __out = __format::__write(std::move(__out),
+	    ___out = __format::__write(std::move(___out),
 				      _S_two_digits(__s.count()));
 	  else
 	    {
@@ -1284,7 +1284,7 @@
 	      if constexpr (is_floating_point_v<rep>)
 		{
 		  chrono::duration<rep> __fs = __s + __ss;
-		  __out = std::format_to(std::move(__out), __loc,
+		  ___out = std::format_to(std::move(___out), __loc,
 					 _GLIBCXX_WIDEN("{:#0{}.{}Lf}"),
 					 __fs.count(),
 					 3 + __hms.fractional_width,
@@ -1294,32 +1294,32 @@
 		{
 		  const auto& __np
 		    = use_facet<numpunct<_CharT>>(__loc);
-		  __out = __format::__write(std::move(__out),
+		  ___out = __format::__write(std::move(___out),
 					    _S_two_digits(__s.count()));
-		  *__out++ = __np.decimal_point();
+		  *___out++ = __np.decimal_point();
 		  if constexpr (is_integral_v<rep>)
-		    __out = std::format_to(std::move(__out),
+		    ___out = std::format_to(std::move(___out),
 					   _GLIBCXX_WIDEN("{:0{}}"),
 					   __ss.count(),
 					   __hms.fractional_width);
 		  else
 		    {
 		      auto __str = std::format(_S_empty_spec, __ss.count());
-		      __out = std::format_to(std::move(__out),
+		      ___out = std::format_to(std::move(___out),
 					     _GLIBCXX_WIDEN("{:0>{}s}"),
 					     __str,
 					     __hms.fractional_width);
 		    }
 		}
 	    }
-	  return __out;
+	  return ___out;
 	}
 
       // %t handled in _M_format
 
       template<typename _Tp, typename _FormatContext>
 	typename _FormatContext::iterator
-	_M_u_w(const _Tp& __t, typename _FormatContext::iterator __out,
+	_M_u_w(const _Tp& __t, typename _FormatContext::iterator ___out,
 	       _FormatContext& __ctx, _CharT __conv, bool __mod = false) const
 	{
 	  // %u  ISO weekday as a decimal number (1-7), where Monday is 1.
@@ -1334,19 +1334,19 @@
 	      {
 		struct tm __tm{};
 		__tm.tm_wday = __wd.c_encoding();
-		return _M_locale_fmt(std::move(__out), __loc, __tm,
+		return _M_locale_fmt(std::move(___out), __loc, __tm,
 				     (char)__conv, 'O');
 	      }
 
 	  unsigned __wdi = __conv == 'u' ? __wd.iso_encoding()
 					 : __wd.c_encoding();
 	  const _CharT __d = _S_digit(__wdi);
-	  return __format::__write(std::move(__out), __string_view(&__d, 1));
+	  return __format::__write(std::move(___out), __string_view(&__d, 1));
 	}
 
       template<typename _Tp, typename _FormatContext>
 	typename _FormatContext::iterator
-	_M_U_V_W(const _Tp& __t, typename _FormatContext::iterator __out,
+	_M_U_V_W(const _Tp& __t, typename _FormatContext::iterator ___out,
 		 _FormatContext& __ctx, _CharT __conv, bool __mod = false) const
 	{
 	  // %U  Week number of the year as a decimal number, from first Sunday.
@@ -1368,7 +1368,7 @@
 		__tm.tm_year = (int)__y - 1900;
 		__tm.tm_yday = (__d - _TDays(__y/January/1)).count();
 		__tm.tm_wday = weekday(__d).c_encoding();
-		return _M_locale_fmt(std::move(__out), __loc, __tm,
+		return _M_locale_fmt(std::move(___out), __loc, __tm,
 				     (char)__conv, 'O');
 	      }
 
@@ -1393,12 +1393,12 @@
 	    }
 	  auto __weeks = chrono::floor<weeks>(__d - __first);
 	  __string_view __sv = _S_two_digits(__weeks.count() + 1);
-	  return __format::__write(std::move(__out), __sv);
+	  return __format::__write(std::move(___out), __sv);
 	}
 
       template<typename _Tp, typename _FormatContext>
 	typename _FormatContext::iterator
-	_M_z(const _Tp& __t, typename _FormatContext::iterator __out,
+	_M_z(const _Tp& __t, typename _FormatContext::iterator ___out,
 	     _FormatContext&, bool __mod = false) const
 	{
 	  using ::std::chrono::__detail::__utc_leap_second;
@@ -1411,7 +1411,7 @@
 	    {
 	      if constexpr (is_same_v<typename _Tp::clock,
 				      chrono::system_clock>)
-		return __format::__write(std::move(__out), __utc);
+		return __format::__write(std::move(___out), __utc);
 	    }
 	  else if constexpr (__is_specialization_of<_Tp, __local_time_fmt>)
 	    {
@@ -1429,18 +1429,18 @@
 		      __s += _S_two_digits(__hms.minutes().count());
 		      __sv = __s;
 		    }
-		  return __format::__write(std::move(__out), __sv);
+		  return __format::__write(std::move(___out), __sv);
 		}
 	    }
 	  else if constexpr (__is_specialization_of<_Tp, __utc_leap_second>)
-	    return __format::__write(std::move(__out), __utc);
+	    return __format::__write(std::move(___out), __utc);
 
 	  __no_timezone_available();
 	}
 
       template<typename _Tp, typename _FormatContext>
 	typename _FormatContext::iterator
-	_M_Z(const _Tp& __t, typename _FormatContext::iterator __out,
+	_M_Z(const _Tp& __t, typename _FormatContext::iterator ___out,
 	     _FormatContext& __ctx) const
 	{
 	  using ::std::chrono::__detail::__utc_leap_second;
@@ -1451,7 +1451,7 @@
 	    {
 	      if constexpr (is_same_v<typename _Tp::clock,
 				      chrono::system_clock>)
-		return __format::__write(std::move(__out), __utc);
+		return __format::__write(std::move(___out), __utc);
 	    }
 	  else if constexpr (__is_specialization_of<_Tp, __local_time_fmt>)
 	    {
@@ -1459,7 +1459,7 @@
 		{
 		  string_view __sv = *__t._M_abbrev;
 		  if constexpr (is_same_v<_CharT, char>)
-		    return __format::__write(std::move(__out), __sv);
+		    return __format::__write(std::move(___out), __sv);
 		  else
 		    {
 		      // TODO use resize_and_overwrite
@@ -1467,12 +1467,12 @@
 		      auto& __ct = use_facet<ctype<_CharT>>(_M_locale(__ctx));
 		      __ct.widen(__sv.begin(), __sv.end(), __ws.data());
 		      __string_view __wsv = __ws;
-		      return __format::__write(std::move(__out), __wsv);
+		      return __format::__write(std::move(___out), __wsv);
 		    }
 		}
 	    }
 	  else if constexpr (__is_specialization_of<_Tp, __utc_leap_second>)
-	    return __format::__write(std::move(__out), __utc);
+	    return __format::__write(std::move(___out), __utc);
 
 	  __no_timezone_available();
 	}
@@ -1663,7 +1663,7 @@
       // a locale-specific representation.
       template<typename _Iter>
 	_Iter
-	_M_locale_fmt(_Iter __out, const locale& __loc, const struct tm& __tm,
+	_M_locale_fmt(_Iter ___out, const locale& __loc, const struct tm& __tm,
 		      char __fmt, char __mod) const
 	{
 	  basic_ostringstream<_CharT> __os;
@@ -1671,8 +1671,8 @@
 	  const auto& __tp = use_facet<time_put<_CharT>>(__loc);
 	  __tp.put(__os, __os, _S_space, &__tm, __fmt, __mod);
 	  if (__os)
-	    __out = _M_write(std::move(__out), __loc, __os.view());
-	  return __out;
+	    ___out = _M_write(std::move(___out), __loc, __os.view());
+	  return ___out;
 	}
     };
 
@@ -3353,7 +3353,7 @@
 		{
 		  if (__c == '%')
 		    __is_flag = true; // This is the start of a flag.
-		  else if (std::isspace(__c, __loc))
+		  else if ((std::isspace)(__c, __loc))
 		    std::ws(__is); // Match zero or more whitespace characters.
 		  else if (!__read_chr(__c)) [[unlikely]]
 		    break; // Failed to match the expected character.
@@ -3680,10 +3680,10 @@
 			      __err |= ios_base::eofbit | ios_base::failbit;
 			      break;
 			    }
-			  __i = std::toupper(_Traits::to_char_type(__i), __loc);
+			  __i = (std::toupper)(_Traits::to_char_type(__i), __loc);
 			  if (__which & 1)
 			    {
-			      if (__i != std::toupper(__ampms[0][__n], __loc))
+			      if (__i != (std::toupper)(__ampms[0][__n], __loc))
 				__which ^= 1;
 			      else if (__ampms[0][__n + 1] == _CharT())
 				{
@@ -3694,7 +3694,7 @@
 			    }
 			  if (__which & 2)
 			    {
-			      if (__i != std::toupper(__ampms[1][__n], __loc))
+			      if (__i != (std::toupper)(__ampms[1][__n], __loc))
 				__which ^= 2;
 			      else if (__ampms[1][__n + 1] == _CharT())
 				{
@@ -4112,7 +4112,7 @@
 			  if (!_Traits::eq_int_type(__i, _Traits::eof()))
 			    {
 			      _CharT __a = _Traits::to_char_type(__i);
-			      if (std::isalnum(__a, __loc)
+			      if ((std::isalnum)(__a, __loc)
 				    || __x.find(__a) != __x.npos)
 				{
 				  __tz_abbr.push_back(__a);
@@ -4137,7 +4137,7 @@
 		      _CharT __i = __is.peek();
 		      if (_Traits::eq_int_type(__i, _Traits::eof()))
 			__err |= ios_base::eofbit | ios_base::failbit;
-		      else if (std::isspace(_Traits::to_char_type(__i), __loc))
+		      else if ((std::isspace)(_Traits::to_char_type(__i), __loc))
 			(void) __is.get();
 		      else
 			__err |= ios_base::failbit;
@@ -4152,7 +4152,7 @@
 		      _CharT __i = __is.peek();
 		      if (_Traits::eq_int_type(__i, _Traits::eof()))
 			__err |= ios_base::eofbit;
-		      else if (std::isspace(_Traits::to_char_type(__i), __loc))
+		      else if ((std::isspace)(_Traits::to_char_type(__i), __loc))
 			(void) __is.get();
 		    }
 		  break;
diff -Naur 15.2.0-orig/bits/istream.tcc 15.2.0/bits/istream.tcc
--- 15.2.0-orig/bits/istream.tcc	2025-08-24 15:44:46.300153200 +0200
+++ 15.2.0/bits/istream.tcc	2025-08-24 15:44:49.474593900 +0200
@@ -49,22 +49,22 @@
 
   template<typename _CharT, typename _Traits>
     basic_istream<_CharT, _Traits>::sentry::
-    sentry(basic_istream<_CharT, _Traits>& __in, bool __noskip) : _M_ok(false)
+    sentry(basic_istream<_CharT, _Traits>& ___in, bool __noskip) : _M_ok(false)
     {
       ios_base::iostate __err = ios_base::goodbit;
-      if (__in.good())
+      if (___in.good())
 	{
 	  __try
 	    {
-	      if (__in.tie())
-		__in.tie()->flush();
-	      if (!__noskip && bool(__in.flags() & ios_base::skipws))
+	      if (___in.tie())
+		___in.tie()->flush();
+	      if (!__noskip && bool(___in.flags() & ios_base::skipws))
 		{
 		  const __int_type __eof = traits_type::eof();
-		  __streambuf_type* __sb = __in.rdbuf();
+		  __streambuf_type* __sb = ___in.rdbuf();
 		  __int_type __c = __sb->sgetc();
 
-		  const __ctype_type& __ct = __check_facet(__in._M_ctype);
+		  const __ctype_type& __ct = __check_facet(___in._M_ctype);
 		  while (!traits_type::eq_int_type(__c, __eof)
 			 && __ct.is(ctype_base::space,
 				    traits_type::to_char_type(__c)))
@@ -79,19 +79,19 @@
 	    }
 	  __catch(__cxxabiv1::__forced_unwind&)
 	    {
-	      __in._M_setstate(ios_base::badbit);
+	      ___in._M_setstate(ios_base::badbit);
 	      __throw_exception_again;
 	    }
 	  __catch(...)
-	    { __in._M_setstate(ios_base::badbit); }
+	    { ___in._M_setstate(ios_base::badbit); }
 	}
 
-      if (__in.good() && __err == ios_base::goodbit)
+      if (___in.good() && __err == ios_base::goodbit)
 	_M_ok = true;
       else
 	{
 	  __err |= ios_base::failbit;
-	  __in.setstate(__err);
+	  ___in.setstate(__err);
 	}
     }
 
@@ -980,18 +980,18 @@
   // 27.6.1.2.3 Character extraction templates
   template<typename _CharT, typename _Traits>
     basic_istream<_CharT, _Traits>&
-    operator>>(basic_istream<_CharT, _Traits>& __in, _CharT& __c)
+    operator>>(basic_istream<_CharT, _Traits>& ___in, _CharT& __c)
     {
       typedef basic_istream<_CharT, _Traits>		__istream_type;
       typedef typename __istream_type::int_type         __int_type;
 
-      typename __istream_type::sentry __cerb(__in, false);
+      typename __istream_type::sentry __cerb(___in, false);
       if (__cerb)
 	{
 	  ios_base::iostate __err = ios_base::goodbit;
 	  __try
 	    {
-	      const __int_type __cb = __in.rdbuf()->sbumpc();
+	      const __int_type __cb = ___in.rdbuf()->sbumpc();
 	      if (!_Traits::eq_int_type(__cb, _Traits::eof()))
 		__c = _Traits::to_char_type(__cb);
 	      else
@@ -999,20 +999,20 @@
 	    }
 	  __catch(__cxxabiv1::__forced_unwind&)
 	    {
-	      __in._M_setstate(ios_base::badbit);
+	      ___in._M_setstate(ios_base::badbit);
 	      __throw_exception_again;
 	    }
 	  __catch(...)
-	    { __in._M_setstate(ios_base::badbit); }
+	    { ___in._M_setstate(ios_base::badbit); }
 	  if (__err)
-	    __in.setstate(__err);
+	    ___in.setstate(__err);
 	}
-      return __in;
+      return ___in;
     }
 
   template<typename _CharT, typename _Traits>
     void
-    __istream_extract(basic_istream<_CharT, _Traits>& __in, _CharT* __s,
+    __istream_extract(basic_istream<_CharT, _Traits>& ___in, _CharT* __s,
 		      streamsize __num)
     {
       typedef basic_istream<_CharT, _Traits>		__istream_type;
@@ -1023,20 +1023,20 @@
 
       streamsize __extracted = 0;
       ios_base::iostate __err = ios_base::goodbit;
-      typename __istream_type::sentry __cerb(__in, false);
+      typename __istream_type::sentry __cerb(___in, false);
       if (__cerb)
 	{
 	  __try
 	    {
 	      // Figure out how many characters to extract.
-	      streamsize __width = __in.width();
+	      streamsize __width = ___in.width();
 	      if (0 < __width && __width < __num)
 		__num = __width;
 
-	      const __ctype_type& __ct = use_facet<__ctype_type>(__in.getloc());
+	      const __ctype_type& __ct = use_facet<__ctype_type>(___in.getloc());
 
 	      const int_type __eof = _Traits::eof();
-	      __streambuf_type* __sb = __in.rdbuf();
+	      __streambuf_type* __sb = ___in.rdbuf();
 	      int_type __c = __sb->sgetc();
 
 	      while (__extracted < __num - 1
@@ -1056,26 +1056,26 @@
 	      // _GLIBCXX_RESOLVE_LIB_DEFECTS
 	      // 68.  Extractors for char* should store null at end
 	      *__s = char_type();
-	      __in.width(0);
+	      ___in.width(0);
 	    }
 	  __catch(__cxxabiv1::__forced_unwind&)
 	    {
-	      __in._M_setstate(ios_base::badbit);
+	      ___in._M_setstate(ios_base::badbit);
 	      __throw_exception_again;
 	    }
 	  __catch(...)
-	    { __in._M_setstate(ios_base::badbit); }
+	    { ___in._M_setstate(ios_base::badbit); }
 	}
       if (!__extracted)
 	__err |= ios_base::failbit;
       if (__err)
-	__in.setstate(__err);
+	___in.setstate(__err);
     }
 
   // 27.6.1.4 Standard basic_istream manipulators
   template<typename _CharT, typename _Traits>
     basic_istream<_CharT, _Traits>&
-    ws(basic_istream<_CharT, _Traits>& __in)
+    ws(basic_istream<_CharT, _Traits>& ___in)
     {
       typedef basic_istream<_CharT, _Traits>		__istream_type;
       typedef basic_streambuf<_CharT, _Traits>          __streambuf_type;
@@ -1084,15 +1084,15 @@
 
       // _GLIBCXX_RESOLVE_LIB_DEFECTS
       // 451. behavior of std::ws
-      typename __istream_type::sentry __cerb(__in, true);
+      typename __istream_type::sentry __cerb(___in, true);
       if (__cerb)
 	{
 	  ios_base::iostate __err = ios_base::goodbit;
 	  __try
 	    {
-	      const __ctype_type& __ct = use_facet<__ctype_type>(__in.getloc());
+	      const __ctype_type& __ct = use_facet<__ctype_type>(___in.getloc());
 	      const __int_type __eof = _Traits::eof();
-	      __streambuf_type* __sb = __in.rdbuf();
+	      __streambuf_type* __sb = ___in.rdbuf();
 	      __int_type __c = __sb->sgetc();
 
 	      while (true)
@@ -1109,17 +1109,17 @@
 	    }
 	  __catch (const __cxxabiv1::__forced_unwind&)
 	    {
-	      __in._M_setstate(ios_base::badbit);
+	      ___in._M_setstate(ios_base::badbit);
 	      __throw_exception_again;
 	    }
 	  __catch (...)
 	    {
-	      __in._M_setstate(ios_base::badbit);
+	      ___in._M_setstate(ios_base::badbit);
 	    }
 	  if (__err)
-	    __in.setstate(__err);
+	    ___in.setstate(__err);
 	}
-      return __in;
+      return ___in;
     }
 
   // Inhibit implicit instantiations for required instantiations,
diff -Naur 15.2.0-orig/bits/locale_conv.h 15.2.0/bits/locale_conv.h
--- 15.2.0-orig/bits/locale_conv.h	2025-08-24 15:44:46.300153200 +0200
+++ 15.2.0/bits/locale_conv.h	2025-08-24 15:44:49.522473400 +0200
@@ -337,10 +337,10 @@
       {
 	if (!_M_with_cvtstate)
 	  _M_state = state_type();
-	wide_string __out{ _M_wide_err_string.get_allocator() };
-	if (__str_codecvt_in(__first, __last, __out, *_M_cvt, _M_state,
+	wide_string ___out{ _M_wide_err_string.get_allocator() };
+	if (__str_codecvt_in(__first, __last, ___out, *_M_cvt, _M_state,
 			     _M_count))
-	  return __out;
+	  return ___out;
 	if (_M_with_strings)
 	  return _M_wide_err_string;
 	__throw_range_error("wstring_convert::from_bytes");
@@ -373,10 +373,10 @@
       {
 	if (!_M_with_cvtstate)
 	  _M_state = state_type();
-	byte_string __out{ _M_byte_err_string.get_allocator() };
-	if (__str_codecvt_out(__first, __last, __out, *_M_cvt, _M_state,
+	byte_string ___out{ _M_byte_err_string.get_allocator() };
+	if (__str_codecvt_out(__first, __last, ___out, *_M_cvt, _M_state,
 			      _M_count))
-	  return __out;
+	  return ___out;
 	if (_M_with_strings)
 	  return _M_byte_err_string;
 	__throw_range_error("wstring_convert::to_bytes");
@@ -466,13 +466,13 @@
       { return _M_buf && _M_conv_put() && !_M_buf->pubsync() ? 0 : -1; }
 
       typename _Wide_streambuf::int_type
-      overflow(typename _Wide_streambuf::int_type __out)
+      overflow(typename _Wide_streambuf::int_type ___out)
       {
 	if (!_M_buf || !_M_conv_put())
 	  return _Tr::eof();
-	else if (!_Tr::eq_int_type(__out, _Tr::eof()))
-	  return this->sputc(__out);
-	return _Tr::not_eof(__out);
+	else if (!_Tr::eq_int_type(___out, _Tr::eof()))
+	  return this->sputc(___out);
+	return _Tr::not_eof(___out);
       }
 
       typename _Wide_streambuf::int_type
diff -Naur 15.2.0-orig/bits/locale_facets.h 15.2.0/bits/locale_facets.h
--- 15.2.0-orig/bits/locale_facets.h	2025-08-24 15:44:46.313887500 +0200
+++ 15.2.0/bits/locale_facets.h	2025-08-24 15:44:49.548245500 +0200
@@ -234,7 +234,7 @@
        *  @return  The uppercase char_type if convertible, else @a __c.
       */
       char_type
-      toupper(char_type __c) const
+      (toupper)(char_type __c) const
       { return this->do_toupper(__c); }
 
       /**
@@ -249,7 +249,7 @@
        *  @return  @a __hi.
       */
       const char_type*
-      toupper(char_type *__lo, const char_type* __hi) const
+      (toupper)(char_type *__lo, const char_type* __hi) const
       { return this->do_toupper(__lo, __hi); }
 
       /**
@@ -263,7 +263,7 @@
        *  @return  The lowercase char_type if convertible, else @a __c.
       */
       char_type
-      tolower(char_type __c) const
+      (tolower)(char_type __c) const
       { return this->do_tolower(__c); }
 
       /**
@@ -278,7 +278,7 @@
        *  @return  @a __hi.
       */
       const char_type*
-      tolower(char_type* __lo, const char_type* __hi) const
+      (tolower)(char_type* __lo, const char_type* __hi) const
       { return this->do_tolower(__lo, __hi); }
 
       /**
@@ -809,7 +809,7 @@
        *  @return  The uppercase char if convertible, else @a __c.
       */
       char_type
-      toupper(char_type __c) const
+      (toupper)(char_type __c) const
       { return this->do_toupper(__c); }
 
       /**
@@ -826,7 +826,7 @@
        *  @return  @a __hi.
       */
       const char_type*
-      toupper(char_type *__lo, const char_type* __hi) const
+      (toupper)(char_type *__lo, const char_type* __hi) const
       { return this->do_toupper(__lo, __hi); }
 
       /**
@@ -842,7 +842,7 @@
        *  @return  The lowercase char if convertible, else @a __c.
       */
       char_type
-      tolower(char_type __c) const
+      (tolower)(char_type __c) const
       { return this->do_tolower(__c); }
 
       /**
@@ -859,7 +859,7 @@
        *  @return  @a __hi.
       */
       const char_type*
-      tolower(char_type* __lo, const char_type* __hi) const
+      (tolower)(char_type* __lo, const char_type* __hi) const
       { return this->do_tolower(__lo, __hi); }
 
       /**
@@ -2006,9 +2006,9 @@
        *  @return  Iterator after reading.
       */
       iter_type
-      get(iter_type __in, iter_type __end, ios_base& __io,
+      get(iter_type ___in, iter_type __end, ios_base& __io,
 	  ios_base::iostate& __err, bool& __v) const
-      { return this->do_get(__in, __end, __io, __err, __v); }
+      { return this->do_get(___in, __end, __io, __err, __v); }
 
       ///@{
       /**
@@ -2043,37 +2043,37 @@
        *  @return  Iterator after reading.
       */
       iter_type
-      get(iter_type __in, iter_type __end, ios_base& __io,
+      get(iter_type ___in, iter_type __end, ios_base& __io,
 	  ios_base::iostate& __err, long& __v) const
-      { return this->do_get(__in, __end, __io, __err, __v); }
+      { return this->do_get(___in, __end, __io, __err, __v); }
 
       iter_type
-      get(iter_type __in, iter_type __end, ios_base& __io,
+      get(iter_type ___in, iter_type __end, ios_base& __io,
 	  ios_base::iostate& __err, unsigned short& __v) const
-      { return this->do_get(__in, __end, __io, __err, __v); }
+      { return this->do_get(___in, __end, __io, __err, __v); }
 
       iter_type
-      get(iter_type __in, iter_type __end, ios_base& __io,
+      get(iter_type ___in, iter_type __end, ios_base& __io,
 	  ios_base::iostate& __err, unsigned int& __v)   const
-      { return this->do_get(__in, __end, __io, __err, __v); }
+      { return this->do_get(___in, __end, __io, __err, __v); }
 
       iter_type
-      get(iter_type __in, iter_type __end, ios_base& __io,
+      get(iter_type ___in, iter_type __end, ios_base& __io,
 	  ios_base::iostate& __err, unsigned long& __v)  const
-      { return this->do_get(__in, __end, __io, __err, __v); }
+      { return this->do_get(___in, __end, __io, __err, __v); }
 
 #ifdef _GLIBCXX_USE_LONG_LONG
 #pragma GCC diagnostic push
 #pragma GCC diagnostic ignored "-Wlong-long"
       iter_type
-      get(iter_type __in, iter_type __end, ios_base& __io,
+      get(iter_type ___in, iter_type __end, ios_base& __io,
 	  ios_base::iostate& __err, long long& __v) const
-      { return this->do_get(__in, __end, __io, __err, __v); }
+      { return this->do_get(___in, __end, __io, __err, __v); }
 
       iter_type
-      get(iter_type __in, iter_type __end, ios_base& __io,
+      get(iter_type ___in, iter_type __end, ios_base& __io,
 	  ios_base::iostate& __err, unsigned long long& __v)  const
-      { return this->do_get(__in, __end, __io, __err, __v); }
+      { return this->do_get(___in, __end, __io, __err, __v); }
 #pragma GCC diagnostic pop
 #endif
       ///@}
@@ -2106,19 +2106,19 @@
        *  @return  Iterator after reading.
       */
       iter_type
-      get(iter_type __in, iter_type __end, ios_base& __io,
+      get(iter_type ___in, iter_type __end, ios_base& __io,
 	  ios_base::iostate& __err, float& __v) const
-      { return this->do_get(__in, __end, __io, __err, __v); }
+      { return this->do_get(___in, __end, __io, __err, __v); }
 
       iter_type
-      get(iter_type __in, iter_type __end, ios_base& __io,
+      get(iter_type ___in, iter_type __end, ios_base& __io,
 	  ios_base::iostate& __err, double& __v) const
-      { return this->do_get(__in, __end, __io, __err, __v); }
+      { return this->do_get(___in, __end, __io, __err, __v); }
 
       iter_type
-      get(iter_type __in, iter_type __end, ios_base& __io,
+      get(iter_type ___in, iter_type __end, ios_base& __io,
 	  ios_base::iostate& __err, long double& __v) const
-      { return this->do_get(__in, __end, __io, __err, __v); }
+      { return this->do_get(___in, __end, __io, __err, __v); }
       ///@}
 
       /**
@@ -2149,9 +2149,9 @@
        *  @return  Iterator after reading.
       */
       iter_type
-      get(iter_type __in, iter_type __end, ios_base& __io,
+      get(iter_type ___in, iter_type __end, ios_base& __io,
 	  ios_base::iostate& __err, void*& __v) const
-      { return this->do_get(__in, __end, __io, __err, __v); }
+      { return this->do_get(___in, __end, __io, __err, __v); }
 
     protected:
       /// Destructor.
@@ -2612,88 +2612,88 @@
   /// Convenience interface to ctype.is(ctype_base::space, __c).
   template<typename _CharT>
     inline bool
-    isspace(_CharT __c, const locale& __loc)
+    (isspace)(_CharT __c, const locale& __loc)
     { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::space, __c); }
 
   /// Convenience interface to ctype.is(ctype_base::print, __c).
   template<typename _CharT>
     inline bool
-    isprint(_CharT __c, const locale& __loc)
+    (isprint)(_CharT __c, const locale& __loc)
     { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::print, __c); }
 
   /// Convenience interface to ctype.is(ctype_base::cntrl, __c).
   template<typename _CharT>
     inline bool
-    iscntrl(_CharT __c, const locale& __loc)
+    (iscntrl)(_CharT __c, const locale& __loc)
     { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::cntrl, __c); }
 
   /// Convenience interface to ctype.is(ctype_base::upper, __c).
   template<typename _CharT>
     inline bool
-    isupper(_CharT __c, const locale& __loc)
+    (isupper)(_CharT __c, const locale& __loc)
     { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::upper, __c); }
 
   /// Convenience interface to ctype.is(ctype_base::lower, __c).
   template<typename _CharT>
     inline bool
-    islower(_CharT __c, const locale& __loc)
+    (islower)(_CharT __c, const locale& __loc)
     { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::lower, __c); }
 
   /// Convenience interface to ctype.is(ctype_base::alpha, __c).
   template<typename _CharT>
     inline bool
-    isalpha(_CharT __c, const locale& __loc)
+    (isalpha)(_CharT __c, const locale& __loc)
     { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::alpha, __c); }
 
   /// Convenience interface to ctype.is(ctype_base::digit, __c).
   template<typename _CharT>
     inline bool
-    isdigit(_CharT __c, const locale& __loc)
+    (isdigit)(_CharT __c, const locale& __loc)
     { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::digit, __c); }
 
   /// Convenience interface to ctype.is(ctype_base::punct, __c).
   template<typename _CharT>
     inline bool
-    ispunct(_CharT __c, const locale& __loc)
+    (ispunct)(_CharT __c, const locale& __loc)
     { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::punct, __c); }
 
   /// Convenience interface to ctype.is(ctype_base::xdigit, __c).
   template<typename _CharT>
     inline bool
-    isxdigit(_CharT __c, const locale& __loc)
+    (isxdigit)(_CharT __c, const locale& __loc)
     { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::xdigit, __c); }
 
   /// Convenience interface to ctype.is(ctype_base::alnum, __c).
   template<typename _CharT>
     inline bool
-    isalnum(_CharT __c, const locale& __loc)
+    (isalnum)(_CharT __c, const locale& __loc)
     { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::alnum, __c); }
 
   /// Convenience interface to ctype.is(ctype_base::graph, __c).
   template<typename _CharT>
     inline bool
-    isgraph(_CharT __c, const locale& __loc)
+    (isgraph)(_CharT __c, const locale& __loc)
     { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::graph, __c); }
 
 #if __cplusplus >= 201103L
   /// Convenience interface to ctype.is(ctype_base::blank, __c).
   template<typename _CharT>
     inline bool
-    isblank(_CharT __c, const locale& __loc)
+    (isblank)(_CharT __c, const locale& __loc)
     { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::blank, __c); }
 #endif
 
   /// Convenience interface to ctype.toupper(__c).
   template<typename _CharT>
     inline _CharT
-    toupper(_CharT __c, const locale& __loc)
-    { return use_facet<ctype<_CharT> >(__loc).toupper(__c); }
+    (toupper)(_CharT __c, const locale& __loc)
+    { return (use_facet<ctype<_CharT> >(__loc).toupper)(__c); }
 
   /// Convenience interface to ctype.tolower(__c).
   template<typename _CharT>
     inline _CharT
-    tolower(_CharT __c, const locale& __loc)
-    { return use_facet<ctype<_CharT> >(__loc).tolower(__c); }
+    (tolower)(_CharT __c, const locale& __loc)
+    { return (use_facet<ctype<_CharT> >(__loc).tolower)(__c); }
 
 _GLIBCXX_END_NAMESPACE_VERSION
 } // namespace std
diff -Naur 15.2.0-orig/bits/locale_facets_nonio.tcc 15.2.0/bits/locale_facets_nonio.tcc
--- 15.2.0-orig/bits/locale_facets_nonio.tcc	2025-08-24 15:44:46.313887500 +0200
+++ 15.2.0/bits/locale_facets_nonio.tcc	2025-08-24 15:44:49.603521400 +0200
@@ -1025,8 +1025,8 @@
 	    {
 	      // Verify format and input match, extract and discard.
 	      // TODO real case-insensitive comparison
-	      if (__ctype.tolower(__format[__i]) == __ctype.tolower(*__beg)
-		  || __ctype.toupper(__format[__i]) == __ctype.toupper(*__beg))
+	      if ((__ctype.tolower)(__format[__i]) == (__ctype.tolower)(*__beg)
+		  || (__ctype.toupper)(__format[__i]) == (__ctype.toupper)(*__beg))
 		++__beg;
 	      else
 		__tmperr |= ios_base::failbit;
@@ -1114,11 +1114,11 @@
 	{
 	  const char_type __c = *__beg;
 	  // TODO real case-insensitive comparison
-	  const char_type __cl = __ctype.tolower(__c);
-	  const char_type __cu = __ctype.toupper(__c);
+	  const char_type __cl = (__ctype.tolower)(__c);
+	  const char_type __cu = (__ctype.toupper)(__c);
 	  for (size_t __i1 = 0; __i1 < __indexlen; ++__i1)
-	    if (__cl == __ctype.tolower(__names[__i1][0])
-		|| __cu == __ctype.toupper(__names[__i1][0]))
+	    if (__cl == (__ctype.tolower)(__names[__i1][0])
+		|| __cu == (__ctype.toupper)(__names[__i1][0]))
 	      {
 		__lengths[__nmatches]
 		  = __traits_type::length(__names[__i1]);
@@ -1147,14 +1147,14 @@
 	      if (__beg != __end)
 		{
 		  // TODO real case-insensitive comparison
-		  const char_type __cl = __ctype.tolower(*__beg);
-		  const char_type __cu = __ctype.toupper(*__beg);
+		  const char_type __cl = (__ctype.tolower)(*__beg);
+		  const char_type __cu = (__ctype.toupper)(*__beg);
 		  for (size_t __i3 = 0; __i3 < __nmatches; ++__i3)
 		    {
 		      __name = __names[__matches[__i3]];
 		      if (__lengths[__i3] > __pos
-			  && (__ctype.tolower(__name[__pos]) == __cl
-			      || __ctype.toupper(__name[__pos]) == __cu))
+			  && ((__ctype.tolower)(__name[__pos]) == __cl
+			      || (__ctype.toupper)(__name[__pos]) == __cu))
 			{
 			  __match_longer = true;
 			  break;
@@ -1200,13 +1200,13 @@
 	  if (__pos < __minlen && __beg != __end)
 	    {
 	      // TODO real case-insensitive comparison
-	      const char_type __cl = __ctype.tolower(*__beg);
-	      const char_type __cu = __ctype.toupper(*__beg);
+	      const char_type __cl = (__ctype.tolower)(*__beg);
+	      const char_type __cu = (__ctype.toupper)(*__beg);
 	      for (size_t __i6 = 0; __i6 < __nmatches;)
 		{
 		  __name = __names[__matches[__i6]];
-		  if (__ctype.tolower(__name[__pos]) != __cl
-		      && __ctype.toupper(__name[__pos]) != __cu)
+		  if ((__ctype.tolower)(__name[__pos]) != __cl
+		      && (__ctype.toupper)(__name[__pos]) != __cu)
 		    {
 		      __matches[__i6] = __matches[--__nmatches];
 		      __lengths[__i6] = __lengths[__nmatches];
@@ -1232,9 +1232,9 @@
 	  while (__pos < __len
 		 && __beg != __end
 		 // TODO real case-insensitive comparison
-		 && (__ctype.tolower(__name[__pos]) == __ctype.tolower(*__beg)
-		     || (__ctype.toupper(__name[__pos])
-			 == __ctype.toupper(*__beg))))
+		 && ((__ctype.tolower)(__name[__pos]) == (__ctype.tolower)(*__beg)
+		     || ((__ctype.toupper)(__name[__pos])
+			 == (__ctype.toupper)(*__beg))))
 	    ++__beg, (void)++__pos;
 
 	  if (__len == __pos)
@@ -1272,7 +1272,7 @@
 	  const char_type __c = *__beg;
 	  for (size_t __i = 0; __i < 2 * __indexlen; ++__i)
 	    if (__c == __names[__i][0]
-		|| __c == __ctype.toupper(__names[__i][0]))
+		|| __c == (__ctype.toupper)(__names[__i][0]))
 	      __matches[__nmatches++] = __i;
 	}
 
@@ -1552,8 +1552,8 @@
                 ++__s;
             }
           // TODO real case-insensitive comparison
-          else if (__ctype.tolower(*__s) == __ctype.tolower(*__fmt) ||
-                   __ctype.toupper(*__s) == __ctype.toupper(*__fmt))
+          else if ((__ctype.tolower)(*__s) == (__ctype.tolower)(*__fmt) ||
+                   (__ctype.toupper)(*__s) == (__ctype.toupper)(*__fmt))
             {
               ++__s;
               ++__fmt;
diff -Naur 15.2.0-orig/bits/localefwd.h 15.2.0/bits/localefwd.h
--- 15.2.0-orig/bits/localefwd.h	2025-08-24 15:44:46.313887500 +0200
+++ 15.2.0/bits/localefwd.h	2025-08-24 15:44:49.504516700 +0200
@@ -67,61 +67,61 @@
   // 22.1.3 Convenience interfaces
   template<typename _CharT>
     bool
-    isspace(_CharT, const locale&);
+    (isspace)(_CharT, const locale&);
 
   template<typename _CharT>
     bool
-    isprint(_CharT, const locale&);
+    (isprint)(_CharT, const locale&);
 
   template<typename _CharT>
     bool
-    iscntrl(_CharT, const locale&);
+    (iscntrl)(_CharT, const locale&);
 
   template<typename _CharT>
     bool
-    isupper(_CharT, const locale&);
+    (isupper)(_CharT, const locale&);
 
   template<typename _CharT>
     bool
-    islower(_CharT, const locale&);
+    (islower)(_CharT, const locale&);
 
   template<typename _CharT>
     bool
-    isalpha(_CharT, const locale&);
+    (isalpha)(_CharT, const locale&);
 
   template<typename _CharT>
     bool
-    isdigit(_CharT, const locale&);
+    (isdigit)(_CharT, const locale&);
 
   template<typename _CharT>
     bool
-    ispunct(_CharT, const locale&);
+    (ispunct)(_CharT, const locale&);
 
   template<typename _CharT>
     bool
-    isxdigit(_CharT, const locale&);
+    (isxdigit)(_CharT, const locale&);
 
   template<typename _CharT>
     bool
-    isalnum(_CharT, const locale&);
+    (isalnum)(_CharT, const locale&);
 
   template<typename _CharT>
     bool
-    isgraph(_CharT, const locale&);
+    (isgraph)(_CharT, const locale&);
 
 #if __cplusplus >= 201103L
   template<typename _CharT>
     bool
-    isblank(_CharT, const locale&);
+    (isblank)(_CharT, const locale&);
 #endif
 
   template<typename _CharT>
     _CharT
-    toupper(_CharT, const locale&);
+    (toupper)(_CharT, const locale&);
 
   template<typename _CharT>
     _CharT
-    tolower(_CharT, const locale&);
+    (tolower)(_CharT, const locale&);
 
   // 22.2.1 and 22.2.1.3 ctype
   struct ctype_base;
diff -Naur 15.2.0-orig/bits/ostream.h 15.2.0/bits/ostream.h
--- 15.2.0-orig/bits/ostream.h	2025-08-24 15:44:46.282595000 +0200
+++ 15.2.0/bits/ostream.h	2025-08-24 15:44:49.647560300 +0200
@@ -623,40 +623,40 @@
   */
   template<typename _CharT, typename _Traits>
     inline basic_ostream<_CharT, _Traits>&
-    operator<<(basic_ostream<_CharT, _Traits>& __out, _CharT __c)
+    operator<<(basic_ostream<_CharT, _Traits>& ___out, _CharT __c)
     {
-      if (__out.width() != 0)
-	return __ostream_insert(__out, &__c, 1);
-      __out.put(__c);
-      return __out;
+      if (___out.width() != 0)
+	return __ostream_insert(___out, &__c, 1);
+      ___out.put(__c);
+      return ___out;
     }
 
   template<typename _CharT, typename _Traits>
     inline basic_ostream<_CharT, _Traits>&
-    operator<<(basic_ostream<_CharT, _Traits>& __out, char __c)
-    { return (__out << __out.widen(__c)); }
+    operator<<(basic_ostream<_CharT, _Traits>& ___out, char __c)
+    { return (___out << ___out.widen(__c)); }
 
   // Specialization
   template<typename _Traits>
     inline basic_ostream<char, _Traits>&
-    operator<<(basic_ostream<char, _Traits>& __out, char __c)
+    operator<<(basic_ostream<char, _Traits>& ___out, char __c)
     {
-      if (__out.width() != 0)
-	return __ostream_insert(__out, &__c, 1);
-      __out.put(__c);
-      return __out;
+      if (___out.width() != 0)
+	return __ostream_insert(___out, &__c, 1);
+      ___out.put(__c);
+      return ___out;
     }
 
   // Signed and unsigned
   template<typename _Traits>
     inline basic_ostream<char, _Traits>&
-    operator<<(basic_ostream<char, _Traits>& __out, signed char __c)
-    { return (__out << static_cast<char>(__c)); }
+    operator<<(basic_ostream<char, _Traits>& ___out, signed char __c)
+    { return (___out << static_cast<char>(__c)); }
 
   template<typename _Traits>
     inline basic_ostream<char, _Traits>&
-    operator<<(basic_ostream<char, _Traits>& __out, unsigned char __c)
-    { return (__out << static_cast<char>(__c)); }
+    operator<<(basic_ostream<char, _Traits>& ___out, unsigned char __c)
+    { return (___out << static_cast<char>(__c)); }
 
 #if __cplusplus > 201703L
   // The following deleted overloads prevent formatting character values as
@@ -714,43 +714,43 @@
   */
   template<typename _CharT, typename _Traits>
     inline basic_ostream<_CharT, _Traits>&
-    operator<<(basic_ostream<_CharT, _Traits>& __out, const _CharT* __s)
+    operator<<(basic_ostream<_CharT, _Traits>& ___out, const _CharT* __s)
     {
       if (!__s)
-	__out.setstate(ios_base::badbit);
+	___out.setstate(ios_base::badbit);
       else
-	__ostream_insert(__out, __s,
+	__ostream_insert(___out, __s,
 			 static_cast<streamsize>(_Traits::length(__s)));
-      return __out;
+      return ___out;
     }
 
   template<typename _CharT, typename _Traits>
     basic_ostream<_CharT, _Traits> &
-    operator<<(basic_ostream<_CharT, _Traits>& __out, const char* __s);
+    operator<<(basic_ostream<_CharT, _Traits>& ___out, const char* __s);
 
   // Partial specializations
   template<typename _Traits>
     inline basic_ostream<char, _Traits>&
-    operator<<(basic_ostream<char, _Traits>& __out, const char* __s)
+    operator<<(basic_ostream<char, _Traits>& ___out, const char* __s)
     {
       if (!__s)
-	__out.setstate(ios_base::badbit);
+	___out.setstate(ios_base::badbit);
       else
-	__ostream_insert(__out, __s,
+	__ostream_insert(___out, __s,
 			 static_cast<streamsize>(_Traits::length(__s)));
-      return __out;
+      return ___out;
     }
 
   // Signed and unsigned
   template<typename _Traits>
     inline basic_ostream<char, _Traits>&
-    operator<<(basic_ostream<char, _Traits>& __out, const signed char* __s)
-    { return (__out << reinterpret_cast<const char*>(__s)); }
+    operator<<(basic_ostream<char, _Traits>& ___out, const signed char* __s)
+    { return (___out << reinterpret_cast<const char*>(__s)); }
 
   template<typename _Traits>
     inline basic_ostream<char, _Traits> &
-    operator<<(basic_ostream<char, _Traits>& __out, const unsigned char* __s)
-    { return (__out << reinterpret_cast<const char*>(__s)); }
+    operator<<(basic_ostream<char, _Traits>& ___out, const unsigned char* __s)
+    { return (___out << reinterpret_cast<const char*>(__s)); }
 
 #if __cplusplus > 201703L
    // The following deleted overloads prevent formatting strings as
diff -Naur 15.2.0-orig/bits/ostream.tcc 15.2.0/bits/ostream.tcc
--- 15.2.0-orig/bits/ostream.tcc	2025-08-24 15:44:46.313887500 +0200
+++ 15.2.0/bits/ostream.tcc	2025-08-24 15:44:49.652459800 +0200
@@ -308,10 +308,10 @@
 
   template<typename _CharT, typename _Traits>
     basic_ostream<_CharT, _Traits>&
-    operator<<(basic_ostream<_CharT, _Traits>& __out, const char* __s)
+    operator<<(basic_ostream<_CharT, _Traits>& ___out, const char* __s)
     {
       if (!__s)
-	__out.setstate(ios_base::badbit);
+	___out.setstate(ios_base::badbit);
       else
 	{
 	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
@@ -329,18 +329,18 @@
 
 	      _CharT *__ws = __pg.__get();
 	      for (size_t  __i = 0; __i < __clen; ++__i)
-		__ws[__i] = __out.widen(__s[__i]);
-	      __ostream_insert(__out, __ws, __clen);
+		__ws[__i] = ___out.widen(__s[__i]);
+	      __ostream_insert(___out, __ws, __clen);
 	    }
 	  __catch(__cxxabiv1::__forced_unwind&)
 	    {
-	      __out._M_setstate(ios_base::badbit);
+	      ___out._M_setstate(ios_base::badbit);
 	      __throw_exception_again;
 	    }
 	  __catch(...)
-	    { __out._M_setstate(ios_base::badbit); }
+	    { ___out._M_setstate(ios_base::badbit); }
 	}
-      return __out;
+      return ___out;
     }
 
   // Inhibit implicit instantiations for required instantiations,
diff -Naur 15.2.0-orig/bits/ostream_insert.h 15.2.0/bits/ostream_insert.h
--- 15.2.0-orig/bits/ostream_insert.h	2025-08-24 15:44:46.313887500 +0200
+++ 15.2.0/bits/ostream_insert.h	2025-08-24 15:44:49.652459800 +0200
@@ -49,31 +49,31 @@
 
   template<typename _CharT, typename _Traits>
     inline void
-    __ostream_write(basic_ostream<_CharT, _Traits>& __out,
+    __ostream_write(basic_ostream<_CharT, _Traits>& ___out,
 		    const _CharT* __s, streamsize __n)
     {
       typedef basic_ostream<_CharT, _Traits>       __ostream_type;
       typedef typename __ostream_type::ios_base    __ios_base;
 
-      const streamsize __put = __out.rdbuf()->sputn(__s, __n);
+      const streamsize __put = ___out.rdbuf()->sputn(__s, __n);
       if (__put != __n)
-	__out.setstate(__ios_base::badbit);
+	___out.setstate(__ios_base::badbit);
     }
 
   template<typename _CharT, typename _Traits>
     inline void
-    __ostream_fill(basic_ostream<_CharT, _Traits>& __out, streamsize __n)
+    __ostream_fill(basic_ostream<_CharT, _Traits>& ___out, streamsize __n)
     {
       typedef basic_ostream<_CharT, _Traits>       __ostream_type;
       typedef typename __ostream_type::ios_base    __ios_base;
 
-      const _CharT __c = __out.fill();
+      const _CharT __c = ___out.fill();
       for (; __n > 0; --__n)
 	{
-	  const typename _Traits::int_type __put = __out.rdbuf()->sputc(__c);
+	  const typename _Traits::int_type __put = ___out.rdbuf()->sputc(__c);
 	  if (_Traits::eq_int_type(__put, _Traits::eof()))
 	    {
-	      __out.setstate(__ios_base::badbit);
+	      ___out.setstate(__ios_base::badbit);
 	      break;
 	    }
 	}
@@ -81,43 +81,43 @@
 
   template<typename _CharT, typename _Traits>
     basic_ostream<_CharT, _Traits>&
-    __ostream_insert(basic_ostream<_CharT, _Traits>& __out,
+    __ostream_insert(basic_ostream<_CharT, _Traits>& ___out,
 		     const _CharT* __s, streamsize __n)
     {
       typedef basic_ostream<_CharT, _Traits>       __ostream_type;
       typedef typename __ostream_type::ios_base    __ios_base;
 
-      typename __ostream_type::sentry __cerb(__out);
+      typename __ostream_type::sentry __cerb(___out);
       if (__cerb)
 	{
 	  __try
 	    {
-	      const streamsize __w = __out.width();
+	      const streamsize __w = ___out.width();
 	      if (__w > __n)
 		{
-		  const bool __left = ((__out.flags()
+		  const bool __left = ((___out.flags()
 					& __ios_base::adjustfield)
 				       == __ios_base::left);
 		  if (!__left)
-		    __ostream_fill(__out, __w - __n);
-		  if (__out.good())
-		    __ostream_write(__out, __s, __n);
-		  if (__left && __out.good())
-		    __ostream_fill(__out, __w - __n);
+		    __ostream_fill(___out, __w - __n);
+		  if (___out.good())
+		    __ostream_write(___out, __s, __n);
+		  if (__left && ___out.good())
+		    __ostream_fill(___out, __w - __n);
 		}
 	      else
-		__ostream_write(__out, __s, __n);
-	      __out.width(0);
+		__ostream_write(___out, __s, __n);
+	      ___out.width(0);
 	    }
 	  __catch(__cxxabiv1::__forced_unwind&)
 	    {
-	      __out._M_setstate(__ios_base::badbit);
+	      ___out._M_setstate(__ios_base::badbit);
 	      __throw_exception_again;
 	    }
 	  __catch(...)
-	    { __out._M_setstate(__ios_base::badbit); }
+	    { ___out._M_setstate(__ios_base::badbit); }
 	}
-      return __out;
+      return ___out;
     }
 
   // Inhibit implicit instantiations for required instantiations,
diff -Naur 15.2.0-orig/bits/parse_numbers.h 15.2.0/bits/parse_numbers.h
--- 15.2.0-orig/bits/parse_numbers.h	2025-08-24 15:44:46.282595000 +0200
+++ 15.2.0/bits/parse_numbers.h	2025-08-24 15:44:49.665415800 +0200
@@ -53,20 +53,20 @@
   template<unsigned _Base>
     struct _Digit<_Base, '0'> : integral_constant<unsigned, 0>
     {
-      using __valid = true_type;
+      using ___valid = true_type;
     };
 
   template<unsigned _Base>
     struct _Digit<_Base, '1'> : integral_constant<unsigned, 1>
     {
-      using __valid = true_type;
+      using ___valid = true_type;
     };
 
   template<unsigned _Base, unsigned _Val>
     struct _Digit_impl : integral_constant<unsigned, _Val>
     {
       static_assert(_Base > _Val, "invalid digit");
-      using __valid = true_type;
+      using ___valid = true_type;
     };
 
   template<unsigned _Base>
@@ -153,7 +153,7 @@
   template<unsigned _Base>
     struct _Digit<_Base, '\''> : integral_constant<unsigned, 0>
     {
-      using __valid = false_type;
+      using ___valid = false_type;
     };
 
 //------------------------------------------------------------------------------
@@ -165,7 +165,7 @@
     struct _Power_help
     {
       using __next = typename _Power_help<_Base, _Digs...>::type;
-      using __valid_digit = typename _Digit<_Base, _Dig>::__valid;
+      using __valid_digit = typename _Digit<_Base, _Dig>::___valid;
       using type
 	= __ull_constant<__next::value * (__valid_digit{} ? _Base : 1ULL)>;
     };
@@ -173,7 +173,7 @@
   template<unsigned _Base, char _Dig>
     struct _Power_help<_Base, _Dig>
     {
-      using __valid_digit = typename _Digit<_Base, _Dig>::__valid;
+      using __valid_digit = typename _Digit<_Base, _Dig>::___valid;
       using type = __ull_constant<__valid_digit::value>;
     };
 
@@ -191,7 +191,7 @@
     struct _Number_help
     {
       using __digit = _Digit<_Base, _Dig>;
-      using __valid_digit = typename __digit::__valid;
+      using __valid_digit = typename __digit::___valid;
       using __next = _Number_help<_Base,
 				  __valid_digit::value ? _Pow / _Base : _Pow,
 				  _Digs...>;
diff -Naur 15.2.0-orig/bits/ranges_algo.h 15.2.0/bits/ranges_algo.h
--- 15.2.0-orig/bits/ranges_algo.h	2025-08-24 15:44:46.282595000 +0200
+++ 15.2.0/bits/ranges_algo.h	2025-08-24 15:44:49.832623300 +0200
@@ -1552,7 +1552,7 @@
 	&& indirectly_copyable<_Iter, _Out>
 	&& uniform_random_bit_generator<remove_reference_t<_Gen>>
       _Out
-      operator()(_Iter __first, _Sent __last, _Out __out,
+      operator()(_Iter __first, _Sent __last, _Out ___out,
 		 iter_difference_t<_Iter> __n, _Gen&& __g) const
       {
 	if constexpr (forward_iterator<_Iter>)
@@ -1561,7 +1561,7 @@
 	    // which may take linear time.
 	    auto __lasti = ranges::next(__first, __last);
 	    return _GLIBCXX_STD_A::
-	      sample(std::move(__first), std::move(__lasti), std::move(__out),
+	      sample(std::move(__first), std::move(__lasti), std::move(___out),
 		     __n, std::forward<_Gen>(__g));
 	  }
 	else
@@ -1573,7 +1573,7 @@
 	    iter_difference_t<_Iter> __sample_sz = 0;
 	    while (__first != __last && __sample_sz != __n)
 	      {
-		__out[__sample_sz++] = *__first;
+		___out[__sample_sz++] = *__first;
 		++__first;
 	      }
 	    for (auto __pop_sz = __sample_sz; __first != __last;
@@ -1581,9 +1581,9 @@
 	      {
 		const auto __k = __d(__g, __param_type{0, __pop_sz});
 		if (__k < __n)
-		  __out[__k] = *__first;
+		  ___out[__k] = *__first;
 	      }
-	    return __out + __sample_sz;
+	    return ___out + __sample_sz;
 	  }
       }
 
@@ -1592,11 +1592,11 @@
 	&& indirectly_copyable<iterator_t<_Range>, _Out>
 	&& uniform_random_bit_generator<remove_reference_t<_Gen>>
       _Out
-      operator()(_Range&& __r, _Out __out,
+      operator()(_Range&& __r, _Out ___out,
 		 range_difference_t<_Range> __n, _Gen&& __g) const
       {
 	return (*this)(ranges::begin(__r), ranges::end(__r),
-		       std::move(__out), __n,
+		       std::move(___out), __n,
 		       std::forward<_Gen>(__g));
       }
   };
@@ -1973,11 +1973,11 @@
 				      projected<iterator_t<_Range2>, _Proj2>>
       constexpr partial_sort_copy_result<borrowed_iterator_t<_Range1>,
 					 borrowed_iterator_t<_Range2>>
-      operator()(_Range1&& __r, _Range2&& __out, _Comp __comp = {},
+      operator()(_Range1&& __r, _Range2&& ___out, _Comp __comp = {},
 		 _Proj1 __proj1 = {}, _Proj2 __proj2 = {}) const
       {
 	return (*this)(ranges::begin(__r), ranges::end(__r),
-		       ranges::begin(__out), ranges::end(__out),
+		       ranges::begin(___out), ranges::end(___out),
 		       std::move(__comp),
 		       std::move(__proj1), std::move(__proj2));
       }
diff -Naur 15.2.0-orig/bits/ranges_algobase.h 15.2.0/bits/ranges_algobase.h
--- 15.2.0-orig/bits/ranges_algobase.h	2025-08-24 15:44:46.282595000 +0200
+++ 15.2.0/bits/ranges_algobase.h	2025-08-24 15:44:49.844506500 +0200
@@ -193,12 +193,12 @@
   template<bool _IsMove, typename _OutIter, typename _InIter>
     [[__gnu__::__always_inline__]]
     constexpr void
-    __assign_one(_OutIter& __out, _InIter& __in)
+    __assign_one(_OutIter& ___out, _InIter& ___in)
     {
       if constexpr (_IsMove)
-	*__out = ranges::iter_move(__in);
+	*___out = ranges::iter_move(___in);
       else
-	*__out = *__in;
+	*___out = *___in;
     }
 } // namespace __detail
 
@@ -264,34 +264,34 @@
       using __detail::__is_normal_iterator;
       if constexpr (__is_move_iterator<_Iter> && same_as<_Iter, _Sent>)
 	{
-	  auto [__in, __out]
+	  auto [___in, ___out]
 	    = ranges::__copy_or_move<true>(std::move(__first).base(),
 					   std::move(__last).base(),
 					   std::move(__result));
-	  return {move_iterator{std::move(__in)}, std::move(__out)};
+	  return {move_iterator{std::move(___in)}, std::move(___out)};
 	}
       else if constexpr (__is_reverse_iterator<_Iter> && same_as<_Iter, _Sent>
 			 && __is_reverse_iterator<_Out>)
 	{
-	  auto [__in,__out]
+	  auto [___in,___out]
 	    = ranges::__copy_or_move_backward<_IsMove>(std::move(__last).base(),
 						       std::move(__first).base(),
 						       std::move(__result).base());
-	  return {reverse_iterator{std::move(__in)},
-		  reverse_iterator{std::move(__out)}};
+	  return {reverse_iterator{std::move(___in)},
+		  reverse_iterator{std::move(___out)}};
 	}
       else if constexpr (__is_normal_iterator<_Iter> && same_as<_Iter, _Sent>)
 	{
-	  auto [__in,__out]
+	  auto [___in,___out]
 	    = ranges::__copy_or_move<_IsMove>(__first.base(), __last.base(),
 					      std::move(__result));
-	  return {decltype(__first){__in}, std::move(__out)};
+	  return {decltype(__first){___in}, std::move(___out)};
 	}
       else if constexpr (__is_normal_iterator<_Out>)
 	{
-	  auto [__in,__out]
+	  auto [___in,___out]
 	    = ranges::__copy_or_move<_IsMove>(std::move(__first), __last, __result.base());
-	  return {std::move(__in), decltype(__result){__out}};
+	  return {std::move(___in), decltype(__result){___out}};
 	}
       else if constexpr (sized_sentinel_for<_Sent, _Iter>)
 	{
@@ -398,28 +398,28 @@
       if constexpr (__is_reverse_iterator<_Iter> && same_as<_Iter, _Sent>
 		    && __is_reverse_iterator<_Out>)
 	{
-	  auto [__in,__out]
+	  auto [___in,___out]
 	    = ranges::__copy_or_move<_IsMove>(std::move(__last).base(),
 					      std::move(__first).base(),
 					      std::move(__result).base());
-	  return {reverse_iterator{std::move(__in)},
-		  reverse_iterator{std::move(__out)}};
+	  return {reverse_iterator{std::move(___in)},
+		  reverse_iterator{std::move(___out)}};
 	}
       else if constexpr (__is_normal_iterator<_Iter> && same_as<_Iter, _Sent>)
 	{
-	  auto [__in,__out]
+	  auto [___in,___out]
 	    = ranges::__copy_or_move_backward<_IsMove>(__first.base(),
 						       __last.base(),
 						       std::move(__result));
-	  return {decltype(__first){__in}, std::move(__out)};
+	  return {decltype(__first){___in}, std::move(___out)};
 	}
       else if constexpr (__is_normal_iterator<_Out>)
 	{
-	  auto [__in,__out]
+	  auto [___in,___out]
 	    = ranges::__copy_or_move_backward<_IsMove>(std::move(__first),
 						       std::move(__last),
 						       __result.base());
-	  return {std::move(__in), decltype(__result){__out}};
+	  return {std::move(___in), decltype(__result){___out}};
 	}
       else if constexpr (sized_sentinel_for<_Sent, _Iter>)
 	{
diff -Naur 15.2.0-orig/bits/ranges_uninitialized.h 15.2.0/bits/ranges_uninitialized.h
--- 15.2.0-orig/bits/ranges_uninitialized.h	2025-08-24 15:44:46.298239000 +0200
+++ 15.2.0/bits/ranges_uninitialized.h	2025-08-24 15:44:49.868049800 +0200
@@ -380,10 +380,10 @@
 	    auto __d = __ilast - __ifirst;
 	    if (auto __d2 = __olast - __ofirst; __d2 < __d)
 	      __d = static_cast<iter_difference_t<_Iter>>(__d2);
-	    auto [__in, __out]
+	    auto [___in, ___out]
 	      = ranges::copy_n(std::make_move_iterator(std::move(__ifirst)),
 			       __d, __ofirst);
-	    return {std::move(__in).base(), __out};
+	    return {std::move(___in).base(), ___out};
 	  }
 	else
 	  {
@@ -435,10 +435,10 @@
 	  {
 	    if (auto __d = __olast - __ofirst; __d < __n)
 	      __n = static_cast<iter_difference_t<_Iter>>(__d);
-	    auto [__in, __out]
+	    auto [___in, ___out]
 	      = ranges::copy_n(std::make_move_iterator(std::move(__ifirst)),
 			       __n, __ofirst);
-	    return {std::move(__in).base(), __out};
+	    return {std::move(___in).base(), ___out};
 	  }
 	else
 	  {
diff -Naur 15.2.0-orig/bits/regex.h 15.2.0/bits/regex.h
--- 15.2.0-orig/bits/regex.h	2025-08-24 15:44:46.313887500 +0200
+++ 15.2.0/bits/regex.h	2025-08-24 15:44:49.900009000 +0200
@@ -217,7 +217,7 @@
       {
 	typedef std::ctype<char_type> __ctype_type;
 	const __ctype_type& __fctyp(use_facet<__ctype_type>(_M_locale));
-	return __fctyp.tolower(__c);
+	return (__fctyp.tolower)(__c);
       }
 
       /**
@@ -286,8 +286,8 @@
 	  // say that transform_primary ignores case, but the specification
 	  // for the std::regex_traits<char> and std::regex_traits<wchar_t>
 	  // specializations don't, they seem to suggest just using the
-	  // collate::transform function to get a primary sort key.
-	  __fctyp.tolower(__p, __pend);
+	  // collate::transform function to get a primary sort (key.
+	  __fctyp.tolower)(__p, __pend);
 
 	  __try
 	    {
@@ -2051,7 +2051,7 @@
        */
       template<typename _Out_iter>
 	_Out_iter
-	format(_Out_iter __out, const char_type* __fmt_first,
+	format(_Out_iter ___out, const char_type* __fmt_first,
 	       const char_type* __fmt_last,
 	       match_flag_type __flags = regex_constants::format_default) const;
 
@@ -2060,10 +2060,10 @@
        */
       template<typename _Out_iter, typename _St, typename _Sa>
 	_Out_iter
-	format(_Out_iter __out, const basic_string<char_type, _St, _Sa>& __fmt,
+	format(_Out_iter ___out, const basic_string<char_type, _St, _Sa>& __fmt,
 	       match_flag_type __flags = regex_constants::format_default) const
 	{
-	  return format(__out, __fmt.data(), __fmt.data() + __fmt.size(),
+	  return format(___out, __fmt.data(), __fmt.data() + __fmt.size(),
 			__flags);
 	}
 
@@ -2572,7 +2572,7 @@
   template<typename _Out_iter, typename _Bi_iter,
 	   typename _Rx_traits, typename _Ch_type>
     _Out_iter
-    __regex_replace(_Out_iter __out, _Bi_iter __first, _Bi_iter __last,
+    __regex_replace(_Out_iter ___out, _Bi_iter __first, _Bi_iter __last,
 		    const basic_regex<_Ch_type, _Rx_traits>& __e,
 		    const _Ch_type* __fmt, size_t __len,
 		    regex_constants::match_flag_type __flags);
@@ -2595,13 +2595,13 @@
 	   typename _Rx_traits, typename _Ch_type,
 	   typename _St, typename _Sa>
     inline _Out_iter
-    regex_replace(_Out_iter __out, _Bi_iter __first, _Bi_iter __last,
+    regex_replace(_Out_iter ___out, _Bi_iter __first, _Bi_iter __last,
 		  const basic_regex<_Ch_type, _Rx_traits>& __e,
 		  const basic_string<_Ch_type, _St, _Sa>& __fmt,
 		  regex_constants::match_flag_type __flags
 		  = regex_constants::match_default)
     {
-      return std::__regex_replace(__out, __first, __last, __e, __fmt.c_str(),
+      return std::__regex_replace(___out, __first, __last, __e, __fmt.c_str(),
 				  __fmt.length(), __flags);
     }
 
@@ -2621,13 +2621,13 @@
   template<typename _Out_iter, typename _Bi_iter,
 	   typename _Rx_traits, typename _Ch_type>
     _Out_iter
-    regex_replace(_Out_iter __out, _Bi_iter __first, _Bi_iter __last,
+    regex_replace(_Out_iter ___out, _Bi_iter __first, _Bi_iter __last,
 		  const basic_regex<_Ch_type, _Rx_traits>& __e,
 		  const _Ch_type* __fmt,
 		  regex_constants::match_flag_type __flags
 		  = regex_constants::match_default)
     {
-      return std::__regex_replace(__out, __first, __last, __e, __fmt,
+      return std::__regex_replace(___out, __first, __last, __e, __fmt,
 				  char_traits<_Ch_type>::length(__fmt),
 				  __flags);
     }
diff -Naur 15.2.0-orig/bits/regex.tcc 15.2.0/bits/regex.tcc
--- 15.2.0-orig/bits/regex.tcc	2025-08-24 15:44:46.313887500 +0200
+++ 15.2.0/bits/regex.tcc	2025-08-24 15:44:49.921384700 +0200
@@ -86,22 +86,22 @@
 	  for (auto& __it : __res)
 	    if (!__it.matched)
 	      __it.first = __it.second = __e;
-	  auto& __pre = __m._M_prefix();
+	  auto& ___pre = __m._M_prefix();
 	  auto& __suf = __m._M_suffix();
 	  if (__match_mode)
 	    {
-	      __pre.matched = false;
-	      __pre.first = __s;
-	      __pre.second = __s;
+	      ___pre.matched = false;
+	      ___pre.first = __s;
+	      ___pre.second = __s;
 	      __suf.matched = false;
 	      __suf.first = __e;
 	      __suf.second = __e;
 	    }
 	  else
 	    {
-	      __pre.first = __s;
-	      __pre.second = __res[0].first;
-	      __pre.matched = (__pre.first != __pre.second);
+	      ___pre.first = __s;
+	      ___pre.second = __res[0].first;
+	      ___pre.matched = (___pre.first != ___pre.second);
 	      __suf.first = __res[0].second;
 	      __suf.second = __e;
 	      __suf.matched = (__suf.first != __suf.second);
@@ -303,7 +303,7 @@
 
       string __s;
       for (; __first != __last; ++__first)
-	__s += __fctyp.narrow(__fctyp.tolower(*__first), 0);
+	__s += __fctyp.narrow((__fctyp.tolower)(*__first), 0);
 
       for (const auto& __it : __classnames)
 	if (__s == __it.first)
@@ -350,7 +350,7 @@
   template<typename _Out_iter>
     _Out_iter
     match_results<_Bi_iter, _Alloc>::
-    format(_Out_iter __out,
+    format(_Out_iter ___out,
 	   const match_results<_Bi_iter, _Alloc>::char_type* __fmt_first,
 	   const match_results<_Bi_iter, _Alloc>::char_type* __fmt_last,
 	   match_flag_type __flags) const
@@ -365,7 +365,7 @@
 	{
 	  auto& __sub = (*this)[__idx];
 	  if (__sub.matched)
-	    __out = std::copy(__sub.first, __sub.second, __out);
+	    ___out = std::copy(__sub.first, __sub.second, ___out);
 	};
 
       if (__flags & regex_constants::format_sed)
@@ -379,7 +379,7 @@
 		  if (__fctyp.is(__ctype_type::digit, *__fmt_first))
 		    __output(__traits.value(*__fmt_first, 10));
 		  else
-		    *__out++ = *__fmt_first;
+		    *___out++ = *__fmt_first;
 		  continue;
 		}
 	      if (*__fmt_first == '\\')
@@ -392,10 +392,10 @@
 		  __output(0);
 		  continue;
 		}
-	      *__out++ = *__fmt_first;
+	      *___out++ = *__fmt_first;
 	    }
 	  if (__escaping)
-	    *__out++ = '\\';
+	    *___out++ = '\\';
 	}
       else
 	{
@@ -405,7 +405,7 @@
 	      if (__next == __fmt_last)
 		break;
 
-	      __out = std::copy(__fmt_first, __next, __out);
+	      ___out = std::copy(__fmt_first, __next, ___out);
 
 	      auto __eat = [&](char __ch) -> bool
 		{
@@ -418,22 +418,22 @@
 		};
 
 	      if (++__next == __fmt_last)
-		*__out++ = '$';
+		*___out++ = '$';
 	      else if (__eat('$'))
-		*__out++ = '$';
+		*___out++ = '$';
 	      else if (__eat('&'))
 		__output(0);
 	      else if (__eat('`'))
 		{
 		  auto& __sub = _M_prefix();
 		  if (__sub.matched)
-		    __out = std::copy(__sub.first, __sub.second, __out);
+		    ___out = std::copy(__sub.first, __sub.second, ___out);
 		}
 	      else if (__eat('\''))
 		{
 		  auto& __sub = _M_suffix();
 		  if (__sub.matched)
-		    __out = std::copy(__sub.first, __sub.second, __out);
+		    ___out = std::copy(__sub.first, __sub.second, ___out);
 		}
 	      else if (__fctyp.is(__ctype_type::digit, *__next))
 		{
@@ -448,18 +448,18 @@
 		    __output(__num);
 		}
 	      else
-		*__out++ = '$';
+		*___out++ = '$';
 	      __fmt_first = __next;
 	    }
-	  __out = std::copy(__fmt_first, __fmt_last, __out);
+	  ___out = std::copy(__fmt_first, __fmt_last, ___out);
 	}
-      return __out;
+      return ___out;
     }
 
   template<typename _Out_iter, typename _Bi_iter,
 	   typename _Rx_traits, typename _Ch_type>
     _Out_iter
-    __regex_replace(_Out_iter __out, _Bi_iter __first, _Bi_iter __last,
+    __regex_replace(_Out_iter ___out, _Bi_iter __first, _Bi_iter __last,
 		    const basic_regex<_Ch_type, _Rx_traits>& __e,
 		    const _Ch_type* __fmt, size_t __len,
 		    regex_constants::match_flag_type __flags)
@@ -470,7 +470,7 @@
       if (__i == __end)
 	{
 	  if (!(__flags & regex_constants::format_no_copy))
-	    __out = std::copy(__first, __last, __out);
+	    ___out = std::copy(__first, __last, ___out);
 	}
       else
 	{
@@ -478,17 +478,17 @@
 	  for (; __i != __end; ++__i)
 	    {
 	      if (!(__flags & regex_constants::format_no_copy))
-		__out = std::copy(__i->prefix().first, __i->prefix().second,
-				  __out);
-	      __out = __i->format(__out, __fmt, __fmt + __len, __flags);
+		___out = std::copy(__i->prefix().first, __i->prefix().second,
+				  ___out);
+	      ___out = __i->format(___out, __fmt, __fmt + __len, __flags);
 	      __last = __i->suffix();
 	      if (__flags & regex_constants::format_first_only)
 		break;
 	    }
 	  if (!(__flags & regex_constants::format_no_copy))
-	    __out = std::copy(__last.first, __last.second, __out);
+	    ___out = std::copy(__last.first, __last.second, ___out);
 	}
-      return __out;
+      return ___out;
     }
 
   template<typename _Bi_iter,
diff -Naur 15.2.0-orig/bits/regex_compiler.h 15.2.0/bits/regex_compiler.h
--- 15.2.0-orig/bits/regex_compiler.h	2025-08-24 15:44:46.313887500 +0200
+++ 15.2.0/bits/regex_compiler.h	2025-08-24 15:44:49.931823400 +0200
@@ -249,8 +249,8 @@
       {
 	typedef std::ctype<_CharT> __ctype_type;
 	const auto& __fctyp = use_facet<__ctype_type>(this->_M_traits.getloc());
-	auto __lower = __fctyp.tolower(__ch);
-	auto __upper = __fctyp.toupper(__ch);
+	auto __lower = (__fctyp.tolower)(__ch);
+	auto __upper = (__fctyp.toupper)(__ch);
 	return (__first <= __lower && __lower <= __last)
 	  || (__first <= __upper && __upper <= __last);
       }
diff -Naur 15.2.0-orig/bits/regex_executor.tcc 15.2.0/bits/regex_executor.tcc
--- 15.2.0-orig/bits/regex_executor.tcc	2025-08-24 15:44:46.313887500 +0200
+++ 15.2.0/bits/regex_executor.tcc	2025-08-24 15:44:49.959704000 +0200
@@ -375,8 +375,8 @@
 			     __actual_begin, __actual_end,
 			     [this, &__fctyp](_CharT __lhs, _CharT __rhs)
 			     {
-			       return __fctyp.tolower(__lhs)
-				 == __fctyp.tolower(__rhs);
+			       return (__fctyp.tolower)(__lhs)
+				 == (__fctyp.tolower)(__rhs);
 			     });
       }
 
diff -Naur 15.2.0-orig/bits/shared_ptr_atomic.h 15.2.0/bits/shared_ptr_atomic.h
--- 15.2.0-orig/bits/shared_ptr_atomic.h	2025-08-24 15:44:46.313887500 +0200
+++ 15.2.0/bits/shared_ptr_atomic.h	2025-08-24 15:44:49.992748800 +0200
@@ -300,11 +300,11 @@
     atomic_compare_exchange_weak_explicit(shared_ptr<_Tp>* __p,
 					  shared_ptr<_Tp>* __v,
 					  shared_ptr<_Tp> __w,
-					  memory_order __success,
+					  memory_order ___success,
 					  memory_order __failure)
     {
       return std::atomic_compare_exchange_strong_explicit(__p, __v,
-	  std::move(__w), __success, __failure);
+	  std::move(__w), ___success, __failure);
     }
 
   template<typename _Tp>
@@ -357,11 +357,11 @@
     atomic_compare_exchange_weak_explicit(__shared_ptr<_Tp, _Lp>* __p,
 					  __shared_ptr<_Tp, _Lp>* __v,
 					  __shared_ptr<_Tp, _Lp> __w,
-					  memory_order __success,
+					  memory_order ___success,
 					  memory_order __failure)
     {
       return std::atomic_compare_exchange_strong_explicit(__p, __v,
-	  std::move(__w), __success, __failure);
+	  std::move(__w), ___success, __failure);
     }
 
   template<typename _Tp, _Lock_policy _Lp>
diff -Naur 15.2.0-orig/bits/std_function.h 15.2.0/bits/std_function.h
--- 15.2.0-orig/bits/std_function.h	2025-08-24 15:44:46.323506900 +0200
+++ 15.2.0/bits/std_function.h	2025-08-24 15:44:50.090017600 +0200
@@ -317,7 +317,7 @@
   // e.g. _Function_handler<Sig, void()> and _Function_handler<Sig, void>
   // would be ill-formed.
   template<typename _Signature, typename _Functor,
-	   bool __valid = is_object<_Functor>::value>
+	   bool ___valid = is_object<_Functor>::value>
     struct _Target_handler
     : _Function_handler<_Signature, typename remove_cv<_Functor>::type>
     { };
diff -Naur 15.2.0-orig/bits/std_thread.h 15.2.0/bits/std_thread.h
--- 15.2.0-orig/bits/std_thread.h	2025-08-24 15:44:46.323506900 +0200
+++ 15.2.0/bits/std_thread.h	2025-08-24 15:44:50.094226500 +0200
@@ -122,7 +122,7 @@
 
       template<class _CharT, class _Traits>
 	friend basic_ostream<_CharT, _Traits>&
-	operator<<(basic_ostream<_CharT, _Traits>& __out, id __id);
+	operator<<(basic_ostream<_CharT, _Traits>& ___out, id __id);
 
 #if __glibcxx_formatters
       friend formatter<id, char>;
diff -Naur 15.2.0-orig/bits/stl_algo.h 15.2.0/bits/stl_algo.h
--- 15.2.0-orig/bits/stl_algo.h	2025-08-24 15:44:46.298239000 +0200
+++ 15.2.0/bits/stl_algo.h	2025-08-24 15:44:50.155322800 +0200
@@ -5805,7 +5805,7 @@
            typename _Size, typename _UniformRandomBitGenerator>
     _RandomAccessIterator
     __sample(_InputIterator __first, _InputIterator __last, input_iterator_tag,
-	     _RandomAccessIterator __out, random_access_iterator_tag,
+	     _RandomAccessIterator ___out, random_access_iterator_tag,
 	     _Size __n, _UniformRandomBitGenerator&& __g)
     {
       using __distrib_type = uniform_int_distribution<_Size>;
@@ -5814,7 +5814,7 @@
       _Size __sample_sz = 0;
       while (__first != __last && __sample_sz != __n)
 	{
-	  __out[__sample_sz++] = *__first;
+	  ___out[__sample_sz++] = *__first;
 	  ++__first;
 	}
       for (auto __pop_sz = __sample_sz; __first != __last;
@@ -5822,9 +5822,9 @@
 	{
 	  const auto __k = __d(__g, __param_type{0, __pop_sz});
 	  if (__k < __n)
-	    __out[__k] = *__first;
+	    ___out[__k] = *__first;
 	}
-      return __out + __sample_sz;
+      return ___out + __sample_sz;
     }
 
   /// Selection sampling algorithm.
@@ -5833,7 +5833,7 @@
     _OutputIterator
     __sample(_ForwardIterator __first, _ForwardIterator __last,
 	     forward_iterator_tag,
-	     _OutputIterator __out, _Cat,
+	     _OutputIterator ___out, _Cat,
 	     _Size __n, _UniformRandomBitGenerator&& __g)
     {
       using __distrib_type = uniform_int_distribution<_Size>;
@@ -5843,7 +5843,7 @@
       using __uc_type = common_type_t<typename _Gen::result_type, _USize>;
 
       if (__first == __last)
-	return __out;
+	return ___out;
 
       __distrib_type __d{};
       _Size __unsampled_sz = std::distance(__first, __last);
@@ -5865,7 +5865,7 @@
 	      --__unsampled_sz;
 	      if (__p.first < __n)
 		{
-		  *__out++ = *__first;
+		  *___out++ = *__first;
 		  --__n;
 		}
 
@@ -5876,7 +5876,7 @@
 	      --__unsampled_sz;
 	      if (__p.second < __n)
 		{
-		  *__out++ = *__first;
+		  *___out++ = *__first;
 		  --__n;
 		}
 
@@ -5889,10 +5889,10 @@
       for (; __n != 0; ++__first)
 	if (__d(__g, __param_type{0, --__unsampled_sz}) < __n)
 	  {
-	    *__out++ = *__first;
+	    *___out++ = *__first;
 	    --__n;
 	  }
-      return __out;
+      return ___out;
     }
 #endif // C++14
 
@@ -5902,7 +5902,7 @@
            typename _Distance, typename _UniformRandomBitGenerator>
     _SampleIterator
     sample(_PopulationIterator __first, _PopulationIterator __last,
-	   _SampleIterator __out, _Distance __n,
+	   _SampleIterator ___out, _Distance __n,
 	   _UniformRandomBitGenerator&& __g)
     {
       using __pop_cat = typename
@@ -5921,7 +5921,7 @@
 
       typename iterator_traits<_PopulationIterator>::difference_type __d = __n;
       return _GLIBCXX_STD_A::
-	__sample(__first, __last, __pop_cat{}, __out, __samp_cat{}, __d,
+	__sample(__first, __last, __pop_cat{}, ___out, __samp_cat{}, __d,
 		 std::forward<_UniformRandomBitGenerator>(__g));
     }
 #endif // __glibcxx_sample
diff -Naur 15.2.0-orig/bits/stl_algobase.h 15.2.0/bits/stl_algobase.h
--- 15.2.0-orig/bits/stl_algobase.h	2025-08-24 15:44:46.298239000 +0200
+++ 15.2.0/bits/stl_algobase.h	2025-08-24 15:44:50.186651300 +0200
@@ -397,14 +397,14 @@
   template<bool _IsMove, typename _OutIter, typename _InIter>
     __attribute__((__always_inline__)) _GLIBCXX20_CONSTEXPR
     inline void
-    __assign_one(_OutIter& __out, _InIter& __in)
+    __assign_one(_OutIter& ___out, _InIter& ___in)
     {
 #if __cplusplus >= 201103L
       if constexpr (_IsMove)
-	*__out = std::move(*__in);
+	*___out = std::move(*___in);
       else
 #endif
-	*__out = *__in;
+	*___out = *___in;
     }
 
   template<bool _IsMove, typename _InIter, typename _Sent, typename _OutIter>
diff -Naur 15.2.0-orig/bits/stl_pair.h 15.2.0/bits/stl_pair.h
--- 15.2.0-orig/bits/stl_pair.h	2025-08-24 15:44:46.300153200 +0200
+++ 15.2.0/bits/stl_pair.h	2025-08-24 15:44:50.358567700 +0200
@@ -106,19 +106,19 @@
 
   template<size_t _Int, class _Tp1, class _Tp2>
     constexpr typename tuple_element<_Int, pair<_Tp1, _Tp2>>::type&
-    get(pair<_Tp1, _Tp2>& __in) noexcept;
+    get(pair<_Tp1, _Tp2>& ___in) noexcept;
 
   template<size_t _Int, class _Tp1, class _Tp2>
     constexpr typename tuple_element<_Int, pair<_Tp1, _Tp2>>::type&&
-    get(pair<_Tp1, _Tp2>&& __in) noexcept;
+    get(pair<_Tp1, _Tp2>&& ___in) noexcept;
 
   template<size_t _Int, class _Tp1, class _Tp2>
     constexpr const typename tuple_element<_Int, pair<_Tp1, _Tp2>>::type&
-    get(const pair<_Tp1, _Tp2>& __in) noexcept;
+    get(const pair<_Tp1, _Tp2>& ___in) noexcept;
 
   template<size_t _Int, class _Tp1, class _Tp2>
     constexpr const typename tuple_element<_Int, pair<_Tp1, _Tp2>>::type&&
-    get(const pair<_Tp1, _Tp2>&& __in) noexcept;
+    get(const pair<_Tp1, _Tp2>&& ___in) noexcept;
 
   template<size_t __i, typename... _Elements>
     constexpr __tuple_element_t<__i, tuple<_Elements...>>&
@@ -1280,23 +1280,23 @@
 
   template<size_t _Int, class _Tp1, class _Tp2>
     constexpr typename tuple_element<_Int, pair<_Tp1, _Tp2>>::type&
-    get(pair<_Tp1, _Tp2>& __in) noexcept
-    { return __pair_get<_Int>::__get(__in); }
+    get(pair<_Tp1, _Tp2>& ___in) noexcept
+    { return __pair_get<_Int>::__get(___in); }
 
   template<size_t _Int, class _Tp1, class _Tp2>
     constexpr typename tuple_element<_Int, pair<_Tp1, _Tp2>>::type&&
-    get(pair<_Tp1, _Tp2>&& __in) noexcept
-    { return __pair_get<_Int>::__move_get(std::move(__in)); }
+    get(pair<_Tp1, _Tp2>&& ___in) noexcept
+    { return __pair_get<_Int>::__move_get(std::move(___in)); }
 
   template<size_t _Int, class _Tp1, class _Tp2>
     constexpr const typename tuple_element<_Int, pair<_Tp1, _Tp2>>::type&
-    get(const pair<_Tp1, _Tp2>& __in) noexcept
-    { return __pair_get<_Int>::__const_get(__in); }
+    get(const pair<_Tp1, _Tp2>& ___in) noexcept
+    { return __pair_get<_Int>::__const_get(___in); }
 
   template<size_t _Int, class _Tp1, class _Tp2>
     constexpr const typename tuple_element<_Int, pair<_Tp1, _Tp2>>::type&&
-    get(const pair<_Tp1, _Tp2>&& __in) noexcept
-    { return __pair_get<_Int>::__const_move_get(std::move(__in)); }
+    get(const pair<_Tp1, _Tp2>&& ___in) noexcept
+    { return __pair_get<_Int>::__const_move_get(std::move(___in)); }
 
 
 #ifdef __glibcxx_tuples_by_type // C++ >= 14
diff -Naur 15.2.0-orig/bits/stl_uninitialized.h 15.2.0/bits/stl_uninitialized.h
--- 15.2.0-orig/bits/stl_uninitialized.h	2025-08-24 15:44:46.300153200 +0200
+++ 15.2.0/bits/stl_uninitialized.h	2025-08-24 15:44:50.450365900 +0200
@@ -1335,9 +1335,9 @@
 	    {
 	      // Can't use memcpy. Wrap the pointer so that __relocate_a_1
 	      // resolves to the non-trivial overload above.
-	      __gnu_cxx::__normal_iterator<_Tp*, void> __out(__result);
-	      __out = std::__relocate_a_1(__first, __last, __out, __alloc);
-	      return __out.base();
+	      __gnu_cxx::__normal_iterator<_Tp*, void> ___out(__result);
+	      ___out = std::__relocate_a_1(__first, __last, ___out, __alloc);
+	      return ___out.base();
 	    }
 #endif
 	  __builtin_memcpy(__result, __first, __count * sizeof(_Tp));
diff -Naur 15.2.0-orig/charconv 15.2.0/charconv
--- 15.2.0-orig/charconv	2025-08-24 15:44:46.130106500 +0200
+++ 15.2.0/charconv	2025-08-24 15:44:50.712830500 +0200
@@ -573,25 +573,25 @@
       _Up __val = 0;
 
       const auto __start = __first;
-      bool __valid;
+      bool ___valid;
       if ((__base & (__base - 1)) == 0)
 	{
 	  if (__base <= 8)
-	    __valid = __detail::__from_chars_pow2_base<true>(__first, __last, __val, __base);
+	    ___valid = __detail::__from_chars_pow2_base<true>(__first, __last, __val, __base);
 	  else
-	    __valid = __detail::__from_chars_pow2_base<false>(__first, __last, __val, __base);
+	    ___valid = __detail::__from_chars_pow2_base<false>(__first, __last, __val, __base);
 	}
       else if (__base <= 10)
-	__valid = __detail::__from_chars_alnum<true>(__first, __last, __val, __base);
+	___valid = __detail::__from_chars_alnum<true>(__first, __last, __val, __base);
       else
-	__valid = __detail::__from_chars_alnum<false>(__first, __last, __val, __base);
+	___valid = __detail::__from_chars_alnum<false>(__first, __last, __val, __base);
 
       if (__builtin_expect(__first == __start, 0))
 	__res.ec = errc::invalid_argument;
       else
 	{
 	  __res.ptr = __first;
-	  if (!__valid)
+	  if (!___valid)
 	    __res.ec = errc::result_out_of_range;
 	  else
 	    {
diff -Naur 15.2.0-orig/experimental/algorithm 15.2.0/experimental/algorithm
--- 15.2.0-orig/experimental/algorithm	2025-08-24 15:44:46.251283500 +0200
+++ 15.2.0/experimental/algorithm	2025-08-24 15:44:51.079524600 +0200
@@ -63,7 +63,7 @@
            typename _Distance, typename _UniformRandomNumberGenerator>
     _SampleIterator
     sample(_PopulationIterator __first, _PopulationIterator __last,
-	   _SampleIterator __out, _Distance __n,
+	   _SampleIterator ___out, _Distance __n,
 	   _UniformRandomNumberGenerator&& __g)
     {
       using __pop_cat = typename
@@ -82,7 +82,7 @@
 
       typename iterator_traits<_PopulationIterator>::difference_type __d = __n;
       return _GLIBCXX_STD_A::
-	__sample(__first, __last, __pop_cat{}, __out, __samp_cat{}, __d,
+	__sample(__first, __last, __pop_cat{}, ___out, __samp_cat{}, __d,
 		 std::forward<_UniformRandomNumberGenerator>(__g));
     }
 
@@ -90,9 +90,9 @@
            typename _Distance>
     inline _SampleIterator
     sample(_PopulationIterator __first, _PopulationIterator __last,
-	   _SampleIterator __out, _Distance __n)
+	   _SampleIterator ___out, _Distance __n)
     {
-      return experimental::sample(__first, __last, __out, __n,
+      return experimental::sample(__first, __last, ___out, __n,
 				  _S_randint_engine());
     }
 
diff -Naur 15.2.0-orig/experimental/bits/shared_ptr.h 15.2.0/experimental/bits/shared_ptr.h
--- 15.2.0-orig/experimental/bits/shared_ptr.h	2025-08-24 15:44:46.251283500 +0200
+++ 15.2.0/experimental/bits/shared_ptr.h	2025-08-24 15:44:51.130045600 +0200
@@ -601,20 +601,20 @@
      bool atomic_compare_exchange_weak_explicit(shared_ptr<_Tp>* __p,
 						shared_ptr<_Tp>* __v,
 						shared_ptr<_Tp> __w,
-						memory_order __success,
+						memory_order ___success,
 						memory_order __failure)
      { return std::atomic_compare_exchange_weak_explicit<_Tp>(__p, __v, __w,
-							      __success,
+							      ___success,
 							      __failure); }
 
    template<typename _Tp>
      bool atomic_compare_exchange_strong_explicit(shared_ptr<_Tp>* __p,
 						  shared_ptr<_Tp>* __v,
 						  shared_ptr<_Tp> __w,
-						  memory_order __success,
+						  memory_order ___success,
 						  memory_order __failure)
      { return std::atomic_compare_exchange_strong_explicit<_Tp>(__p, __v, __w,
-								__success,
+								___success,
 								__failure); }
 
   //enable_shared_from_this
diff -Naur 15.2.0-orig/experimental/bits/simd.h 15.2.0/experimental/bits/simd.h
--- 15.2.0-orig/experimental/bits/simd.h	2025-08-24 15:44:46.251283500 +0200
+++ 15.2.0/experimental/bits/simd.h	2025-08-24 15:44:51.201524000 +0200
@@ -2291,20 +2291,20 @@
 	  typename _TVT = _VectorTraits<_Tp>,
 	  typename _R = __vector_type_t<typename _TVT::value_type, _TVT::_S_full_size / _SplitBy>>
   _GLIBCXX_SIMD_INTRINSIC constexpr _R
-  __extract(_Tp __in)
+  __extract(_Tp ___in)
   {
     using value_type = typename _TVT::value_type;
 #if _GLIBCXX_SIMD_X86INTRIN // {{{
     if constexpr (sizeof(_Tp) == 64 && _SplitBy == 4 && _Offset > 0)
       {
 	if constexpr (__have_avx512dq && is_same_v<double, value_type>)
-	  return _mm512_extractf64x2_pd(__to_intrin(__in), _Offset);
+	  return _mm512_extractf64x2_pd(__to_intrin(___in), _Offset);
 	else if constexpr (is_floating_point_v<value_type>)
 	  return __vector_bitcast<value_type>(
-	    _mm512_extractf32x4_ps(__intrin_bitcast<__m512>(__in), _Offset));
+	    _mm512_extractf32x4_ps(__intrin_bitcast<__m512>(___in), _Offset));
 	else
 	  return reinterpret_cast<_R>(
-	    _mm512_extracti32x4_epi32(__intrin_bitcast<__m512i>(__in),
+	    _mm512_extracti32x4_epi32(__intrin_bitcast<__m512i>(___in),
 				      _Offset));
       }
     else
@@ -2317,12 +2317,12 @@
 	static_assert(sizeof(_R) % sizeof(_W) == 0);
 	constexpr int __return_width = sizeof(_R) / sizeof(_W);
 	using _Up = __vector_type_t<_W, __return_width>;
-	const auto __x = __vector_bitcast<_W>(__in);
+	const auto __x = __vector_bitcast<_W>(___in);
 #else
       constexpr int __return_width = _TVT::_S_full_size / _SplitBy;
       using _Up = _R;
       const __vector_type_t<value_type, _TVT::_S_full_size>& __x
-	= __in; // only needed for _Tp = _SimdWrapper<value_type, _Np>
+	= ___in; // only needed for _Tp = _SimdWrapper<value_type, _Np>
 #endif
 	constexpr int _O = _Offset * __return_width;
 	return __call_with_subscripts<__return_width, _O>(
diff -Naur 15.2.0-orig/experimental/internet 15.2.0/experimental/internet
--- 15.2.0-orig/experimental/internet	2025-08-24 15:44:46.251283500 +0200
+++ 15.2.0/experimental/internet	2025-08-24 15:44:51.565993500 +0200
@@ -836,9 +836,9 @@
     if (__p == nullptr)
       return __make_address_v6(__str, nullptr, __ec);
     char __buf[64];
-    char* __out = __buf;
+    char* ___out = __buf;
     bool __skip_leading_zero = true;
-    while (__str < __p && __out < std::end(__buf))
+    while (__str < __p && ___out < std::end(__buf))
       {
 	if (!__skip_leading_zero || *__str != '0')
 	  {
@@ -846,18 +846,18 @@
 	      __skip_leading_zero = true;
 	    else
 	      __skip_leading_zero = false;
-	    *__out = *__str;
+	    *___out = *__str;
 	  }
 	__str++;
       }
-    if (__out == std::end(__buf))
+    if (___out == std::end(__buf))
       {
 	__ec = std::make_error_code(std::errc::invalid_argument);
 	return {};
       }
     else
       {
-	*__out = '\0';
+	*___out = '\0';
 	return __make_address_v6(__buf, __p + 1, __ec);
       }
   }
@@ -873,10 +873,10 @@
     if (__pos == string::npos)
       return __make_address_v6(__str.c_str(), nullptr, __ec);
     char __buf[64];
-    char* __out = __buf;
+    char* ___out = __buf;
     bool __skip_leading_zero = true;
     size_t __n = 0;
-    while (__n < __pos && __out < std::end(__buf))
+    while (__n < __pos && ___out < std::end(__buf))
       {
 	if (!__skip_leading_zero || __str[__n] != '0')
 	  {
@@ -884,18 +884,18 @@
 	      __skip_leading_zero = true;
 	    else
 	      __skip_leading_zero = false;
-	    *__out = __str[__n];
+	    *___out = __str[__n];
 	  }
 	__n++;
       }
-    if (__out == std::end(__buf))
+    if (___out == std::end(__buf))
       {
 	__ec = std::make_error_code(std::errc::invalid_argument);
 	return {};
       }
     else
       {
-	*__out = '\0';
+	*___out = '\0';
 	return __make_address_v6(__buf, __str.c_str() + __pos + 1, __ec);
       }
   }
@@ -908,20 +908,20 @@
   make_address_v6(string_view __str, error_code& __ec) noexcept
   {
     char __buf[64];
-    char* __out = __buf;
+    char* ___out = __buf;
     char* __scope = nullptr;
     bool __skip_leading_zero = true;
     size_t __n = 0;
-    while (__n < __str.length() && __out < std::end(__buf))
+    while (__n < __str.length() && ___out < std::end(__buf))
       {
 	if (__str[__n] == '%')
 	  {
 	    if (__scope)
-	      __out = std::end(__buf);
+	      ___out = std::end(__buf);
 	    else
 	      {
-		*__out = '\0';
-		__scope = ++__out;
+		*___out = '\0';
+		__scope = ++___out;
 		__skip_leading_zero = true;
 	      }
 	  }
@@ -931,19 +931,19 @@
 	      __skip_leading_zero = true;
 	    else
 	      __skip_leading_zero = false;
-	    *__out = __str[__n];
-	    __out++;
+	    *___out = __str[__n];
+	    ___out++;
 	  }
 	__n++;
       }
-    if (__out == std::end(__buf))
+    if (___out == std::end(__buf))
       {
 	__ec = std::make_error_code(std::errc::invalid_argument);
 	return {};
       }
     else
       {
-	*__out = '\0';
+	*___out = '\0';
 	return __make_address_v6(__buf, __scope, __ec);
       }
   }
diff -Naur 15.2.0-orig/ext/algorithm 15.2.0/ext/algorithm
--- 15.2.0-orig/ext/algorithm	2025-08-24 15:44:46.223527100 +0200
+++ 15.2.0/ext/algorithm	2025-08-24 15:44:51.691981000 +0200
@@ -262,7 +262,7 @@
 	   typename _Distance>
     _OutputIterator
     random_sample_n(_ForwardIterator __first, _ForwardIterator __last,
-                    _OutputIterator __out, const _Distance __n)
+                    _OutputIterator ___out, const _Distance __n)
     {
       // concept requirements
       __glibcxx_function_requires(_ForwardIteratorConcept<_ForwardIterator>)
@@ -277,14 +277,14 @@
 	{
 	  if ((std::rand() % __remaining) < __m)
 	    {
-	      *__out = *__first;
-	      ++__out;
+	      *___out = *__first;
+	      ++___out;
 	      --__m;
 	    }
 	  --__remaining;
 	  ++__first;
 	}
-      return __out;
+      return ___out;
     }
 
   /**
@@ -296,7 +296,7 @@
 	   typename _Distance, typename _RandomNumberGenerator>
     _OutputIterator
     random_sample_n(_ForwardIterator __first, _ForwardIterator __last,
-                   _OutputIterator __out, const _Distance __n,
+                   _OutputIterator ___out, const _Distance __n,
 		   _RandomNumberGenerator& __rand)
     {
       // concept requirements
@@ -314,44 +314,44 @@
 	{
 	  if (__rand(__remaining) < __m)
 	    {
-	      *__out = *__first;
-	      ++__out;
+	      *___out = *__first;
+	      ++___out;
 	      --__m;
 	    }
 	  --__remaining;
 	  ++__first;
 	}
-      return __out;
+      return ___out;
     }
 
   template<typename _InputIterator, typename _RandomAccessIterator,
 	   typename _Distance>
     _RandomAccessIterator
     __random_sample(_InputIterator __first, _InputIterator __last,
-		    _RandomAccessIterator __out,
+		    _RandomAccessIterator ___out,
 		    const _Distance __n)
     {
       _Distance __m = 0;
       _Distance __t = __n;
       for ( ; __first != __last && __m < __n; ++__m, ++__first)
-	__out[__m] = *__first;
+	___out[__m] = *__first;
 
       while (__first != __last)
 	{
 	  ++__t;
 	  _Distance __M = std::rand() % (__t);
 	  if (__M < __n)
-	    __out[__M] = *__first;
+	    ___out[__M] = *__first;
 	  ++__first;
 	}
-      return __out + __m;
+      return ___out + __m;
     }
 
   template<typename _InputIterator, typename _RandomAccessIterator,
 	   typename _RandomNumberGenerator, typename _Distance>
     _RandomAccessIterator
     __random_sample(_InputIterator __first, _InputIterator __last,
-		    _RandomAccessIterator __out,
+		    _RandomAccessIterator ___out,
 		    _RandomNumberGenerator& __rand,
 		    const _Distance __n)
     {
@@ -362,17 +362,17 @@
       _Distance __m = 0;
       _Distance __t = __n;
       for ( ; __first != __last && __m < __n; ++__m, ++__first)
-	__out[__m] = *__first;
+	___out[__m] = *__first;
 
       while (__first != __last)
 	{
 	  ++__t;
 	  _Distance __M = __rand(__t);
 	  if (__M < __n)
-	    __out[__M] = *__first;
+	    ___out[__M] = *__first;
 	  ++__first;
 	}
-      return __out + __m;
+      return ___out + __m;
     }
 
   /**
diff -Naur 15.2.0-orig/ext/pb_ds/detail/debug_map_base.hpp 15.2.0/ext/pb_ds/detail/debug_map_base.hpp
--- 15.2.0-orig/ext/pb_ds/detail/debug_map_base.hpp	2025-08-24 15:44:46.204365800 +0200
+++ 15.2.0/ext/pb_ds/detail/debug_map_base.hpp	2025-08-24 15:44:51.882596200 +0200
@@ -57,9 +57,9 @@
     // Need std::pair ostream extractor.
     template<typename _CharT, typename _Traits, typename _Tp1, typename _Tp2>
     inline std::basic_ostream<_CharT, _Traits>&
-    operator<<(std::basic_ostream<_CharT, _Traits>& __out,
+    operator<<(std::basic_ostream<_CharT, _Traits>& ___out,
 	       const std::pair<_Tp1, _Tp2>& p)
-    { return (__out << '(' << p.first << ',' << p.second << ')'); }
+    { return (___out << '(' << p.first << ',' << p.second << ')'); }
 
 #define PB_DS_CLASS_T_DEC \
     template<typename Key, typename Eq_Fn, typename Const_Key_Reference>
diff -Naur 15.2.0-orig/ext/random.tcc 15.2.0/ext/random.tcc
--- 15.2.0-orig/ext/random.tcc	2025-08-24 15:44:46.223527100 +0200
+++ 15.2.0/ext/random.tcc	2025-08-24 15:44:52.233038000 +0200
@@ -212,38 +212,38 @@
   namespace {
 
     template<size_t __shift>
-      inline void __rshift(uint32_t *__out, const uint32_t *__in)
+      inline void __rshift(uint32_t *___out, const uint32_t *___in)
       {
-	uint64_t __th = ((static_cast<uint64_t>(__in[3]) << 32)
-			 | static_cast<uint64_t>(__in[2]));
-	uint64_t __tl = ((static_cast<uint64_t>(__in[1]) << 32)
-			 | static_cast<uint64_t>(__in[0]));
+	uint64_t __th = ((static_cast<uint64_t>(___in[3]) << 32)
+			 | static_cast<uint64_t>(___in[2]));
+	uint64_t __tl = ((static_cast<uint64_t>(___in[1]) << 32)
+			 | static_cast<uint64_t>(___in[0]));
 
 	uint64_t __oh = __th >> (__shift * 8);
 	uint64_t __ol = __tl >> (__shift * 8);
 	__ol |= __th << (64 - __shift * 8);
-	__out[1] = static_cast<uint32_t>(__ol >> 32);
-	__out[0] = static_cast<uint32_t>(__ol);
-	__out[3] = static_cast<uint32_t>(__oh >> 32);
-	__out[2] = static_cast<uint32_t>(__oh);
+	___out[1] = static_cast<uint32_t>(__ol >> 32);
+	___out[0] = static_cast<uint32_t>(__ol);
+	___out[3] = static_cast<uint32_t>(__oh >> 32);
+	___out[2] = static_cast<uint32_t>(__oh);
       }
 
 
     template<size_t __shift>
-      inline void __lshift(uint32_t *__out, const uint32_t *__in)
+      inline void __lshift(uint32_t *___out, const uint32_t *___in)
       {
-	uint64_t __th = ((static_cast<uint64_t>(__in[3]) << 32)
-			 | static_cast<uint64_t>(__in[2]));
-	uint64_t __tl = ((static_cast<uint64_t>(__in[1]) << 32)
-			 | static_cast<uint64_t>(__in[0]));
+	uint64_t __th = ((static_cast<uint64_t>(___in[3]) << 32)
+			 | static_cast<uint64_t>(___in[2]));
+	uint64_t __tl = ((static_cast<uint64_t>(___in[1]) << 32)
+			 | static_cast<uint64_t>(___in[0]));
 
 	uint64_t __oh = __th << (__shift * 8);
 	uint64_t __ol = __tl << (__shift * 8);
 	__oh |= __tl >> (64 - __shift * 8);
-	__out[1] = static_cast<uint32_t>(__ol >> 32);
-	__out[0] = static_cast<uint32_t>(__ol);
-	__out[3] = static_cast<uint32_t>(__oh >> 32);
-	__out[2] = static_cast<uint32_t>(__oh);
+	___out[1] = static_cast<uint32_t>(__ol >> 32);
+	___out[0] = static_cast<uint32_t>(__ol);
+	___out[3] = static_cast<uint32_t>(__oh >> 32);
+	___out[2] = static_cast<uint32_t>(__oh);
       }
 
 
diff -Naur 15.2.0-orig/ext/vstring.tcc 15.2.0/ext/vstring.tcc
--- 15.2.0-orig/ext/vstring.tcc	2025-08-24 15:44:46.223527100 +0200
+++ 15.2.0/ext/vstring.tcc	2025-08-24 15:44:52.378135600 +0200
@@ -553,7 +553,7 @@
   template<typename _CharT, typename _Traits, typename _Alloc,
            template <typename, typename, typename> class _Base>
     basic_istream<_CharT, _Traits>&
-    operator>>(basic_istream<_CharT, _Traits>& __in,
+    operator>>(basic_istream<_CharT, _Traits>& ___in,
 	       __gnu_cxx::__versa_string<_CharT, _Traits,
 	                                 _Alloc, _Base>& __str)
     {
@@ -568,7 +568,7 @@
 
       __size_type __extracted = 0;
       typename __ios_base::iostate __err = __ios_base::goodbit;
-      typename __istream_type::sentry __cerb(__in, false);
+      typename __istream_type::sentry __cerb(___in, false);
       if (__cerb)
 	{
 	  __try
@@ -577,12 +577,12 @@
 	      __str.erase();
 	      _CharT __buf[128];
 	      __size_type __len = 0;
-	      const streamsize __w = __in.width();
+	      const streamsize __w = ___in.width();
 	      const __size_type __n = __w > 0 ? static_cast<__size_type>(__w)
 		                              : __str.max_size();
-	      const __ctype_type& __ct = use_facet<__ctype_type>(__in.getloc());
+	      const __ctype_type& __ct = use_facet<__ctype_type>(___in.getloc());
 	      const __int_type __eof = _Traits::eof();
-	      __int_type __c = __in.rdbuf()->sgetc();
+	      __int_type __c = ___in.rdbuf()->sgetc();
 
 	      while (__extracted < __n
 		     && !_Traits::eq_int_type(__c, __eof)
@@ -596,17 +596,17 @@
 		    }
 		  __buf[__len++] = _Traits::to_char_type(__c);
 		  ++__extracted;
-		  __c = __in.rdbuf()->snextc();
+		  __c = ___in.rdbuf()->snextc();
 		}
 	      __str.append(__buf, __len);
 
 	      if (_Traits::eq_int_type(__c, __eof))
 		__err |= __ios_base::eofbit;
-	      __in.width(0);
+	      ___in.width(0);
 	    }
 	  __catch(__cxxabiv1::__forced_unwind&)
 	    {
-	      __in._M_setstate(__ios_base::badbit);
+	      ___in._M_setstate(__ios_base::badbit);
 	      __throw_exception_again;
 	    }
 	  __catch(...)
@@ -614,21 +614,21 @@
 	      // _GLIBCXX_RESOLVE_LIB_DEFECTS
 	      // 91. Description of operator>> and getline() for string<>
 	      // might cause endless loop
-	      __in._M_setstate(__ios_base::badbit);
+	      ___in._M_setstate(__ios_base::badbit);
 	    }
 	}
       // 211.  operator>>(istream&, string&) doesn't set failbit
       if (!__extracted)
 	__err |= __ios_base::failbit;
       if (__err)
-	__in.setstate(__err);
-      return __in;
+	___in.setstate(__err);
+      return ___in;
     }      
 
   template<typename _CharT, typename _Traits, typename _Alloc,
            template <typename, typename, typename> class _Base>
     basic_istream<_CharT, _Traits>&
-    getline(basic_istream<_CharT, _Traits>& __in,
+    getline(basic_istream<_CharT, _Traits>& ___in,
 	    __gnu_cxx::__versa_string<_CharT, _Traits, _Alloc, _Base>& __str,
 	    _CharT __delim)
     {
@@ -642,7 +642,7 @@
       __size_type __extracted = 0;
       const __size_type __n = __str.max_size();
       typename __ios_base::iostate __err = __ios_base::goodbit;
-      typename __istream_type::sentry __cerb(__in, true);
+      typename __istream_type::sentry __cerb(___in, true);
       if (__cerb)
 	{
 	  __try
@@ -653,7 +653,7 @@
 	      __size_type __len = 0;
 	      const __int_type __idelim = _Traits::to_int_type(__delim);
 	      const __int_type __eof = _Traits::eof();
-	      __int_type __c = __in.rdbuf()->sgetc();
+	      __int_type __c = ___in.rdbuf()->sgetc();
 
 	      while (__extracted < __n
 		     && !_Traits::eq_int_type(__c, __eof)
@@ -666,7 +666,7 @@
 		    }
 		  __buf[__len++] = _Traits::to_char_type(__c);
 		  ++__extracted;
-		  __c = __in.rdbuf()->snextc();
+		  __c = ___in.rdbuf()->snextc();
 		}
 	      __str.append(__buf, __len);
 
@@ -675,14 +675,14 @@
 	      else if (_Traits::eq_int_type(__c, __idelim))
 		{
 		  ++__extracted;		  
-		  __in.rdbuf()->sbumpc();
+		  ___in.rdbuf()->sbumpc();
 		}
 	      else
 		__err |= __ios_base::failbit;
 	    }
 	  __catch(__cxxabiv1::__forced_unwind&)
 	    {
-	      __in._M_setstate(__ios_base::badbit);
+	      ___in._M_setstate(__ios_base::badbit);
 	      __throw_exception_again;
 	    }
 	  __catch(...)
@@ -690,14 +690,14 @@
 	      // _GLIBCXX_RESOLVE_LIB_DEFECTS
 	      // 91. Description of operator>> and getline() for string<>
 	      // might cause endless loop
-	      __in._M_setstate(__ios_base::badbit);
+	      ___in._M_setstate(__ios_base::badbit);
 	    }
 	}
       if (!__extracted)
 	__err |= __ios_base::failbit;
       if (__err)
-	__in.setstate(__err);
-      return __in;
+	___in.setstate(__err);
+      return ___in;
     }      
 
 _GLIBCXX_END_NAMESPACE_VERSION
diff -Naur 15.2.0-orig/format 15.2.0/format
--- 15.2.0-orig/format	2025-08-24 15:44:46.130106500 +0200
+++ 15.2.0/format	2025-08-24 15:44:52.487093700 +0200
@@ -781,24 +781,24 @@
   template<typename _Out, typename _CharT>
     requires output_iterator<_Out, const _CharT&>
     inline _Out
-    __write(_Out __out, basic_string_view<_CharT> __str)
+    __write(_Out ___out, basic_string_view<_CharT> __str)
     {
       if constexpr (is_same_v<_Out, _Sink_iter<_CharT>>)
 	{
 	  if (__str.size())
-	    __out = __str;
+	    ___out = __str;
 	}
       else
 	for (_CharT __c : __str)
-	  *__out++ = __c;
-      return __out;
+	  *___out++ = __c;
+      return ___out;
     }
 
   // Write STR to OUT with NFILL copies of FILL_CHAR specified by ALIGN.
   // pre: __align != _Align_default
   template<typename _Out, typename _CharT>
     _Out
-    __write_padded(_Out __out, basic_string_view<_CharT> __str,
+    __write_padded(_Out ___out, basic_string_view<_CharT> __str,
 		   _Align __align, size_t __nfill, char32_t __fill_char)
     {
       const size_t __buflen = 0x20;
@@ -848,11 +848,11 @@
 	    basic_string<_CharT> __padstr(__v.begin(), __v.end());
 	    __padding = __padstr;
 	    while (__l-- > 0)
-	      __out = __format::__write(std::move(__out), __padding);
-	    __out = __format::__write(std::move(__out), __str);
+	      ___out = __format::__write(std::move(___out), __padding);
+	    ___out = __format::__write(std::move(___out), __str);
 	    while (__r-- > 0)
-	      __out = __format::__write(std::move(__out), __padding);
-	    return __out;
+	      ___out = __format::__write(std::move(___out), __padding);
+	    return ___out;
 	  }
 
       if (__max < __buflen)
@@ -861,11 +861,11 @@
 	__max = __buflen;
 
       char_traits<_CharT>::assign(__padding_chars, __max, __fill_char);
-      __pad(__l, __out);
-      __out = __format::__write(std::move(__out), __str);
-      __pad(__r, __out);
+      __pad(__l, ___out);
+      ___out = __format::__write(std::move(___out), __str);
+      __pad(__r, ___out);
 
-      return __out;
+      return ___out;
     }
 
   // Write STR to OUT, with alignment and padding as determined by SPEC.
@@ -1008,7 +1008,7 @@
   using uint_least32_t = __UINT_LEAST32_TYPE__;
   template<typename _Out, typename _CharT>
     _Out
-    __write_escape_seq(_Out __out, uint_least32_t __val,
+    __write_escape_seq(_Out ___out, uint_least32_t __val,
 		       basic_string_view<_CharT> __prefix)
     {
       using _Str_view = basic_string_view<_CharT>;
@@ -1018,46 +1018,46 @@
 	__buf,
 	std::__to_chars_i<uint_least32_t>(__buf, __buf + __max, __val, 16).ptr);
 
-      __out = __format::__write(__out, __prefix);
-      *__out = _Separators<_CharT>::_S_braces()[0];
-      ++__out;
+      ___out = __format::__write(___out, __prefix);
+      *___out = _Separators<_CharT>::_S_braces()[0];
+      ++___out;
       if constexpr (is_same_v<char, _CharT>)
-	__out = __format::__write(__out, __narrow);
+	___out = __format::__write(___out, __narrow);
 #ifdef _GLIBCXX_USE_WCHAR_T
       else
 	{
 	  _CharT __wbuf[__max];
 	  const size_t __n = __narrow.size();
 	  std::__to_wstring_numeric(__narrow.data(), __n, __wbuf);
-	  __out = __format::__write(__out, _Str_view(__wbuf, __n));
+	  ___out = __format::__write(___out, _Str_view(__wbuf, __n));
 	}
 #endif
-      *__out = _Separators<_CharT>::_S_braces()[1];
-      return ++__out;
+      *___out = _Separators<_CharT>::_S_braces()[1];
+      return ++___out;
     }
 
   template<typename _Out, typename _CharT>
     _Out
-    __write_escaped_char(_Out __out, _CharT __c)
+    __write_escaped_char(_Out ___out, _CharT __c)
     {
       using _UChar = make_unsigned_t<_CharT>;
       using _Esc = _Escapes<_CharT>;
       switch (__c)
 	{
 	  case _Esc::_S_tab()[0]:
-	    return __format::__write(__out, _Esc::_S_tab().substr(1, 2));
+	    return __format::__write(___out, _Esc::_S_tab().substr(1, 2));
 	  case _Esc::_S_newline()[0]:
-	    return __format::__write(__out, _Esc::_S_newline().substr(1, 2));
+	    return __format::__write(___out, _Esc::_S_newline().substr(1, 2));
 	  case _Esc::_S_return()[0]:
-	    return __format::__write(__out, _Esc::_S_return().substr(1, 2));
+	    return __format::__write(___out, _Esc::_S_return().substr(1, 2));
 	  case _Esc::_S_bslash()[0]:
-	    return __format::__write(__out, _Esc::_S_bslash().substr(1, 2));
+	    return __format::__write(___out, _Esc::_S_bslash().substr(1, 2));
 	  case _Esc::_S_quote()[0]:
-	    return __format::__write(__out, _Esc::_S_quote().substr(1, 2));
+	    return __format::__write(___out, _Esc::_S_quote().substr(1, 2));
 	  case _Esc::_S_apos()[0]:
-	    return __format::__write(__out, _Esc::_S_apos().substr(1, 2));
+	    return __format::__write(___out, _Esc::_S_apos().substr(1, 2));
 	  default:
-	    return __format::__write_escape_seq(__out,
+	    return __format::__write_escape_seq(___out,
 				static_cast<_UChar>(__c),
 						_Esc::_S_u());
 	}
@@ -1065,7 +1065,7 @@
 
   template<typename _CharT, typename _Out>
     _Out
-    __write_escaped_ascii(_Out __out,
+    __write_escaped_ascii(_Out ___out,
 			  basic_string_view<_CharT> __str,
 			  _Term_char __term)
     {
@@ -1081,21 +1081,21 @@
 	  ++__print;
 
 	if (__print != __first)
-	  __out = __format::__write(__out, _Str_view(__first, __print));
+	  ___out = __format::__write(___out, _Str_view(__first, __print));
 
 	if (__print == __last)
-	  return __out;
+	  return ___out;
 
 	__first = __print;
-	__out = __format::__write_escaped_char(__out, *__first);
+	___out = __format::__write_escaped_char(___out, *__first);
 	++__first;
       }
-      return __out;
+      return ___out;
     }
 
   template<typename _CharT, typename _Out>
     _Out
-    __write_escaped_unicode(_Out __out,
+    __write_escaped_unicode(_Out ___out,
 			    basic_string_view<_CharT> __str,
 			    _Term_char __term)
     {
@@ -1146,46 +1146,46 @@
 	    }
 
 	  if (__print != __first)
-	    __out = __format::__write(__out, _Str_view(__first.base(), __print.base()));
+	    ___out = __format::__write(___out, _Str_view(__first.base(), __print.base()));
 
 	  if (__print == __last)
-	    return __out;
+	    return ___out;
 
 	  __first = __print;
 	  if (__esc_ascii)
-	    __out = __format::__write_escaped_char(__out, *__first.base());
+	    ___out = __format::__write_escaped_char(___out, *__first.base());
 	  else if (__esc_unicode)
-	    __out = __format::__write_escape_seq(__out, *__first, _Esc::_S_u());
+	    ___out = __format::__write_escape_seq(___out, *__first, _Esc::_S_u());
 	  else // __esc_replace
 	    for (_CharT __c : _Str_view(__first.base(), __first._M_units()))
-	      __out = __format::__write_escape_seq(__out,
+	      ___out = __format::__write_escape_seq(___out,
 						   static_cast<_UChar>(__c),
 						   _Esc::_S_x());
 	  __prev_esc = true;
 	  ++__first;
 
 	}
-      return __out;
+      return ___out;
     }
 
   template<typename _CharT, typename _Out>
     _Out
-    __write_escaped(_Out __out,  basic_string_view<_CharT> __str, _Term_char __term)
+    __write_escaped(_Out ___out,  basic_string_view<_CharT> __str, _Term_char __term)
     {
-      *__out = _Escapes<_CharT>::_S_term(__term);
-      ++__out;
+      *___out = _Escapes<_CharT>::_S_term(__term);
+      ++___out;
 
       if constexpr (__unicode::__literal_encoding_is_unicode<_CharT>())
-	__out = __format::__write_escaped_unicode(__out, __str, __term);
+	___out = __format::__write_escaped_unicode(___out, __str, __term);
       else if constexpr (is_same_v<char, _CharT>
 			  && __unicode::__literal_encoding_is_extended_ascii())
-	__out = __format::__write_escaped_ascii(__out, __str, __term);
+	___out = __format::__write_escaped_ascii(___out, __str, __term);
       else
 	// TODO Handle non-ascii extended encoding
-	__out = __format::__write_escaped_ascii(__out, __str, __term);
+	___out = __format::__write_escaped_ascii(___out, __str, __term);
 
-      *__out = _Escapes<_CharT>::_S_term(__term);
-      return ++__out;
+      *___out = _Escapes<_CharT>::_S_term(__term);
+      return ++___out;
     }
 
   // A lightweight optional<locale>.
@@ -1629,7 +1629,7 @@
 #if __has_builtin(__builtin_toupper)
 		  *__p = __builtin_toupper(*__p);
 #else
-		  *__p = std::toupper(*__p);
+		  *__p = (std::toupper)(*__p);
 #endif
 	      break;
 	    default:
@@ -1707,13 +1707,13 @@
 	{
 	  using _Esc = _Escapes<_CharT>;
 	  constexpr auto __term = __format::_Term_char::_Tc_apos;
-	  const basic_string_view<_CharT> __in(&__c, 1u);
+	  const basic_string_view<_CharT> ___in(&__c, 1u);
 	  if (_M_spec._M_get_width(__fc) <= 3u)
-	    return __format::__write_escaped(__fc.out(), __in, __term);
+	    return __format::__write_escaped(__fc.out(), ___in, __term);
 
 	  _CharT __buf[12];
 	  __format::_Fixedbuf_sink<_CharT> __sink(__buf);
-	  __format::__write_escaped(__sink.out(), __in, __term);
+	  __format::__write_escaped(__sink.out(), ___in, __term);
 
 	  const basic_string_view<_CharT> __escaped = __sink.view();
 	  size_t __estimated_width;
@@ -1800,7 +1800,7 @@
 	  _Align __align = _M_spec._M_align;
 
 	  size_t __nfill = __width - __str.size();
-	  auto __out = __fc.out();
+	  auto ___out = __fc.out();
 	  if (__align == _Align_default)
 	    {
 	      __align = _Align_right;
@@ -1810,7 +1810,7 @@
 		  // Write sign and base prefix before zero filling.
 		  if (__prefix_len != 0)
 		    {
-		      __out = __format::__write(std::move(__out),
+		      ___out = __format::__write(std::move(___out),
 						__str.substr(0, __prefix_len));
 		      __str.remove_prefix(__prefix_len);
 		    }
@@ -1818,7 +1818,7 @@
 	      else
 		__fill_char = _CharT(' ');
 	    }
-	  return __format::__write_padded(std::move(__out), __str,
+	  return __format::__write_padded(std::move(___out), __str,
 					  __align, __nfill, __fill_char);
 	}
 
@@ -2161,7 +2161,7 @@
 	  if (__upper)
 	    {
 	      for (char* __p = __start; __p != __res.ptr; ++__p)
-		*__p = std::toupper(*__p);
+		*__p = (std::toupper)(*__p);
 	    }
 
 	  bool __have_sign = true;
@@ -2289,7 +2289,7 @@
 	  _Align __align = _M_spec._M_align;
 
 	  size_t __nfill = __width - __str.size();
-	  auto __out = __fc.out();
+	  auto ___out = __fc.out();
 	  if (__align == _Align_default)
 	    {
 	      __align = _Align_right;
@@ -2299,14 +2299,14 @@
 		  // Write sign before zero filling.
 		  if (!__format::__is_xdigit(__narrow_str[0]))
 		    {
-		      *__out++ = __str[0];
+		      *___out++ = __str[0];
 		      __str.remove_prefix(1);
 		    }
 		}
 	      else
 		__fill_char = _CharT(' ');
 	    }
-	  return __format::__write_padded(std::move(__out), __str,
+	  return __format::__write_padded(std::move(___out), __str,
 					  __align, __nfill, __fill_char);
 	}
 
@@ -2931,7 +2931,7 @@
 #if __has_builtin(__builtin_toupper)
 		*__p = __builtin_toupper(*__p);
 #else
-		*__p = std::toupper(*__p);
+		*__p = (std::toupper)(*__p);
 #endif
 	    }
 #endif
@@ -2955,12 +2955,12 @@
 	      if (__width <= __str.size())
 		return __format::__write(__fc.out(), __str);
 
-	      auto __out = __fc.out();
+	      auto ___out = __fc.out();
 	      // Write "0x" or "0X" prefix before zero-filling.
-	      __out = __format::__write(std::move(__out), __str.substr(0, 2));
+	      ___out = __format::__write(std::move(___out), __str.substr(0, 2));
 	      __str.remove_prefix(2);
 	      size_t __nfill = __width - __n;
-	      return __format::__write_padded(std::move(__out), __str,
+	      return __format::__write_padded(std::move(___out), __str,
 					      __format::_Align_right,
 					      __nfill, _CharT('0'));
 	    }
@@ -3432,8 +3432,8 @@
     public:
       [[__gnu__::__always_inline__]]
       explicit
-      _Iter_sink(_OutIter __out, iter_difference_t<_OutIter> __max = -1)
-      : _M_out(std::move(__out)), _M_max(__max)
+      _Iter_sink(_OutIter ___out, iter_difference_t<_OutIter> __max = -1)
+      : _M_out(std::move(___out)), _M_max(__max)
       { }
 
       using _Sink<_CharT>::out;
@@ -3542,9 +3542,9 @@
 
     public:
       explicit
-      _Iter_sink(_OutIter __out, iter_difference_t<_OutIter> __n = -1) noexcept
-      : _Sink<_CharT>(_S_make_span(std::to_address(__out), __n, _M_buf)),
-	_M_first(__out), _M_max(__n)
+      _Iter_sink(_OutIter ___out, iter_difference_t<_OutIter> __n = -1) noexcept
+      : _Sink<_CharT>(_S_make_span(std::to_address(___out), __n, _M_buf)),
+	_M_first(___out), _M_max(__n)
       { }
 
       format_to_n_result<_OutIter>
@@ -4386,13 +4386,13 @@
       __format::_Optional_locale _M_loc;
 
       basic_format_context(basic_format_args<basic_format_context> __args,
-			   _Out __out)
-      : _M_args(__args), _M_out(std::move(__out))
+			   _Out ___out)
+      : _M_args(__args), _M_out(std::move(___out))
       { }
 
       basic_format_context(basic_format_args<basic_format_context> __args,
-			   _Out __out, const std::locale& __loc)
-      : _M_args(__args), _M_out(std::move(__out)), _M_loc(__loc)
+			   _Out ___out, const std::locale& __loc)
+      : _M_args(__args), _M_out(std::move(___out)), _M_loc(__loc)
       { }
 
       // _GLIBCXX_RESOLVE_LIB_DEFECTS
@@ -4675,15 +4675,15 @@
 
   template<typename _Out, typename _CharT, typename _Context>
     inline _Out
-    __do_vformat_to(_Out __out, basic_string_view<_CharT> __fmt,
+    __do_vformat_to(_Out ___out, basic_string_view<_CharT> __fmt,
 		    const basic_format_args<_Context>& __args,
 		    const locale* __loc)
     {
-      _Iter_sink<_CharT, _Out> __sink(std::move(__out));
+      _Iter_sink<_CharT, _Out> __sink(std::move(___out));
       _Sink_iter<_CharT> __sink_out;
 
       if constexpr (is_same_v<_Out, _Sink_iter<_CharT>>)
-	__sink_out = __out; // Already a sink iterator, safe to use post-move.
+	__sink_out = ___out; // Already a sink iterator, safe to use post-move.
       else
 	__sink_out = __sink.out();
 
@@ -4815,34 +4815,34 @@
   template<typename _Out> requires output_iterator<_Out, const char&>
     [[__gnu__::__always_inline__]]
     inline _Out
-    vformat_to(_Out __out, string_view __fmt, format_args __args)
-    { return __format::__do_vformat_to(std::move(__out), __fmt, __args); }
+    vformat_to(_Out ___out, string_view __fmt, format_args __args)
+    { return __format::__do_vformat_to(std::move(___out), __fmt, __args); }
 
 #ifdef _GLIBCXX_USE_WCHAR_T
   template<typename _Out> requires output_iterator<_Out, const wchar_t&>
     [[__gnu__::__always_inline__]]
     inline _Out
-    vformat_to(_Out __out, wstring_view __fmt, wformat_args __args)
-    { return __format::__do_vformat_to(std::move(__out), __fmt, __args); }
+    vformat_to(_Out ___out, wstring_view __fmt, wformat_args __args)
+    { return __format::__do_vformat_to(std::move(___out), __fmt, __args); }
 #endif
 
   template<typename _Out> requires output_iterator<_Out, const char&>
     [[__gnu__::__always_inline__]]
     inline _Out
-    vformat_to(_Out __out, const locale& __loc, string_view __fmt,
+    vformat_to(_Out ___out, const locale& __loc, string_view __fmt,
 	       format_args __args)
     {
-      return __format::__do_vformat_to(std::move(__out), __fmt, __args, &__loc);
+      return __format::__do_vformat_to(std::move(___out), __fmt, __args, &__loc);
     }
 
 #ifdef _GLIBCXX_USE_WCHAR_T
   template<typename _Out> requires output_iterator<_Out, const wchar_t&>
     [[__gnu__::__always_inline__]]
     inline _Out
-    vformat_to(_Out __out, const locale& __loc, wstring_view __fmt,
+    vformat_to(_Out ___out, const locale& __loc, wstring_view __fmt,
 	       wformat_args __args)
     {
-      return __format::__do_vformat_to(std::move(__out), __fmt, __args, &__loc);
+      return __format::__do_vformat_to(std::move(___out), __fmt, __args, &__loc);
     }
 #endif
 
@@ -4925,9 +4925,9 @@
   template<typename _Out, typename... _Args>
     requires output_iterator<_Out, const char&>
     inline _Out
-    format_to(_Out __out, format_string<_Args...> __fmt, _Args&&... __args)
+    format_to(_Out ___out, format_string<_Args...> __fmt, _Args&&... __args)
     {
-      return std::vformat_to(std::move(__out), __fmt.get(),
+      return std::vformat_to(std::move(___out), __fmt.get(),
 			     std::make_format_args(__args...));
     }
 
@@ -4935,9 +4935,9 @@
   template<typename _Out, typename... _Args>
     requires output_iterator<_Out, const wchar_t&>
     inline _Out
-    format_to(_Out __out, wformat_string<_Args...> __fmt, _Args&&... __args)
+    format_to(_Out ___out, wformat_string<_Args...> __fmt, _Args&&... __args)
     {
-      return std::vformat_to(std::move(__out), __fmt.get(),
+      return std::vformat_to(std::move(___out), __fmt.get(),
 			     std::make_wformat_args(__args...));
     }
 #endif
@@ -4945,10 +4945,10 @@
   template<typename _Out, typename... _Args>
     requires output_iterator<_Out, const char&>
     inline _Out
-    format_to(_Out __out, const locale& __loc, format_string<_Args...> __fmt,
+    format_to(_Out ___out, const locale& __loc, format_string<_Args...> __fmt,
 	      _Args&&... __args)
     {
-      return std::vformat_to(std::move(__out), __loc, __fmt.get(),
+      return std::vformat_to(std::move(___out), __loc, __fmt.get(),
 			     std::make_format_args(__args...));
     }
 
@@ -4956,10 +4956,10 @@
   template<typename _Out, typename... _Args>
     requires output_iterator<_Out, const wchar_t&>
     inline _Out
-    format_to(_Out __out, const locale& __loc, wformat_string<_Args...> __fmt,
+    format_to(_Out ___out, const locale& __loc, wformat_string<_Args...> __fmt,
 	      _Args&&... __args)
     {
-      return std::vformat_to(std::move(__out), __loc, __fmt.get(),
+      return std::vformat_to(std::move(___out), __loc, __fmt.get(),
 			     std::make_wformat_args(__args...));
     }
 #endif
@@ -4967,10 +4967,10 @@
   template<typename _Out, typename... _Args>
     requires output_iterator<_Out, const char&>
     inline format_to_n_result<_Out>
-    format_to_n(_Out __out, iter_difference_t<_Out> __n,
+    format_to_n(_Out ___out, iter_difference_t<_Out> __n,
 		format_string<_Args...> __fmt, _Args&&... __args)
     {
-      __format::_Iter_sink<char, _Out> __sink(std::move(__out), __n);
+      __format::_Iter_sink<char, _Out> __sink(std::move(___out), __n);
       std::vformat_to(__sink.out(), __fmt.get(),
 		      std::make_format_args(__args...));
       return std::move(__sink)._M_finish();
@@ -4980,10 +4980,10 @@
   template<typename _Out, typename... _Args>
     requires output_iterator<_Out, const wchar_t&>
     inline format_to_n_result<_Out>
-    format_to_n(_Out __out, iter_difference_t<_Out> __n,
+    format_to_n(_Out ___out, iter_difference_t<_Out> __n,
 		wformat_string<_Args...> __fmt, _Args&&... __args)
     {
-      __format::_Iter_sink<wchar_t, _Out> __sink(std::move(__out), __n);
+      __format::_Iter_sink<wchar_t, _Out> __sink(std::move(___out), __n);
       std::vformat_to(__sink.out(), __fmt.get(),
 		      std::make_wformat_args(__args...));
       return std::move(__sink)._M_finish();
@@ -4993,10 +4993,10 @@
   template<typename _Out, typename... _Args>
     requires output_iterator<_Out, const char&>
     inline format_to_n_result<_Out>
-    format_to_n(_Out __out, iter_difference_t<_Out> __n, const locale& __loc,
+    format_to_n(_Out ___out, iter_difference_t<_Out> __n, const locale& __loc,
 		format_string<_Args...> __fmt, _Args&&... __args)
     {
-      __format::_Iter_sink<char, _Out> __sink(std::move(__out), __n);
+      __format::_Iter_sink<char, _Out> __sink(std::move(___out), __n);
       std::vformat_to(__sink.out(), __loc, __fmt.get(),
 		      std::make_format_args(__args...));
       return std::move(__sink)._M_finish();
@@ -5006,10 +5006,10 @@
   template<typename _Out, typename... _Args>
     requires output_iterator<_Out, const wchar_t&>
     inline format_to_n_result<_Out>
-    format_to_n(_Out __out, iter_difference_t<_Out> __n, const locale& __loc,
+    format_to_n(_Out ___out, iter_difference_t<_Out> __n, const locale& __loc,
 		wformat_string<_Args...> __fmt, _Args&&... __args)
     {
-      __format::_Iter_sink<wchar_t, _Out> __sink(std::move(__out), __n);
+      __format::_Iter_sink<wchar_t, _Out> __sink(std::move(___out), __n);
       std::vformat_to(__sink.out(), __loc, __fmt.get(),
 		      std::make_wformat_args(__args...));
       return std::move(__sink)._M_finish();
@@ -5636,23 +5636,23 @@
 	_M_format_elems(_Rg& __rg,
 			basic_format_context<_Out, _CharT>& __fc) const
 	{
-	  auto __out = __format::__write(__fc.out(), _M_open);
+	  auto ___out = __format::__write(__fc.out(), _M_open);
 
 	  auto __first = ranges::begin(__rg);
 	  auto const __last = ranges::end(__rg);
 	  if (__first == __last)
-	    return __format::__write(__out, _M_close);
+	    return __format::__write(___out, _M_close);
 
-	  __fc.advance_to(__out);
-	  __out = _M_fval.format(*__first, __fc);
+	  __fc.advance_to(___out);
+	  ___out = _M_fval.format(*__first, __fc);
 	  for (++__first; __first != __last; ++__first)
 	    {
-	      __out = __format::__write(__out, _M_sep);
-	      __fc.advance_to(__out);
-	      __out = _M_fval.format(*__first, __fc);
+	      ___out = __format::__write(___out, _M_sep);
+	      __fc.advance_to(___out);
+	      ___out = _M_fval.format(*__first, __fc);
 	    }
 
-	  return __format::__write(__out, _M_close);
+	  return __format::__write(___out, _M_close);
 	}
 
       __format::_Spec<_CharT> _M_spec{};
diff -Naur 15.2.0-orig/istream 15.2.0/istream
--- 15.2.0-orig/istream	2025-08-24 15:44:46.136096600 +0200
+++ 15.2.0/istream	2025-08-24 15:44:52.563343000 +0200
@@ -844,17 +844,17 @@
   */
   template<typename _CharT, typename _Traits>
     basic_istream<_CharT, _Traits>&
-    operator>>(basic_istream<_CharT, _Traits>& __in, _CharT& __c);
+    operator>>(basic_istream<_CharT, _Traits>& ___in, _CharT& __c);
 
   template<class _Traits>
     inline basic_istream<char, _Traits>&
-    operator>>(basic_istream<char, _Traits>& __in, unsigned char& __c)
-    { return (__in >> reinterpret_cast<char&>(__c)); }
+    operator>>(basic_istream<char, _Traits>& ___in, unsigned char& __c)
+    { return (___in >> reinterpret_cast<char&>(__c)); }
 
   template<class _Traits>
     inline basic_istream<char, _Traits>&
-    operator>>(basic_istream<char, _Traits>& __in, signed char& __c)
-    { return (__in >> reinterpret_cast<char&>(__c)); }
+    operator>>(basic_istream<char, _Traits>& ___in, signed char& __c)
+    { return (___in >> reinterpret_cast<char&>(__c)); }
   ///@}
 
 
@@ -895,7 +895,7 @@
   template<typename _CharT, typename _Traits>
     __attribute__((__nonnull__(2), __access__(__write_only__, 2)))
     inline basic_istream<_CharT, _Traits>&
-    operator>>(basic_istream<_CharT, _Traits>& __in, _CharT* __s)
+    operator>>(basic_istream<_CharT, _Traits>& ___in, _CharT* __s)
     {
 #ifdef __OPTIMIZE__
       // Function inlining might make the buffer size known, allowing us to
@@ -906,22 +906,22 @@
 	  // There is not even space for the required null terminator.
 	  __glibcxx_assert(__n >= sizeof(_CharT));
 	  // No point calling __istream_extract, but still need to reset width.
-	  __in.width(0);
-	  __in.setstate(ios_base::failbit);
+	  ___in.width(0);
+	  ___in.setstate(ios_base::failbit);
 	}
       else if (__n != (size_t)-1)
 	{
 	  __n /= sizeof(_CharT);
-	  streamsize __w = __in.width();
-	  std::__istream_extract(__in, __s, __n);
-	  if (__in.good() && (__w <= 0 || __n < (size_t)__w))
+	  streamsize __w = ___in.width();
+	  std::__istream_extract(___in, __s, __n);
+	  if (___in.good() && (__w <= 0 || __n < (size_t)__w))
 	    {
 	      // Stopped extracting early to avoid overflowing the buffer,
 	      // but might have stopped anyway (and set eofbit) if at EOF.
-	      const typename _Traits::int_type __c = __in.rdbuf()->sgetc();
+	      const typename _Traits::int_type __c = ___in.rdbuf()->sgetc();
 	      const bool __eof = _Traits::eq_int_type(__c, _Traits::eof());
 	      if (__builtin_expect(__eof, true)) // Assume EOF, not overflow.
-		__in.setstate(ios_base::eofbit);
+		___in.setstate(ios_base::eofbit);
 	    }
 	}
       else
@@ -930,43 +930,43 @@
 	  // Buffer size is unknown, have to assume it's huge.
 	  streamsize __n = __gnu_cxx::__numeric_traits<streamsize>::__max;
 	  __n /= sizeof(_CharT);
-	  std::__istream_extract(__in, __s, __n);
+	  std::__istream_extract(___in, __s, __n);
 	}
-      return __in;
+      return ___in;
     }
 
   template<class _Traits>
     __attribute__((__nonnull__(2), __access__(__write_only__, 2)))
     inline basic_istream<char, _Traits>&
-    operator>>(basic_istream<char, _Traits>& __in, unsigned char* __s)
-    { return __in >> reinterpret_cast<char*>(__s); }
+    operator>>(basic_istream<char, _Traits>& ___in, unsigned char* __s)
+    { return ___in >> reinterpret_cast<char*>(__s); }
 
   template<class _Traits>
     __attribute__((__nonnull__(2), __access__(__write_only__, 2)))
     inline basic_istream<char, _Traits>&
-    operator>>(basic_istream<char, _Traits>& __in, signed char* __s)
-    { return __in >> reinterpret_cast<char*>(__s); }
+    operator>>(basic_istream<char, _Traits>& ___in, signed char* __s)
+    { return ___in >> reinterpret_cast<char*>(__s); }
 #else
   // _GLIBCXX_RESOLVE_LIB_DEFECTS
   // 2499. operator>>(istream&, char*) makes it hard to avoid buffer overflows
   template<typename _CharT, typename _Traits, size_t _Num>
     inline basic_istream<_CharT, _Traits>&
-    operator>>(basic_istream<_CharT, _Traits>& __in, _CharT (&__s)[_Num])
+    operator>>(basic_istream<_CharT, _Traits>& ___in, _CharT (&__s)[_Num])
     {
       static_assert(_Num <= __gnu_cxx::__numeric_traits<streamsize>::__max);
-      std::__istream_extract(__in, __s, _Num);
-      return __in;
+      std::__istream_extract(___in, __s, _Num);
+      return ___in;
     }
 
   template<class _Traits, size_t _Num>
     inline basic_istream<char, _Traits>&
-    operator>>(basic_istream<char, _Traits>& __in, unsigned char (&__s)[_Num])
-    { return __in >> reinterpret_cast<char(&)[_Num]>(__s); }
+    operator>>(basic_istream<char, _Traits>& ___in, unsigned char (&__s)[_Num])
+    { return ___in >> reinterpret_cast<char(&)[_Num]>(__s); }
 
   template<class _Traits, size_t _Num>
     inline basic_istream<char, _Traits>&
-    operator>>(basic_istream<char, _Traits>& __in, signed char (&__s)[_Num])
-    { return __in >> reinterpret_cast<char(&)[_Num]>(__s); }
+    operator>>(basic_istream<char, _Traits>& ___in, signed char (&__s)[_Num])
+    { return ___in >> reinterpret_cast<char(&)[_Num]>(__s); }
 #endif
   ///@}
 
diff -Naur 15.2.0-orig/ostream 15.2.0/ostream
--- 15.2.0-orig/ostream	2025-08-24 15:44:46.136096600 +0200
+++ 15.2.0/ostream	2025-08-24 15:44:52.653813900 +0200
@@ -164,11 +164,11 @@
       {
 	__format::_Str_sink<char> __buf;
 	std::vformat_to(__buf.out(), __os.getloc(), __fmt, __args);
-	auto __out = __buf.view();
+	auto ___out = __buf.view();
 
 	__try
 	  {
-	    std::__ostream_write(__os, __out.data(), __out.size());
+	    std::__ostream_write(__os, ___out.data(), ___out.size());
 	  }
 	__catch(const __cxxabiv1::__forced_unwind&)
 	  {
@@ -193,7 +193,7 @@
       {
 	__format::_Str_sink<char> __buf;
 	std::vformat_to(__buf.out(), __os.getloc(), __fmt, __args);
-	auto __out = __buf.view();
+	auto ___out = __buf.view();
 
 	void* __open_terminal(streambuf*);
 	error_code __write_to_terminal(void*, span<char>);
@@ -221,7 +221,7 @@
 	      {
 		if (__os.rdbuf()->pubsync() == -1)
 		  __err = ios::badbit;
-		else if (auto __e = __write_to_terminal(__term, __out))
+		else if (auto __e = __write_to_terminal(__term, ___out))
 		  if (__e != std::make_error_code(errc::illegal_byte_sequence))
 		    __err = ios::badbit;
 	      }
@@ -241,7 +241,7 @@
 	// Otherwise just insert the string as vprint_nonunicode does.
 	__try
 	  {
-	    std::__ostream_write(__os, __out.data(), __out.size());
+	    std::__ostream_write(__os, ___out.data(), ___out.size());
 	  }
 	__catch(const __cxxabiv1::__forced_unwind&)
 	  {
diff -Naur 15.2.0-orig/parallel/algo.h 15.2.0/parallel/algo.h
--- 15.2.0-orig/parallel/algo.h	2025-08-24 15:44:46.266937000 +0200
+++ 15.2.0/parallel/algo.h	2025-08-24 15:44:52.673954100 +0200
@@ -289,67 +289,67 @@
   // Sequential fallback
   template<typename _IIter, typename _OutputIterator>
     inline _OutputIterator
-    unique_copy(_IIter __begin1, _IIter __end1, _OutputIterator __out,
+    unique_copy(_IIter __begin1, _IIter __end1, _OutputIterator ___out,
 		__gnu_parallel::sequential_tag)
-    { return _GLIBCXX_STD_A::unique_copy(__begin1, __end1, __out); }
+    { return _GLIBCXX_STD_A::unique_copy(__begin1, __end1, ___out); }
 
   // Sequential fallback
   template<typename _IIter, typename _OutputIterator,
 	   typename _Predicate>
     inline _OutputIterator
-    unique_copy(_IIter __begin1, _IIter __end1, _OutputIterator __out,
+    unique_copy(_IIter __begin1, _IIter __end1, _OutputIterator ___out,
 		_Predicate __pred, __gnu_parallel::sequential_tag)
-    { return _GLIBCXX_STD_A::unique_copy(__begin1, __end1, __out, __pred); }
+    { return _GLIBCXX_STD_A::unique_copy(__begin1, __end1, ___out, __pred); }
 
   // Sequential fallback for input iterator case
   template<typename _IIter, typename _OutputIterator,
 	   typename _Predicate, typename _IteratorTag1, typename _IteratorTag2>
     inline _OutputIterator
     __unique_copy_switch(_IIter __begin, _IIter __last,
-		       _OutputIterator __out, _Predicate __pred,
+		       _OutputIterator ___out, _Predicate __pred,
 		       _IteratorTag1, _IteratorTag2)
-    { return _GLIBCXX_STD_A::unique_copy(__begin, __last, __out, __pred); }
+    { return _GLIBCXX_STD_A::unique_copy(__begin, __last, ___out, __pred); }
 
   // Parallel unique_copy for random access iterators
   template<typename _RAIter, typename _RandomAccessOutputIterator,
 	   typename _Predicate>
     _RandomAccessOutputIterator
     __unique_copy_switch(_RAIter __begin, _RAIter __last,
-			 _RandomAccessOutputIterator __out, _Predicate __pred,
+			 _RandomAccessOutputIterator ___out, _Predicate __pred,
 			 random_access_iterator_tag, random_access_iterator_tag)
     {
       if (_GLIBCXX_PARALLEL_CONDITION(
 	    static_cast<__gnu_parallel::_SequenceIndex>(__last - __begin)
 	    > __gnu_parallel::_Settings::get().unique_copy_minimal_n))
 	return __gnu_parallel::__parallel_unique_copy(
-		 __begin, __last, __out, __pred);
+		 __begin, __last, ___out, __pred);
       else
-	return _GLIBCXX_STD_A::unique_copy(__begin, __last, __out, __pred);
+	return _GLIBCXX_STD_A::unique_copy(__begin, __last, ___out, __pred);
     }
 
   // Public interface
   template<typename _IIter, typename _OutputIterator>
     inline _OutputIterator
-    unique_copy(_IIter __begin1, _IIter __end1, _OutputIterator __out)
+    unique_copy(_IIter __begin1, _IIter __end1, _OutputIterator ___out)
     {
       typedef typename std::iterator_traits<_IIter>::value_type _ValueType;
 
       return __unique_copy_switch(
-	       __begin1, __end1, __out, equal_to<_ValueType>(),
+	       __begin1, __end1, ___out, equal_to<_ValueType>(),
 	       std::__iterator_category(__begin1),
-	       std::__iterator_category(__out));
+	       std::__iterator_category(___out));
     }
 
   // Public interface
   template<typename _IIter, typename _OutputIterator, typename _Predicate>
     inline _OutputIterator
-    unique_copy(_IIter __begin1, _IIter __end1, _OutputIterator __out,
+    unique_copy(_IIter __begin1, _IIter __end1, _OutputIterator ___out,
 		_Predicate __pred)
     {
       return __unique_copy_switch(
-	       __begin1, __end1, __out, __pred,
+	       __begin1, __end1, ___out, __pred,
 	       std::__iterator_category(__begin1),
-	       std::__iterator_category(__out));
+	       std::__iterator_category(___out));
     }
 
   // Sequential fallback
@@ -358,9 +358,9 @@
     inline _OutputIterator
     set_union(_IIter1 __begin1, _IIter1 __end1,
 	      _IIter2 __begin2, _IIter2 __end2,
-	      _OutputIterator __out, __gnu_parallel::sequential_tag)
+	      _OutputIterator ___out, __gnu_parallel::sequential_tag)
     { return _GLIBCXX_STD_A::set_union(
-	       __begin1, __end1, __begin2, __end2, __out); }
+	       __begin1, __end1, __begin2, __end2, ___out); }
 
   // Sequential fallback
   template<typename _IIter1, typename _IIter2,
@@ -368,10 +368,10 @@
     inline _OutputIterator
     set_union(_IIter1 __begin1, _IIter1 __end1,
 	      _IIter2 __begin2, _IIter2 __end2,
-	      _OutputIterator __out, _Predicate __pred,
+	      _OutputIterator ___out, _Predicate __pred,
 	      __gnu_parallel::sequential_tag)
     { return _GLIBCXX_STD_A::set_union(__begin1, __end1,
-				       __begin2, __end2, __out, __pred); }
+				       __begin2, __end2, ___out, __pred); }
 
   // Sequential fallback for input iterator case
   template<typename _IIter1, typename _IIter2, typename _Predicate,
@@ -412,17 +412,17 @@
 	   typename _OutputIterator>
     inline _OutputIterator
     set_union(_IIter1 __begin1, _IIter1 __end1,
-	      _IIter2 __begin2, _IIter2 __end2, _OutputIterator __out)
+	      _IIter2 __begin2, _IIter2 __end2, _OutputIterator ___out)
     {
       typedef typename std::iterator_traits<_IIter1>::value_type _ValueType1;
       typedef typename std::iterator_traits<_IIter2>::value_type _ValueType2;
 
       return __set_union_switch(
-	       __begin1, __end1, __begin2, __end2, __out,
+	       __begin1, __end1, __begin2, __end2, ___out,
 	       __gnu_parallel::_Less<_ValueType1, _ValueType2>(),
 	       std::__iterator_category(__begin1),
 	       std::__iterator_category(__begin2),
-	       std::__iterator_category(__out));
+	       std::__iterator_category(___out));
     }
 
   // Public interface
@@ -431,13 +431,13 @@
     inline _OutputIterator
     set_union(_IIter1 __begin1, _IIter1 __end1,
 	      _IIter2 __begin2, _IIter2 __end2,
-	      _OutputIterator __out, _Predicate __pred)
+	      _OutputIterator ___out, _Predicate __pred)
     {
       return __set_union_switch(
-	       __begin1, __end1, __begin2, __end2, __out, __pred,
+	       __begin1, __end1, __begin2, __end2, ___out, __pred,
 	       std::__iterator_category(__begin1),
 	       std::__iterator_category(__begin2),
-	       std::__iterator_category(__out));
+	       std::__iterator_category(___out));
     }
 
   // Sequential fallback.
@@ -446,9 +446,9 @@
     inline _OutputIterator
     set_intersection(_IIter1 __begin1, _IIter1 __end1,
 		     _IIter2 __begin2, _IIter2 __end2,
-		     _OutputIterator __out, __gnu_parallel::sequential_tag)
+		     _OutputIterator ___out, __gnu_parallel::sequential_tag)
     { return _GLIBCXX_STD_A::set_intersection(__begin1, __end1,
-					      __begin2, __end2, __out); }
+					      __begin2, __end2, ___out); }
 
   // Sequential fallback.
   template<typename _IIter1, typename _IIter2,
@@ -456,10 +456,10 @@
     inline _OutputIterator
     set_intersection(_IIter1 __begin1, _IIter1 __end1,
 		     _IIter2 __begin2, _IIter2 __end2,
-		     _OutputIterator __out, _Predicate __pred,
+		     _OutputIterator ___out, _Predicate __pred,
 		     __gnu_parallel::sequential_tag)
     { return _GLIBCXX_STD_A::set_intersection(
-	       __begin1, __end1, __begin2, __end2, __out, __pred); }
+	       __begin1, __end1, __begin2, __end2, ___out, __pred); }
 
   // Sequential fallback for input iterator case
   template<typename _IIter1, typename _IIter2,
@@ -506,17 +506,17 @@
     inline _OutputIterator
     set_intersection(_IIter1 __begin1, _IIter1 __end1,
 		     _IIter2 __begin2, _IIter2 __end2,
-		     _OutputIterator __out)
+		     _OutputIterator ___out)
     {
       typedef typename std::iterator_traits<_IIter1>::value_type _ValueType1;
       typedef typename std::iterator_traits<_IIter2>::value_type _ValueType2;
 
       return __set_intersection_switch(
-	       __begin1, __end1, __begin2, __end2, __out,
+	       __begin1, __end1, __begin2, __end2, ___out,
 	       __gnu_parallel::_Less<_ValueType1, _ValueType2>(),
 	       std::__iterator_category(__begin1),
 	       std::__iterator_category(__begin2),
-	       std::__iterator_category(__out));
+	       std::__iterator_category(___out));
     }
 
   template<typename _IIter1, typename _IIter2,
@@ -524,13 +524,13 @@
     inline _OutputIterator
     set_intersection(_IIter1 __begin1, _IIter1 __end1,
 		     _IIter2 __begin2, _IIter2 __end2,
-		     _OutputIterator __out, _Predicate __pred)
+		     _OutputIterator ___out, _Predicate __pred)
     {
       return __set_intersection_switch(
-	       __begin1, __end1, __begin2, __end2, __out, __pred,
+	       __begin1, __end1, __begin2, __end2, ___out, __pred,
 	       std::__iterator_category(__begin1),
 	       std::__iterator_category(__begin2),
-	       std::__iterator_category(__out));
+	       std::__iterator_category(___out));
     }
 
   // Sequential fallback
@@ -539,10 +539,10 @@
     inline _OutputIterator
     set_symmetric_difference(_IIter1 __begin1, _IIter1 __end1,
 			     _IIter2 __begin2, _IIter2 __end2,
-			     _OutputIterator __out,
+			     _OutputIterator ___out,
 			     __gnu_parallel::sequential_tag)
     { return _GLIBCXX_STD_A::set_symmetric_difference(
-	       __begin1, __end1, __begin2, __end2, __out); }
+	       __begin1, __end1, __begin2, __end2, ___out); }
 
   // Sequential fallback
   template<typename _IIter1, typename _IIter2,
@@ -550,10 +550,10 @@
     inline _OutputIterator
     set_symmetric_difference(_IIter1 __begin1, _IIter1 __end1,
 			     _IIter2 __begin2, _IIter2 __end2,
-			     _OutputIterator __out, _Predicate __pred,
+			     _OutputIterator ___out, _Predicate __pred,
 			     __gnu_parallel::sequential_tag)
     { return _GLIBCXX_STD_A::set_symmetric_difference(
-	       __begin1, __end1, __begin2, __end2, __out, __pred); }
+	       __begin1, __end1, __begin2, __end2, ___out, __pred); }
 
   // Sequential fallback for input iterator case
   template<typename _IIter1, typename _IIter2,
@@ -600,17 +600,17 @@
     inline _OutputIterator
     set_symmetric_difference(_IIter1 __begin1, _IIter1 __end1,
 			     _IIter2 __begin2, _IIter2 __end2,
-			     _OutputIterator __out)
+			     _OutputIterator ___out)
     {
       typedef typename std::iterator_traits<_IIter1>::value_type _ValueType1;
       typedef typename std::iterator_traits<_IIter2>::value_type _ValueType2;
 
       return __set_symmetric_difference_switch(
-	       __begin1, __end1, __begin2, __end2, __out,
+	       __begin1, __end1, __begin2, __end2, ___out,
 	       __gnu_parallel::_Less<_ValueType1, _ValueType2>(),
 	       std::__iterator_category(__begin1),
 	       std::__iterator_category(__begin2),
-	       std::__iterator_category(__out));
+	       std::__iterator_category(___out));
     }
 
   // Public interface.
@@ -619,13 +619,13 @@
     inline _OutputIterator
     set_symmetric_difference(_IIter1 __begin1, _IIter1 __end1,
 			     _IIter2 __begin2, _IIter2 __end2,
-			     _OutputIterator __out, _Predicate __pred)
+			     _OutputIterator ___out, _Predicate __pred)
     {
       return __set_symmetric_difference_switch(
-	       __begin1, __end1, __begin2, __end2, __out, __pred,
+	       __begin1, __end1, __begin2, __end2, ___out, __pred,
 	       std::__iterator_category(__begin1),
 	       std::__iterator_category(__begin2),
-	       std::__iterator_category(__out));
+	       std::__iterator_category(___out));
     }
 
   // Sequential fallback.
@@ -634,9 +634,9 @@
     inline _OutputIterator
     set_difference(_IIter1 __begin1, _IIter1 __end1,
 		   _IIter2 __begin2, _IIter2 __end2,
-		   _OutputIterator __out, __gnu_parallel::sequential_tag)
+		   _OutputIterator ___out, __gnu_parallel::sequential_tag)
     { return _GLIBCXX_STD_A::set_difference(
-	       __begin1,__end1, __begin2, __end2, __out); }
+	       __begin1,__end1, __begin2, __end2, ___out); }
 
   // Sequential fallback.
   template<typename _IIter1, typename _IIter2,
@@ -644,10 +644,10 @@
     inline _OutputIterator
     set_difference(_IIter1 __begin1, _IIter1 __end1,
 		   _IIter2 __begin2, _IIter2 __end2,
-		   _OutputIterator __out, _Predicate __pred,
+		   _OutputIterator ___out, _Predicate __pred,
 		   __gnu_parallel::sequential_tag)
     { return _GLIBCXX_STD_A::set_difference(__begin1, __end1,
-					    __begin2, __end2, __out, __pred); }
+					    __begin2, __end2, ___out, __pred); }
 
   // Sequential fallback for input iterator case.
   template<typename _IIter1, typename _IIter2, typename _Predicate,
@@ -692,17 +692,17 @@
     inline _OutputIterator
     set_difference(_IIter1 __begin1, _IIter1 __end1,
 		   _IIter2 __begin2, _IIter2 __end2,
-		   _OutputIterator __out)
+		   _OutputIterator ___out)
     {
       typedef typename std::iterator_traits<_IIter1>::value_type _ValueType1;
       typedef typename std::iterator_traits<_IIter2>::value_type _ValueType2;
 
       return __set_difference_switch(
-	       __begin1, __end1, __begin2, __end2, __out,
+	       __begin1, __end1, __begin2, __end2, ___out,
 	       __gnu_parallel::_Less<_ValueType1, _ValueType2>(),
 	       std::__iterator_category(__begin1),
 	       std::__iterator_category(__begin2),
-	       std::__iterator_category(__out));
+	       std::__iterator_category(___out));
     }
 
   // Public interface
@@ -711,13 +711,13 @@
     inline _OutputIterator
     set_difference(_IIter1 __begin1, _IIter1 __end1,
 		   _IIter2 __begin2, _IIter2 __end2,
-		   _OutputIterator __out, _Predicate __pred)
+		   _OutputIterator ___out, _Predicate __pred)
     {
       return __set_difference_switch(
-	       __begin1, __end1, __begin2, __end2, __out, __pred,
+	       __begin1, __end1, __begin2, __end2, ___out, __pred,
 	       std::__iterator_category(__begin1),
 	       std::__iterator_category(__begin2),
-	       std::__iterator_category(__out));
+	       std::__iterator_category(___out));
     }
 
   // Sequential fallback
diff -Naur 15.2.0-orig/parallel/set_operations.h 15.2.0/parallel/set_operations.h
--- 15.2.0-orig/parallel/set_operations.h	2025-08-24 15:44:46.266937000 +0200
+++ 15.2.0/parallel/set_operations.h	2025-08-24 15:44:52.838294400 +0200
@@ -130,12 +130,12 @@
       }
 
       _OutputIterator
-      __first_empty(_IIter __c, _IIter __d, _OutputIterator __out) const
-      { return std::copy(__c, __d, __out); }
+      __first_empty(_IIter __c, _IIter __d, _OutputIterator ___out) const
+      { return std::copy(__c, __d, ___out); }
 
       _OutputIterator
-      __second_empty(_IIter __a, _IIter __b, _OutputIterator __out) const
-      { return std::copy(__a, __b, __out); }
+      __second_empty(_IIter __a, _IIter __b, _OutputIterator ___out) const
+      { return std::copy(__a, __b, ___out); }
     };
 
 
@@ -198,12 +198,12 @@
       }
 
       _OutputIterator
-      __first_empty(_IIter, _IIter, _OutputIterator __out) const
-      { return __out; }
+      __first_empty(_IIter, _IIter, _OutputIterator ___out) const
+      { return ___out; }
 
       _OutputIterator
-      __second_empty(_IIter __a, _IIter __b, _OutputIterator __out) const
-      { return std::copy(__a, __b, __out); }
+      __second_empty(_IIter __a, _IIter __b, _OutputIterator ___out) const
+      { return std::copy(__a, __b, ___out); }
     };
 
 
@@ -265,12 +265,12 @@
       }
 
       _OutputIterator
-      __first_empty(_IIter, _IIter, _OutputIterator __out) const
-      { return __out; }
+      __first_empty(_IIter, _IIter, _OutputIterator ___out) const
+      { return ___out; }
 
       _OutputIterator
-      __second_empty(_IIter, _IIter, _OutputIterator __out) const
-      { return __out; }
+      __second_empty(_IIter, _IIter, _OutputIterator ___out) const
+      { return ___out; }
     };
 
   template<class _IIter, class _OutputIterator, class _Compare>
@@ -335,12 +335,12 @@
       }
 
       _OutputIterator
-      __first_empty(_IIter __c, _IIter __d, _OutputIterator __out) const
-      { return std::copy(__c, __d, __out); }
+      __first_empty(_IIter __c, _IIter __d, _OutputIterator ___out) const
+      { return std::copy(__c, __d, ___out); }
 
       _OutputIterator
-      __second_empty(_IIter __a, _IIter __b, _OutputIterator __out) const
-      { return std::copy(__a, __b, __out); }
+      __second_empty(_IIter __a, _IIter __b, _OutputIterator ___out) const
+      { return std::copy(__a, __b, ___out); }
     };
 
   template<typename _IIter,
diff -Naur 15.2.0-orig/parallel/unique_copy.h 15.2.0/parallel/unique_copy.h
--- 15.2.0-orig/parallel/unique_copy.h	2025-08-24 15:44:46.266937000 +0200
+++ 15.2.0/parallel/unique_copy.h	2025-08-24 15:44:52.847376200 +0200
@@ -85,7 +85,7 @@
 	// Check for length without duplicates
 	// Needed for position in output
 	_DifferenceType __i = 0;
-	_OutputIterator __out = __result;
+	_OutputIterator ___out = __result;
 
 	if (__iam == 0)
           {
@@ -93,7 +93,7 @@
             __end = __borders[__iam + 1];
 
             ++__i;
-            *__out++ = *__first;
+            *___out++ = *__first;
 
             for (_IIter __iter = __first + __begin; __iter < __first + __end;
 		 ++__iter)
@@ -101,7 +101,7 @@
         	if (!__binary_pred(*__iter, *(__iter - 1)))
                   {
                     ++__i;
-                    *__out++ = *__iter;
+                    *___out++ = *__iter;
                   }
               }
           }
diff -Naur 15.2.0-orig/print 15.2.0/print
--- 15.2.0-orig/print	2025-08-24 15:44:46.136096600 +0200
+++ 15.2.0/print	2025-08-24 15:44:52.850305100 +0200
@@ -58,8 +58,8 @@
   {
     __format::_Str_sink<char> __buf;
     std::vformat_to(__buf.out(), __fmt, __args);
-    auto __out = __buf.view();
-    if (std::fwrite(__out.data(), 1, __out.size(), __stream) != __out.size())
+    auto ___out = __buf.view();
+    if (std::fwrite(___out.data(), 1, ___out.size(), __stream) != ___out.size())
       __throw_system_error(EIO);
   }
 
@@ -73,18 +73,18 @@
 #else
     __format::_Str_sink<char> __buf;
     std::vformat_to(__buf.out(), __fmt, __args);
-    auto __out = __buf.view();
+    auto ___out = __buf.view();
 
     void* __open_terminal(FILE*);
     error_code __write_to_terminal(void*, span<char>);
     // If stream refers to a terminal, write a native Unicode string to it.
     if (auto __term = __open_terminal(__stream))
       {
-	string __out = std::vformat(__fmt, __args);
+	string ___out = std::vformat(__fmt, __args);
 	error_code __e;
 	if (!std::fflush(__stream))
 	  {
-	    __e = __write_to_terminal(__term, __out);
+	    __e = __write_to_terminal(__term, ___out);
 	    if (!__e)
 	      return;
 	    if (__e == std::make_error_code(errc::illegal_byte_sequence))
@@ -96,7 +96,7 @@
       }
 
     // Otherwise just write the string to the file as vprint_nonunicode does.
-    if (std::fwrite(__out.data(), 1, __out.size(), __stream) != __out.size())
+    if (std::fwrite(___out.data(), 1, ___out.size(), __stream) != ___out.size())
       __throw_system_error(EIO);
 #endif
   }
diff -Naur 15.2.0-orig/stop_token 15.2.0/stop_token
--- 15.2.0-orig/stop_token	2025-08-24 15:44:46.141733700 +0200
+++ 15.2.0/stop_token	2025-08-24 15:44:53.273767100 +0200
@@ -378,7 +378,7 @@
 
       bool
       _M_do_try_lock(value_type& __curval, value_type __newbits,
-		     memory_order __success, memory_order __failure) noexcept
+		     memory_order ___success, memory_order __failure) noexcept
       {
 	if (__curval & _S_locked_bit)
 	  {
@@ -388,7 +388,7 @@
 	  }
 	__newbits |= _S_locked_bit;
 	return _M_value.compare_exchange_weak(__curval, __curval | __newbits,
-					      __success, __failure);
+					      ___success, __failure);
       }
     };
 
diff -Naur 15.2.0-orig/thread 15.2.0/thread
--- 15.2.0-orig/thread	2025-08-24 15:44:46.141733700 +0200
+++ 15.2.0/thread	2025-08-24 15:44:53.313639800 +0200
@@ -104,7 +104,7 @@
 
   template<class _CharT, class _Traits>
     inline basic_ostream<_CharT, _Traits>&
-    operator<<(basic_ostream<_CharT, _Traits>& __out, thread::id __id)
+    operator<<(basic_ostream<_CharT, _Traits>& ___out, thread::id __id)
     {
       // Convert non-void pointers to const void* for formatted output.
       using __output_type
@@ -113,9 +113,9 @@
 			  thread::native_handle_type>;
 
       if (__id == thread::id())
-	return __out << "thread::id of a non-executing thread";
+	return ___out << "thread::id of a non-executing thread";
       else
-	return __out << static_cast<__output_type>(__id._M_thread);
+	return ___out << static_cast<__output_type>(__id._M_thread);
     }
   /// @}
 
diff -Naur 15.2.0-orig/tr1/regex 15.2.0/tr1/regex
--- 15.2.0-orig/tr1/regex	2025-08-24 15:44:46.235650200 +0200
+++ 15.2.0/tr1/regex	2025-08-24 15:44:53.523884500 +0200
@@ -503,7 +503,7 @@
       {
 	using std::ctype;
 	using std::use_facet;
-	return use_facet<ctype<char_type> >(_M_locale).tolower(__c);
+	return (use_facet<ctype<char_type> >(_M_locale).tolower)(__c);
       }
       
       /**
@@ -691,7 +691,7 @@
 	}
     
       // special case of [[:space:]] in [[:blank:]]
-      if (__c == __ctype.isspace(__c))
+      if (__c == (__ctype.isspace)(__c))
 	{
 	  const char* const __bb[] = "blank";
 	  char_class_type __bt = this->lookup_classname(__bb,
@@ -2009,7 +2009,7 @@
        */
       template<typename _Out_iter>
         _Out_iter
-        format(_Out_iter __out, const string_type& __fmt,
+        format(_Out_iter ___out, const string_type& __fmt,
 	       regex_constants::match_flag_type __flags
 	       = regex_constants::format_default) const;
 
@@ -2405,7 +2405,7 @@
   template<typename _Out_iter, typename _Bi_iter,
 	   typename _Rx_traits, typename _Ch_type>
     inline _Out_iter
-    regex_replace(_Out_iter __out, _Bi_iter __first, _Bi_iter __last,
+    regex_replace(_Out_iter ___out, _Bi_iter __first, _Bi_iter __last,
 		  const basic_regex<_Ch_type, _Rx_traits>& __e,
 		  const basic_string<_Ch_type>& __fmt,
 		  regex_constants::match_flag_type __flags
diff -Naur 15.2.0-orig/tr1/tuple 15.2.0/tr1/tuple
--- 15.2.0-orig/tr1/tuple	2025-08-24 15:44:46.235650200 +0200
+++ 15.2.0/tr1/tuple	2025-08-24 15:44:53.545379900 +0200
@@ -109,26 +109,26 @@
       : _Inherited(__tail...), _M_head(__head) { }
 
       template<typename... _UElements>
-      _Tuple_impl(const _Tuple_impl<_Idx, _UElements...>& __in)
-      : _Inherited(__in._M_tail()), _M_head(__in._M_head) { }
+      _Tuple_impl(const _Tuple_impl<_Idx, _UElements...>& ___in)
+      : _Inherited(___in._M_tail()), _M_head(___in._M_head) { }
 
-      _Tuple_impl(const _Tuple_impl& __in)
-      : _Inherited(__in._M_tail()), _M_head(__in._M_head) { }
+      _Tuple_impl(const _Tuple_impl& ___in)
+      : _Inherited(___in._M_tail()), _M_head(___in._M_head) { }
      
       template<typename... _UElements>
         _Tuple_impl&
-        operator=(const _Tuple_impl<_Idx, _UElements...>& __in)
+        operator=(const _Tuple_impl<_Idx, _UElements...>& ___in)
         {
-	  _M_head = __in._M_head;
-	  _M_tail() = __in._M_tail();
+	  _M_head = ___in._M_head;
+	  _M_tail() = ___in._M_tail();
 	  return *this;
 	}
 
       _Tuple_impl&
-      operator=(const _Tuple_impl& __in)
+      operator=(const _Tuple_impl& ___in)
       {
-	_M_head = __in._M_head;
-	_M_tail() = __in._M_tail();
+	_M_head = ___in._M_head;
+	_M_tail() = ___in._M_tail();
 	return *this;
       }
     };
@@ -146,24 +146,24 @@
       : _Inherited(__elements...) { }
 
       template<typename... _UElements>
-        tuple(const tuple<_UElements...>& __in)
-	: _Inherited(__in) { }
+        tuple(const tuple<_UElements...>& ___in)
+	: _Inherited(___in) { }
 
-      tuple(const tuple& __in)
-      : _Inherited(__in) { }
+      tuple(const tuple& ___in)
+      : _Inherited(___in) { }
 
       template<typename... _UElements>
         tuple&
-        operator=(const tuple<_UElements...>& __in)
+        operator=(const tuple<_UElements...>& ___in)
         {
-	  static_cast<_Inherited&>(*this) = __in;
+	  static_cast<_Inherited&>(*this) = ___in;
 	  return *this;
 	}
 
       tuple&
-      operator=(const tuple& __in)
+      operator=(const tuple& ___in)
       {
-	static_cast<_Inherited&>(*this) = __in;
+	static_cast<_Inherited&>(*this) = ___in;
 	return *this;
       }
     };
@@ -185,41 +185,41 @@
       : _Inherited(__a1, __a2) { }
 
       template<typename _U1, typename _U2>
-        tuple(const tuple<_U1, _U2>& __in)
-	: _Inherited(__in) { }
+        tuple(const tuple<_U1, _U2>& ___in)
+	: _Inherited(___in) { }
 
-      tuple(const tuple& __in)
-      : _Inherited(__in) { }
+      tuple(const tuple& ___in)
+      : _Inherited(___in) { }
 
       template<typename _U1, typename _U2>
-        tuple(const pair<_U1, _U2>& __in)
+        tuple(const pair<_U1, _U2>& ___in)
 	: _Inherited(_Tuple_impl<0, 
 		     typename __add_c_ref<_U1>::type,
-		     typename __add_c_ref<_U2>::type>(__in.first, 
-						      __in.second))
+		     typename __add_c_ref<_U2>::type>(___in.first, 
+						      ___in.second))
         { }
   
       template<typename _U1, typename _U2>
         tuple&
-        operator=(const tuple<_U1, _U2>& __in)
+        operator=(const tuple<_U1, _U2>& ___in)
         {
-	  static_cast<_Inherited&>(*this) = __in;
+	  static_cast<_Inherited&>(*this) = ___in;
 	  return *this;
 	}
 
       tuple&
-      operator=(const tuple& __in)
+      operator=(const tuple& ___in)
       {
-	static_cast<_Inherited&>(*this) = __in;
+	static_cast<_Inherited&>(*this) = ___in;
 	return *this;
       }
 
       template<typename _U1, typename _U2>
         tuple&
-        operator=(const pair<_U1, _U2>& __in)
+        operator=(const pair<_U1, _U2>& ___in)
         {
-	  this->_M_head = __in.first;
-	  this->_M_tail()._M_head = __in.second;
+	  this->_M_head = ___in.first;
+	  this->_M_tail()._M_head = ___in.second;
 	  return *this;
 	}
     };
diff -Naur 15.2.0-orig/tr1/utility 15.2.0/tr1/utility
--- 15.2.0-orig/tr1/utility	2025-08-24 15:44:46.235650200 +0200
+++ 15.2.0/tr1/utility	2025-08-24 15:44:53.569625100 +0200
@@ -97,13 +97,13 @@
 
   template<int _Int, class _Tp1, class _Tp2>
     inline typename tuple_element<_Int, std::pair<_Tp1, _Tp2> >::type&
-    get(std::pair<_Tp1, _Tp2>& __in)
-    { return __pair_get<_Int>::__get(__in); }
+    get(std::pair<_Tp1, _Tp2>& ___in)
+    { return __pair_get<_Int>::__get(___in); }
 
   template<int _Int, class _Tp1, class _Tp2>
     inline const typename tuple_element<_Int, std::pair<_Tp1, _Tp2> >::type&
-    get(const std::pair<_Tp1, _Tp2>& __in)
-    { return __pair_get<_Int>::__const_get(__in); }
+    get(const std::pair<_Tp1, _Tp2>& ___in)
+    { return __pair_get<_Int>::__const_get(___in); }
 }
 
 _GLIBCXX_END_NAMESPACE_VERSION
diff -Naur 15.2.0-orig/tr2/bool_set 15.2.0/tr2/bool_set
--- 15.2.0-orig/tr2/bool_set	2025-08-24 15:44:46.235650200 +0200
+++ 15.2.0/tr2/bool_set	2025-08-24 15:44:53.576842200 +0200
@@ -133,18 +133,18 @@
 
     template<typename CharT, typename Traits>
       friend std::basic_ostream<CharT, Traits>&
-      operator<<(std::basic_ostream<CharT, Traits>& __out, bool_set __b)
+      operator<<(std::basic_ostream<CharT, Traits>& ___out, bool_set __b)
       {
 	int __a = __b._M_b;
-	__out << __a;
+	___out << __a;
       }
 
     template<typename CharT, typename Traits>
       friend std::basic_istream<CharT, Traits>&
-      operator>>(std::basic_istream<CharT, Traits>& __in, bool_set& __b)
+      operator>>(std::basic_istream<CharT, Traits>& ___in, bool_set& __b)
       {
 	long __c;
-	__in >> __c;
+	___in >> __c;
 	if (__c >= _S_false && __c < _S_empty)
 	  __b._M_b = static_cast<_Bool_set_val>(__c);
       }
diff -Naur 15.2.0-orig/tuple 15.2.0/tuple
--- 15.2.0-orig/tuple	2025-08-24 15:44:46.130106500 +0200
+++ 15.2.0/tuple	2025-08-24 15:44:53.638937000 +0200
@@ -325,35 +325,35 @@
 
       template<typename... _UElements>
 	constexpr
-	_Tuple_impl(const _Tuple_impl<_Idx, _UElements...>& __in)
-	: _Inherited(_Tuple_impl<_Idx, _UElements...>::_M_tail(__in)),
-	  _Base(_Tuple_impl<_Idx, _UElements...>::_M_head(__in))
+	_Tuple_impl(const _Tuple_impl<_Idx, _UElements...>& ___in)
+	: _Inherited(_Tuple_impl<_Idx, _UElements...>::_M_tail(___in)),
+	  _Base(_Tuple_impl<_Idx, _UElements...>::_M_head(___in))
 	{ }
 
       template<typename _UHead, typename... _UTails>
 	constexpr
-	_Tuple_impl(_Tuple_impl<_Idx, _UHead, _UTails...>&& __in)
+	_Tuple_impl(_Tuple_impl<_Idx, _UHead, _UTails...>&& ___in)
 	: _Inherited(std::move
-		     (_Tuple_impl<_Idx, _UHead, _UTails...>::_M_tail(__in))),
+		     (_Tuple_impl<_Idx, _UHead, _UTails...>::_M_tail(___in))),
 	  _Base(std::forward<_UHead>
-		(_Tuple_impl<_Idx, _UHead, _UTails...>::_M_head(__in)))
+		(_Tuple_impl<_Idx, _UHead, _UTails...>::_M_head(___in)))
 	{ }
 
 #if __cpp_lib_ranges_zip // >= C++23
       template<typename... _UElements>
 	constexpr
-	_Tuple_impl(_Tuple_impl<_Idx, _UElements...>& __in)
-	: _Inherited(_Tuple_impl<_Idx, _UElements...>::_M_tail(__in)),
-	  _Base(_Tuple_impl<_Idx, _UElements...>::_M_head(__in))
+	_Tuple_impl(_Tuple_impl<_Idx, _UElements...>& ___in)
+	: _Inherited(_Tuple_impl<_Idx, _UElements...>::_M_tail(___in)),
+	  _Base(_Tuple_impl<_Idx, _UElements...>::_M_head(___in))
 	{ }
 
       template<typename _UHead, typename... _UTails>
 	constexpr
-	_Tuple_impl(const _Tuple_impl<_Idx, _UHead, _UTails...>&& __in)
+	_Tuple_impl(const _Tuple_impl<_Idx, _UHead, _UTails...>&& ___in)
 	: _Inherited(std::move
-		     (_Tuple_impl<_Idx, _UHead, _UTails...>::_M_tail(__in))),
+		     (_Tuple_impl<_Idx, _UHead, _UTails...>::_M_tail(___in))),
 	  _Base(std::forward<const _UHead>
-		(_Tuple_impl<_Idx, _UHead, _UTails...>::_M_head(__in)))
+		(_Tuple_impl<_Idx, _UHead, _UTails...>::_M_head(___in)))
 	{ }
 #endif // C++23
 
@@ -393,61 +393,61 @@
       template<typename _Alloc>
 	_GLIBCXX20_CONSTEXPR
 	_Tuple_impl(allocator_arg_t __tag, const _Alloc& __a,
-		    const _Tuple_impl& __in)
-	: _Inherited(__tag, __a, _M_tail(__in)),
-	  _Base(__use_alloc<_Head, _Alloc, _Head>(__a), _M_head(__in))
+		    const _Tuple_impl& ___in)
+	: _Inherited(__tag, __a, _M_tail(___in)),
+	  _Base(__use_alloc<_Head, _Alloc, _Head>(__a), _M_head(___in))
 	{ }
 
       template<typename _Alloc>
 	_GLIBCXX20_CONSTEXPR
 	_Tuple_impl(allocator_arg_t __tag, const _Alloc& __a,
-		    _Tuple_impl&& __in)
-	: _Inherited(__tag, __a, std::move(_M_tail(__in))),
+		    _Tuple_impl&& ___in)
+	: _Inherited(__tag, __a, std::move(_M_tail(___in))),
 	  _Base(__use_alloc<_Head, _Alloc, _Head>(__a),
-		std::forward<_Head>(_M_head(__in)))
+		std::forward<_Head>(_M_head(___in)))
 	{ }
 
       template<typename _Alloc, typename _UHead, typename... _UTails>
 	_GLIBCXX20_CONSTEXPR
 	_Tuple_impl(allocator_arg_t __tag, const _Alloc& __a,
-		    const _Tuple_impl<_Idx, _UHead, _UTails...>& __in)
+		    const _Tuple_impl<_Idx, _UHead, _UTails...>& ___in)
 	: _Inherited(__tag, __a,
-		     _Tuple_impl<_Idx, _UHead, _UTails...>::_M_tail(__in)),
+		     _Tuple_impl<_Idx, _UHead, _UTails...>::_M_tail(___in)),
 	  _Base(__use_alloc<_Head, _Alloc, const _UHead&>(__a),
-		_Tuple_impl<_Idx, _UHead, _UTails...>::_M_head(__in))
+		_Tuple_impl<_Idx, _UHead, _UTails...>::_M_head(___in))
 	{ }
 
       template<typename _Alloc, typename _UHead, typename... _UTails>
 	_GLIBCXX20_CONSTEXPR
 	_Tuple_impl(allocator_arg_t __tag, const _Alloc& __a,
-		    _Tuple_impl<_Idx, _UHead, _UTails...>&& __in)
+		    _Tuple_impl<_Idx, _UHead, _UTails...>&& ___in)
 	: _Inherited(__tag, __a, std::move
-		     (_Tuple_impl<_Idx, _UHead, _UTails...>::_M_tail(__in))),
+		     (_Tuple_impl<_Idx, _UHead, _UTails...>::_M_tail(___in))),
 	  _Base(__use_alloc<_Head, _Alloc, _UHead>(__a),
 		std::forward<_UHead>
-		(_Tuple_impl<_Idx, _UHead, _UTails...>::_M_head(__in)))
+		(_Tuple_impl<_Idx, _UHead, _UTails...>::_M_head(___in)))
 	{ }
 
 #if __cpp_lib_ranges_zip // >= C++23
       template<typename _Alloc, typename _UHead, typename... _UTails>
 	constexpr
 	_Tuple_impl(allocator_arg_t __tag, const _Alloc& __a,
-		    _Tuple_impl<_Idx, _UHead, _UTails...>& __in)
+		    _Tuple_impl<_Idx, _UHead, _UTails...>& ___in)
 	: _Inherited(__tag, __a,
-		     _Tuple_impl<_Idx, _UHead, _UTails...>::_M_tail(__in)),
+		     _Tuple_impl<_Idx, _UHead, _UTails...>::_M_tail(___in)),
 	  _Base(__use_alloc<_Head, _Alloc, _UHead&>(__a),
-		_Tuple_impl<_Idx, _UHead, _UTails...>::_M_head(__in))
+		_Tuple_impl<_Idx, _UHead, _UTails...>::_M_head(___in))
 	{ }
 
       template<typename _Alloc, typename _UHead, typename... _UTails>
 	constexpr
 	_Tuple_impl(allocator_arg_t __tag, const _Alloc& __a,
-		    const _Tuple_impl<_Idx, _UHead, _UTails...>&& __in)
+		    const _Tuple_impl<_Idx, _UHead, _UTails...>&& ___in)
 	: _Inherited(__tag, __a, std::move
-		     (_Tuple_impl<_Idx, _UHead, _UTails...>::_M_tail(__in))),
+		     (_Tuple_impl<_Idx, _UHead, _UTails...>::_M_tail(___in))),
 	  _Base(__use_alloc<_Head, _Alloc, const _UHead>(__a),
 		std::forward<const _UHead>
-		(_Tuple_impl<_Idx, _UHead, _UTails...>::_M_head(__in)))
+		(_Tuple_impl<_Idx, _UHead, _UTails...>::_M_head(___in)))
 	{ }
 #endif // C++23
 
@@ -463,42 +463,42 @@
       template<typename... _UElements>
 	_GLIBCXX20_CONSTEXPR
 	void
-	_M_assign(const _Tuple_impl<_Idx, _UElements...>& __in)
+	_M_assign(const _Tuple_impl<_Idx, _UElements...>& ___in)
 	{
-	  _M_head(*this) = _Tuple_impl<_Idx, _UElements...>::_M_head(__in);
+	  _M_head(*this) = _Tuple_impl<_Idx, _UElements...>::_M_head(___in);
 	  _M_tail(*this)._M_assign(
-	      _Tuple_impl<_Idx, _UElements...>::_M_tail(__in));
+	      _Tuple_impl<_Idx, _UElements...>::_M_tail(___in));
 	}
 
       template<typename _UHead, typename... _UTails>
 	_GLIBCXX20_CONSTEXPR
 	void
-	_M_assign(_Tuple_impl<_Idx, _UHead, _UTails...>&& __in)
+	_M_assign(_Tuple_impl<_Idx, _UHead, _UTails...>&& ___in)
 	{
 	  _M_head(*this) = std::forward<_UHead>
-	    (_Tuple_impl<_Idx, _UHead, _UTails...>::_M_head(__in));
+	    (_Tuple_impl<_Idx, _UHead, _UTails...>::_M_head(___in));
 	  _M_tail(*this)._M_assign(
-	      std::move(_Tuple_impl<_Idx, _UHead, _UTails...>::_M_tail(__in)));
+	      std::move(_Tuple_impl<_Idx, _UHead, _UTails...>::_M_tail(___in)));
 	}
 
 #if __cpp_lib_ranges_zip // >= C++23
       template<typename... _UElements>
 	constexpr void
-	_M_assign(const _Tuple_impl<_Idx, _UElements...>& __in) const
+	_M_assign(const _Tuple_impl<_Idx, _UElements...>& ___in) const
 	{
-	  _M_head(*this) = _Tuple_impl<_Idx, _UElements...>::_M_head(__in);
+	  _M_head(*this) = _Tuple_impl<_Idx, _UElements...>::_M_head(___in);
 	  _M_tail(*this)._M_assign(
-	      _Tuple_impl<_Idx, _UElements...>::_M_tail(__in));
+	      _Tuple_impl<_Idx, _UElements...>::_M_tail(___in));
 	}
 
       template<typename _UHead, typename... _UTails>
 	constexpr void
-	_M_assign(_Tuple_impl<_Idx, _UHead, _UTails...>&& __in) const
+	_M_assign(_Tuple_impl<_Idx, _UHead, _UTails...>&& ___in) const
 	{
 	  _M_head(*this) = std::forward<_UHead>
-	    (_Tuple_impl<_Idx, _UHead, _UTails...>::_M_head(__in));
+	    (_Tuple_impl<_Idx, _UHead, _UTails...>::_M_head(___in));
 	  _M_tail(*this)._M_assign(
-	      std::move(_Tuple_impl<_Idx, _UHead, _UTails...>::_M_tail(__in)));
+	      std::move(_Tuple_impl<_Idx, _UHead, _UTails...>::_M_tail(___in)));
 	}
 #endif // C++23
 
@@ -523,20 +523,20 @@
     protected:
       _GLIBCXX20_CONSTEXPR
       void
-      _M_swap(_Tuple_impl& __in)
+      _M_swap(_Tuple_impl& ___in)
       {
 	using std::swap;
-	swap(_M_head(*this), _M_head(__in));
-	_Inherited::_M_swap(_M_tail(__in));
+	swap(_M_head(*this), _M_head(___in));
+	_Inherited::_M_swap(_M_tail(___in));
       }
 
 #if __cpp_lib_ranges_zip // >= C++23
       constexpr void
-      _M_swap(const _Tuple_impl& __in) const
+      _M_swap(const _Tuple_impl& ___in) const
       {
 	using std::swap;
-	swap(_M_head(*this), _M_head(__in));
-	_Inherited::_M_swap(_M_tail(__in));
+	swap(_M_head(*this), _M_head(___in));
+	_Inherited::_M_swap(_M_tail(___in));
       }
 #endif // C++23
     };
@@ -581,35 +581,35 @@
       _Tuple_impl(_Tuple_impl&&) = default;
 #else
       constexpr
-      _Tuple_impl(_Tuple_impl&& __in)
+      _Tuple_impl(_Tuple_impl&& ___in)
       noexcept(is_nothrow_move_constructible<_Head>::value)
-      : _Base(static_cast<_Base&&>(__in))
+      : _Base(static_cast<_Base&&>(___in))
       { }
 #endif
 
       template<typename _UHead>
 	constexpr
-	_Tuple_impl(const _Tuple_impl<_Idx, _UHead>& __in)
-	: _Base(_Tuple_impl<_Idx, _UHead>::_M_head(__in))
+	_Tuple_impl(const _Tuple_impl<_Idx, _UHead>& ___in)
+	: _Base(_Tuple_impl<_Idx, _UHead>::_M_head(___in))
 	{ }
 
       template<typename _UHead>
 	constexpr
-	_Tuple_impl(_Tuple_impl<_Idx, _UHead>&& __in)
-	: _Base(std::forward<_UHead>(_Tuple_impl<_Idx, _UHead>::_M_head(__in)))
+	_Tuple_impl(_Tuple_impl<_Idx, _UHead>&& ___in)
+	: _Base(std::forward<_UHead>(_Tuple_impl<_Idx, _UHead>::_M_head(___in)))
 	{ }
 
 #if __cpp_lib_ranges_zip // >= C++23
       template<typename _UHead>
 	constexpr
-	_Tuple_impl(_Tuple_impl<_Idx, _UHead>& __in)
-	: _Base(_Tuple_impl<_Idx, _UHead>::_M_head(__in))
+	_Tuple_impl(_Tuple_impl<_Idx, _UHead>& ___in)
+	: _Base(_Tuple_impl<_Idx, _UHead>::_M_head(___in))
 	{ }
 
       template<typename _UHead>
 	constexpr
-	_Tuple_impl(const _Tuple_impl<_Idx, _UHead>&& __in)
-	: _Base(std::forward<const _UHead>(_Tuple_impl<_Idx, _UHead>::_M_head(__in)))
+	_Tuple_impl(const _Tuple_impl<_Idx, _UHead>&& ___in)
+	: _Base(std::forward<const _UHead>(_Tuple_impl<_Idx, _UHead>::_M_head(___in)))
 	{ }
 #endif // C++23
 
@@ -645,49 +645,49 @@
       template<typename _Alloc>
 	_GLIBCXX20_CONSTEXPR
 	_Tuple_impl(allocator_arg_t, const _Alloc& __a,
-		    const _Tuple_impl& __in)
-	: _Base(__use_alloc<_Head, _Alloc, const _Head&>(__a), _M_head(__in))
+		    const _Tuple_impl& ___in)
+	: _Base(__use_alloc<_Head, _Alloc, const _Head&>(__a), _M_head(___in))
 	{ }
 
       template<typename _Alloc>
 	_GLIBCXX20_CONSTEXPR
 	_Tuple_impl(allocator_arg_t, const _Alloc& __a,
-		    _Tuple_impl&& __in)
+		    _Tuple_impl&& ___in)
 	: _Base(__use_alloc<_Head, _Alloc, _Head>(__a),
-		std::forward<_Head>(_M_head(__in)))
+		std::forward<_Head>(_M_head(___in)))
 	{ }
 
       template<typename _Alloc, typename _UHead>
 	_GLIBCXX20_CONSTEXPR
 	_Tuple_impl(allocator_arg_t, const _Alloc& __a,
-		    const _Tuple_impl<_Idx, _UHead>& __in)
+		    const _Tuple_impl<_Idx, _UHead>& ___in)
 	: _Base(__use_alloc<_Head, _Alloc, const _UHead&>(__a),
-		_Tuple_impl<_Idx, _UHead>::_M_head(__in))
+		_Tuple_impl<_Idx, _UHead>::_M_head(___in))
 	{ }
 
       template<typename _Alloc, typename _UHead>
 	_GLIBCXX20_CONSTEXPR
 	_Tuple_impl(allocator_arg_t, const _Alloc& __a,
-		    _Tuple_impl<_Idx, _UHead>&& __in)
+		    _Tuple_impl<_Idx, _UHead>&& ___in)
 	: _Base(__use_alloc<_Head, _Alloc, _UHead>(__a),
-		std::forward<_UHead>(_Tuple_impl<_Idx, _UHead>::_M_head(__in)))
+		std::forward<_UHead>(_Tuple_impl<_Idx, _UHead>::_M_head(___in)))
 	{ }
 
 #if __cpp_lib_ranges_zip // >= C++23
       template<typename _Alloc, typename _UHead>
 	constexpr
 	_Tuple_impl(allocator_arg_t, const _Alloc& __a,
-		    _Tuple_impl<_Idx, _UHead>& __in)
+		    _Tuple_impl<_Idx, _UHead>& ___in)
 	: _Base(__use_alloc<_Head, _Alloc, _UHead&>(__a),
-		_Tuple_impl<_Idx, _UHead>::_M_head(__in))
+		_Tuple_impl<_Idx, _UHead>::_M_head(___in))
 	{ }
 
       template<typename _Alloc, typename _UHead>
 	constexpr
 	_Tuple_impl(allocator_arg_t, const _Alloc& __a,
-		    const _Tuple_impl<_Idx, _UHead>&& __in)
+		    const _Tuple_impl<_Idx, _UHead>&& ___in)
 	: _Base(__use_alloc<_Head, _Alloc, const _UHead>(__a),
-		std::forward<const _UHead>(_Tuple_impl<_Idx, _UHead>::_M_head(__in)))
+		std::forward<const _UHead>(_Tuple_impl<_Idx, _UHead>::_M_head(___in)))
 	{ }
 #endif // C++23
 
@@ -703,34 +703,34 @@
       template<typename _UHead>
 	_GLIBCXX20_CONSTEXPR
 	void
-	_M_assign(const _Tuple_impl<_Idx, _UHead>& __in)
+	_M_assign(const _Tuple_impl<_Idx, _UHead>& ___in)
 	{
-	  _M_head(*this) = _Tuple_impl<_Idx, _UHead>::_M_head(__in);
+	  _M_head(*this) = _Tuple_impl<_Idx, _UHead>::_M_head(___in);
 	}
 
       template<typename _UHead>
 	_GLIBCXX20_CONSTEXPR
 	void
-	_M_assign(_Tuple_impl<_Idx, _UHead>&& __in)
+	_M_assign(_Tuple_impl<_Idx, _UHead>&& ___in)
 	{
 	  _M_head(*this)
-	    = std::forward<_UHead>(_Tuple_impl<_Idx, _UHead>::_M_head(__in));
+	    = std::forward<_UHead>(_Tuple_impl<_Idx, _UHead>::_M_head(___in));
 	}
 
 #if __cpp_lib_ranges_zip // >= C++23
       template<typename _UHead>
 	constexpr void
-	_M_assign(const _Tuple_impl<_Idx, _UHead>& __in) const
+	_M_assign(const _Tuple_impl<_Idx, _UHead>& ___in) const
 	{
-	  _M_head(*this) = _Tuple_impl<_Idx, _UHead>::_M_head(__in);
+	  _M_head(*this) = _Tuple_impl<_Idx, _UHead>::_M_head(___in);
 	}
 
       template<typename _UHead>
 	constexpr void
-	_M_assign(_Tuple_impl<_Idx, _UHead>&& __in) const
+	_M_assign(_Tuple_impl<_Idx, _UHead>&& ___in) const
 	{
 	  _M_head(*this)
-	    = std::forward<_UHead>(_Tuple_impl<_Idx, _UHead>::_M_head(__in));
+	    = std::forward<_UHead>(_Tuple_impl<_Idx, _UHead>::_M_head(___in));
 	}
 #endif // C++23
 
@@ -749,18 +749,18 @@
     protected:
       _GLIBCXX20_CONSTEXPR
       void
-      _M_swap(_Tuple_impl& __in)
+      _M_swap(_Tuple_impl& ___in)
       {
 	using std::swap;
-	swap(_M_head(*this), _M_head(__in));
+	swap(_M_head(*this), _M_head(___in));
       }
 
 #if __cpp_lib_ranges_zip // >= C++23
       constexpr void
-      _M_swap(const _Tuple_impl& __in) const
+      _M_swap(const _Tuple_impl& ___in) const
       {
 	using std::swap;
-	swap(_M_head(*this), _M_head(__in));
+	swap(_M_head(*this), _M_head(___in));
       }
 #endif // C++23
     };
@@ -1508,9 +1508,9 @@
 			   && !__use_other_ctor<const tuple<_UElements...>&>(),
 	       _ImplicitCtor<_Valid, const _UElements&...> = true>
 	constexpr
-	tuple(const tuple<_UElements...>& __in)
+	tuple(const tuple<_UElements...>& ___in)
 	noexcept(__nothrow_constructible<const _UElements&...>())
-	: _Inherited(static_cast<const _Tuple_impl<0, _UElements...>&>(__in))
+	: _Inherited(static_cast<const _Tuple_impl<0, _UElements...>&>(___in))
 	{ __glibcxx_no_dangling_refs(const _UElements&); }
 
       template<typename... _UElements,
@@ -1518,9 +1518,9 @@
 			   && !__use_other_ctor<const tuple<_UElements...>&>(),
 	       _ExplicitCtor<_Valid, const _UElements&...> = false>
 	explicit constexpr
-	tuple(const tuple<_UElements...>& __in)
+	tuple(const tuple<_UElements...>& ___in)
 	noexcept(__nothrow_constructible<const _UElements&...>())
-	: _Inherited(static_cast<const _Tuple_impl<0, _UElements...>&>(__in))
+	: _Inherited(static_cast<const _Tuple_impl<0, _UElements...>&>(___in))
 	{ __glibcxx_no_dangling_refs(const _UElements&); }
 
       template<typename... _UElements,
@@ -1528,9 +1528,9 @@
 			     && !__use_other_ctor<tuple<_UElements...>&&>(),
 	       _ImplicitCtor<_Valid, _UElements...> = true>
 	constexpr
-	tuple(tuple<_UElements...>&& __in)
+	tuple(tuple<_UElements...>&& ___in)
 	noexcept(__nothrow_constructible<_UElements...>())
-	: _Inherited(static_cast<_Tuple_impl<0, _UElements...>&&>(__in))
+	: _Inherited(static_cast<_Tuple_impl<0, _UElements...>&&>(___in))
 	{ __glibcxx_no_dangling_refs(_UElements&&); }
 
       template<typename... _UElements,
@@ -1538,9 +1538,9 @@
 			     && !__use_other_ctor<tuple<_UElements...>&&>(),
 	       _ExplicitCtor<_Valid, _UElements...> = false>
 	explicit constexpr
-	tuple(tuple<_UElements...>&& __in)
+	tuple(tuple<_UElements...>&& ___in)
 	noexcept(__nothrow_constructible<_UElements...>())
-	: _Inherited(static_cast<_Tuple_impl<0, _UElements...>&&>(__in))
+	: _Inherited(static_cast<_Tuple_impl<0, _UElements...>&&>(___in))
 	{ __glibcxx_no_dangling_refs(_UElements&&); }
 
       // Allocator-extended constructors.
@@ -1594,13 +1594,13 @@
 
       template<typename _Alloc>
 	_GLIBCXX20_CONSTEXPR
-	tuple(allocator_arg_t __tag, const _Alloc& __a, const tuple& __in)
-	: _Inherited(__tag, __a, static_cast<const _Inherited&>(__in)) { }
+	tuple(allocator_arg_t __tag, const _Alloc& __a, const tuple& ___in)
+	: _Inherited(__tag, __a, static_cast<const _Inherited&>(___in)) { }
 
       template<typename _Alloc>
 	_GLIBCXX20_CONSTEXPR
-	tuple(allocator_arg_t __tag, const _Alloc& __a, tuple&& __in)
-	: _Inherited(__tag, __a, static_cast<_Inherited&&>(__in)) { }
+	tuple(allocator_arg_t __tag, const _Alloc& __a, tuple&& ___in)
+	: _Inherited(__tag, __a, static_cast<_Inherited&&>(___in)) { }
 
       template<typename _Alloc, typename... _UElements,
 	       bool _Valid = (sizeof...(_Elements) == sizeof...(_UElements))
@@ -1608,9 +1608,9 @@
 	       _ImplicitCtor<_Valid, const _UElements&...> = true>
 	_GLIBCXX20_CONSTEXPR
 	tuple(allocator_arg_t __tag, const _Alloc& __a,
-	      const tuple<_UElements...>& __in)
+	      const tuple<_UElements...>& ___in)
 	: _Inherited(__tag, __a,
-		     static_cast<const _Tuple_impl<0, _UElements...>&>(__in))
+		     static_cast<const _Tuple_impl<0, _UElements...>&>(___in))
 	{ __glibcxx_no_dangling_refs(const _UElements&); }
 
       template<typename _Alloc, typename... _UElements,
@@ -1620,9 +1620,9 @@
 	_GLIBCXX20_CONSTEXPR
 	explicit
 	tuple(allocator_arg_t __tag, const _Alloc& __a,
-	      const tuple<_UElements...>& __in)
+	      const tuple<_UElements...>& ___in)
 	: _Inherited(__tag, __a,
-		     static_cast<const _Tuple_impl<0, _UElements...>&>(__in))
+		     static_cast<const _Tuple_impl<0, _UElements...>&>(___in))
 	{ __glibcxx_no_dangling_refs(const _UElements&); }
 
       template<typename _Alloc, typename... _UElements,
@@ -1631,9 +1631,9 @@
 	       _ImplicitCtor<_Valid, _UElements...> = true>
 	_GLIBCXX20_CONSTEXPR
 	tuple(allocator_arg_t __tag, const _Alloc& __a,
-	      tuple<_UElements...>&& __in)
+	      tuple<_UElements...>&& ___in)
 	: _Inherited(__tag, __a,
-		     static_cast<_Tuple_impl<0, _UElements...>&&>(__in))
+		     static_cast<_Tuple_impl<0, _UElements...>&&>(___in))
 	{ __glibcxx_no_dangling_refs(_UElements&&); }
 
       template<typename _Alloc, typename... _UElements,
@@ -1643,9 +1643,9 @@
 	_GLIBCXX20_CONSTEXPR
 	explicit
 	tuple(allocator_arg_t __tag, const _Alloc& __a,
-	      tuple<_UElements...>&& __in)
+	      tuple<_UElements...>&& ___in)
 	: _Inherited(__tag, __a,
-		     static_cast<_Tuple_impl<0, _UElements...>&&>(__in))
+		     static_cast<_Tuple_impl<0, _UElements...>&&>(___in))
 	{ __glibcxx_no_dangling_refs(_UElements&&); }
 #endif // concepts && conditional_explicit
 
@@ -1905,10 +1905,10 @@
       tuple&
       operator=(__conditional_t<__assignable<const _Elements&...>(),
 				const tuple&,
-				const __nonesuch&> __in)
+				const __nonesuch&> ___in)
       noexcept(__nothrow_assignable<const _Elements&...>())
       {
-	this->_M_assign(__in);
+	this->_M_assign(___in);
 	return *this;
       }
 
@@ -1916,30 +1916,30 @@
       tuple&
       operator=(__conditional_t<__assignable<_Elements...>(),
 				tuple&&,
-				__nonesuch&&> __in)
+				__nonesuch&&> ___in)
       noexcept(__nothrow_assignable<_Elements...>())
       {
-	this->_M_assign(std::move(__in));
+	this->_M_assign(std::move(___in));
 	return *this;
       }
 
       template<typename... _UElements>
 	_GLIBCXX20_CONSTEXPR
 	__enable_if_t<__assignable<const _UElements&...>(), tuple&>
-	operator=(const tuple<_UElements...>& __in)
+	operator=(const tuple<_UElements...>& ___in)
 	noexcept(__nothrow_assignable<const _UElements&...>())
 	{
-	  this->_M_assign(__in);
+	  this->_M_assign(___in);
 	  return *this;
 	}
 
       template<typename... _UElements>
 	_GLIBCXX20_CONSTEXPR
 	__enable_if_t<__assignable<_UElements...>(), tuple&>
-	operator=(tuple<_UElements...>&& __in)
+	operator=(tuple<_UElements...>&& ___in)
 	noexcept(__nothrow_assignable<_UElements...>())
 	{
-	  this->_M_assign(std::move(__in));
+	  this->_M_assign(std::move(___in));
 	  return *this;
 	}
 #endif // concepts && consteval
@@ -1947,9 +1947,9 @@
       // tuple swap
       _GLIBCXX20_CONSTEXPR
       void
-      swap(tuple& __in)
+      swap(tuple& ___in)
       noexcept(__and_<__is_nothrow_swappable<_Elements>...>::value)
-      { _Inherited::_M_swap(__in); }
+      { _Inherited::_M_swap(___in); }
 
 #if __cpp_lib_ranges_zip // >= C++23
       // As an extension, we constrain the const swap member function in order
@@ -1959,10 +1959,10 @@
       // this function and yield a hard error.  This constraint shouldn't
       // affect the behavior of valid programs.
       constexpr void
-      swap(const tuple& __in) const
+      swap(const tuple& ___in) const
       noexcept(__and_v<__is_nothrow_swappable<const _Elements>...>)
       requires (is_swappable_v<const _Elements> && ...)
-      { _Inherited::_M_swap(__in); }
+      { _Inherited::_M_swap(___in); }
 #endif // C++23
     };
 
@@ -2135,67 +2135,67 @@
       template<typename _U1, typename _U2,
 	       _ImplicitCtor<true, const _U1&, const _U2&> = true>
 	constexpr
-	tuple(const tuple<_U1, _U2>& __in)
+	tuple(const tuple<_U1, _U2>& ___in)
 	noexcept(__nothrow_constructible<const _U1&, const _U2&>())
-	: _Inherited(static_cast<const _Tuple_impl<0, _U1, _U2>&>(__in))
+	: _Inherited(static_cast<const _Tuple_impl<0, _U1, _U2>&>(___in))
 	{ __glibcxx_no_dangling_refs(const _U1&, const _U2&); }
 
       template<typename _U1, typename _U2,
 	       _ExplicitCtor<true, const _U1&, const _U2&> = false>
 	explicit constexpr
-	tuple(const tuple<_U1, _U2>& __in)
+	tuple(const tuple<_U1, _U2>& ___in)
 	noexcept(__nothrow_constructible<const _U1&, const _U2&>())
-	: _Inherited(static_cast<const _Tuple_impl<0, _U1, _U2>&>(__in))
+	: _Inherited(static_cast<const _Tuple_impl<0, _U1, _U2>&>(___in))
 	{ __glibcxx_no_dangling_refs(const _U1&, const _U2&); }
 
       template<typename _U1, typename _U2,
 	       _ImplicitCtor<true, _U1, _U2> = true>
 	constexpr
-	tuple(tuple<_U1, _U2>&& __in)
+	tuple(tuple<_U1, _U2>&& ___in)
 	noexcept(__nothrow_constructible<_U1, _U2>())
-	: _Inherited(static_cast<_Tuple_impl<0, _U1, _U2>&&>(__in))
+	: _Inherited(static_cast<_Tuple_impl<0, _U1, _U2>&&>(___in))
 	{ __glibcxx_no_dangling_refs(_U1&&, _U2&&); }
 
       template<typename _U1, typename _U2,
 	       _ExplicitCtor<true, _U1, _U2> = false>
 	explicit constexpr
-	tuple(tuple<_U1, _U2>&& __in)
+	tuple(tuple<_U1, _U2>&& ___in)
 	noexcept(__nothrow_constructible<_U1, _U2>())
-	: _Inherited(static_cast<_Tuple_impl<0, _U1, _U2>&&>(__in))
+	: _Inherited(static_cast<_Tuple_impl<0, _U1, _U2>&&>(___in))
 	{ __glibcxx_no_dangling_refs(_U1&&, _U2&&); }
 
       template<typename _U1, typename _U2,
 	       _ImplicitCtor<true, const _U1&, const _U2&> = true>
 	constexpr
-	tuple(const pair<_U1, _U2>& __in)
+	tuple(const pair<_U1, _U2>& ___in)
 	noexcept(__nothrow_constructible<const _U1&, const _U2&>())
-	: _Inherited(__in.first, __in.second)
+	: _Inherited(___in.first, ___in.second)
 	{ __glibcxx_no_dangling_refs(const _U1&, const _U2&); }
 
       template<typename _U1, typename _U2,
 	       _ExplicitCtor<true, const _U1&, const _U2&> = false>
 	explicit constexpr
-	tuple(const pair<_U1, _U2>& __in)
+	tuple(const pair<_U1, _U2>& ___in)
 	noexcept(__nothrow_constructible<const _U1&, const _U2&>())
-	: _Inherited(__in.first, __in.second)
+	: _Inherited(___in.first, ___in.second)
 	{ __glibcxx_no_dangling_refs(const _U1&, const _U2&); }
 
       template<typename _U1, typename _U2,
 	       _ImplicitCtor<true, _U1, _U2> = true>
 	constexpr
-	tuple(pair<_U1, _U2>&& __in)
+	tuple(pair<_U1, _U2>&& ___in)
 	noexcept(__nothrow_constructible<_U1, _U2>())
-	: _Inherited(std::forward<_U1>(__in.first),
-		     std::forward<_U2>(__in.second))
+	: _Inherited(std::forward<_U1>(___in.first),
+		     std::forward<_U2>(___in.second))
 	{ __glibcxx_no_dangling_refs(_U1&&, _U2&&); }
 
       template<typename _U1, typename _U2,
 	       _ExplicitCtor<true, _U1, _U2> = false>
 	explicit constexpr
-	tuple(pair<_U1, _U2>&& __in)
+	tuple(pair<_U1, _U2>&& ___in)
 	noexcept(__nothrow_constructible<_U1, _U2>())
-	: _Inherited(std::forward<_U1>(__in.first),
-		     std::forward<_U2>(__in.second))
+	: _Inherited(std::forward<_U1>(___in.first),
+		     std::forward<_U2>(___in.second))
 	{ __glibcxx_no_dangling_refs(_U1&&, _U2&&); }
 
       // Allocator-extended constructors.
@@ -2248,21 +2248,21 @@
 
       template<typename _Alloc>
 	_GLIBCXX20_CONSTEXPR
-	tuple(allocator_arg_t __tag, const _Alloc& __a, const tuple& __in)
-	: _Inherited(__tag, __a, static_cast<const _Inherited&>(__in)) { }
+	tuple(allocator_arg_t __tag, const _Alloc& __a, const tuple& ___in)
+	: _Inherited(__tag, __a, static_cast<const _Inherited&>(___in)) { }
 
       template<typename _Alloc>
 	_GLIBCXX20_CONSTEXPR
-	tuple(allocator_arg_t __tag, const _Alloc& __a, tuple&& __in)
-	: _Inherited(__tag, __a, static_cast<_Inherited&&>(__in)) { }
+	tuple(allocator_arg_t __tag, const _Alloc& __a, tuple&& ___in)
+	: _Inherited(__tag, __a, static_cast<_Inherited&&>(___in)) { }
 
       template<typename _Alloc, typename _U1, typename _U2,
 	       _ImplicitCtor<true, const _U1&, const _U2&> = true>
 	_GLIBCXX20_CONSTEXPR
 	tuple(allocator_arg_t __tag, const _Alloc& __a,
-	      const tuple<_U1, _U2>& __in)
+	      const tuple<_U1, _U2>& ___in)
 	: _Inherited(__tag, __a,
-		     static_cast<const _Tuple_impl<0, _U1, _U2>&>(__in))
+		     static_cast<const _Tuple_impl<0, _U1, _U2>&>(___in))
 	{ __glibcxx_no_dangling_refs(const _U1&, const _U2&); }
 
       template<typename _Alloc, typename _U1, typename _U2,
@@ -2270,32 +2270,32 @@
 	explicit
 	_GLIBCXX20_CONSTEXPR
 	tuple(allocator_arg_t __tag, const _Alloc& __a,
-	      const tuple<_U1, _U2>& __in)
+	      const tuple<_U1, _U2>& ___in)
 	: _Inherited(__tag, __a,
-		     static_cast<const _Tuple_impl<0, _U1, _U2>&>(__in))
+		     static_cast<const _Tuple_impl<0, _U1, _U2>&>(___in))
 	{ __glibcxx_no_dangling_refs(const _U1&, const _U2&); }
 
       template<typename _Alloc, typename _U1, typename _U2,
 	       _ImplicitCtor<true, _U1, _U2> = true>
 	_GLIBCXX20_CONSTEXPR
-	tuple(allocator_arg_t __tag, const _Alloc& __a, tuple<_U1, _U2>&& __in)
-	: _Inherited(__tag, __a, static_cast<_Tuple_impl<0, _U1, _U2>&&>(__in))
+	tuple(allocator_arg_t __tag, const _Alloc& __a, tuple<_U1, _U2>&& ___in)
+	: _Inherited(__tag, __a, static_cast<_Tuple_impl<0, _U1, _U2>&&>(___in))
 	{ __glibcxx_no_dangling_refs(_U1&&, _U2&&); }
 
       template<typename _Alloc, typename _U1, typename _U2,
 	       _ExplicitCtor<true, _U1, _U2> = false>
 	explicit
 	_GLIBCXX20_CONSTEXPR
-	tuple(allocator_arg_t __tag, const _Alloc& __a, tuple<_U1, _U2>&& __in)
-	: _Inherited(__tag, __a, static_cast<_Tuple_impl<0, _U1, _U2>&&>(__in))
+	tuple(allocator_arg_t __tag, const _Alloc& __a, tuple<_U1, _U2>&& ___in)
+	: _Inherited(__tag, __a, static_cast<_Tuple_impl<0, _U1, _U2>&&>(___in))
 	{ __glibcxx_no_dangling_refs(_U1&&, _U2&&); }
 
       template<typename _Alloc, typename _U1, typename _U2,
 	       _ImplicitCtor<true, const _U1&, const _U2&> = true>
 	_GLIBCXX20_CONSTEXPR
 	tuple(allocator_arg_t __tag, const _Alloc& __a,
-	      const pair<_U1, _U2>& __in)
-	: _Inherited(__tag, __a, __in.first, __in.second)
+	      const pair<_U1, _U2>& ___in)
+	: _Inherited(__tag, __a, ___in.first, ___in.second)
 	{ __glibcxx_no_dangling_refs(const _U1&, const _U2&); }
 
       template<typename _Alloc, typename _U1, typename _U2,
@@ -2303,25 +2303,25 @@
 	explicit
 	_GLIBCXX20_CONSTEXPR
 	tuple(allocator_arg_t __tag, const _Alloc& __a,
-	      const pair<_U1, _U2>& __in)
-	: _Inherited(__tag, __a, __in.first, __in.second)
+	      const pair<_U1, _U2>& ___in)
+	: _Inherited(__tag, __a, ___in.first, ___in.second)
 	{ __glibcxx_no_dangling_refs(const _U1&, const _U2&); }
 
       template<typename _Alloc, typename _U1, typename _U2,
 	       _ImplicitCtor<true, _U1, _U2> = true>
 	_GLIBCXX20_CONSTEXPR
-	tuple(allocator_arg_t __tag, const _Alloc& __a, pair<_U1, _U2>&& __in)
-	: _Inherited(__tag, __a, std::forward<_U1>(__in.first),
-		     std::forward<_U2>(__in.second))
+	tuple(allocator_arg_t __tag, const _Alloc& __a, pair<_U1, _U2>&& ___in)
+	: _Inherited(__tag, __a, std::forward<_U1>(___in.first),
+		     std::forward<_U2>(___in.second))
 	{ __glibcxx_no_dangling_refs(_U1&&, _U2&&); }
 
       template<typename _Alloc, typename _U1, typename _U2,
 	       _ExplicitCtor<true, _U1, _U2> = false>
 	explicit
 	_GLIBCXX20_CONSTEXPR
-	tuple(allocator_arg_t __tag, const _Alloc& __a, pair<_U1, _U2>&& __in)
-	: _Inherited(__tag, __a, std::forward<_U1>(__in.first),
-		     std::forward<_U2>(__in.second))
+	tuple(allocator_arg_t __tag, const _Alloc& __a, pair<_U1, _U2>&& ___in)
+	: _Inherited(__tag, __a, std::forward<_U1>(___in.first),
+		     std::forward<_U2>(___in.second))
 	{ __glibcxx_no_dangling_refs(_U1&&, _U2&&); }
 
       // Tuple assignment.
@@ -2330,10 +2330,10 @@
       tuple&
       operator=(__conditional_t<__assignable<const _T1&, const _T2&>(),
 				const tuple&,
-				const __nonesuch&> __in)
+				const __nonesuch&> ___in)
       noexcept(__nothrow_assignable<const _T1&, const _T2&>())
       {
-	this->_M_assign(__in);
+	this->_M_assign(___in);
 	return *this;
       }
 
@@ -2341,61 +2341,61 @@
       tuple&
       operator=(__conditional_t<__assignable<_T1, _T2>(),
 				tuple&&,
-				__nonesuch&&> __in)
+				__nonesuch&&> ___in)
       noexcept(__nothrow_assignable<_T1, _T2>())
       {
-	this->_M_assign(std::move(__in));
+	this->_M_assign(std::move(___in));
 	return *this;
       }
 
       template<typename _U1, typename _U2>
 	_GLIBCXX20_CONSTEXPR
 	__enable_if_t<__assignable<const _U1&, const _U2&>(), tuple&>
-	operator=(const tuple<_U1, _U2>& __in)
+	operator=(const tuple<_U1, _U2>& ___in)
 	noexcept(__nothrow_assignable<const _U1&, const _U2&>())
 	{
-	  this->_M_assign(__in);
+	  this->_M_assign(___in);
 	  return *this;
 	}
 
       template<typename _U1, typename _U2>
 	_GLIBCXX20_CONSTEXPR
 	__enable_if_t<__assignable<_U1, _U2>(), tuple&>
-	operator=(tuple<_U1, _U2>&& __in)
+	operator=(tuple<_U1, _U2>&& ___in)
 	noexcept(__nothrow_assignable<_U1, _U2>())
 	{
-	  this->_M_assign(std::move(__in));
+	  this->_M_assign(std::move(___in));
 	  return *this;
 	}
 
       template<typename _U1, typename _U2>
 	_GLIBCXX20_CONSTEXPR
 	__enable_if_t<__assignable<const _U1&, const _U2&>(), tuple&>
-	operator=(const pair<_U1, _U2>& __in)
+	operator=(const pair<_U1, _U2>& ___in)
 	noexcept(__nothrow_assignable<const _U1&, const _U2&>())
 	{
-	  this->_M_head(*this) = __in.first;
-	  this->_M_tail(*this)._M_head(*this) = __in.second;
+	  this->_M_head(*this) = ___in.first;
+	  this->_M_tail(*this)._M_head(*this) = ___in.second;
 	  return *this;
 	}
 
       template<typename _U1, typename _U2>
 	_GLIBCXX20_CONSTEXPR
 	__enable_if_t<__assignable<_U1, _U2>(), tuple&>
-	operator=(pair<_U1, _U2>&& __in)
+	operator=(pair<_U1, _U2>&& ___in)
 	noexcept(__nothrow_assignable<_U1, _U2>())
 	{
-	  this->_M_head(*this) = std::forward<_U1>(__in.first);
-	  this->_M_tail(*this)._M_head(*this) = std::forward<_U2>(__in.second);
+	  this->_M_head(*this) = std::forward<_U1>(___in.first);
+	  this->_M_tail(*this)._M_head(*this) = std::forward<_U2>(___in.second);
 	  return *this;
 	}
 
       _GLIBCXX20_CONSTEXPR
       void
-      swap(tuple& __in)
+      swap(tuple& ___in)
       noexcept(__and_<__is_nothrow_swappable<_T1>,
 		      __is_nothrow_swappable<_T2>>::value)
-      { _Inherited::_M_swap(__in); }
+      { _Inherited::_M_swap(___in); }
     };
 #endif // concepts && conditional_explicit
 
