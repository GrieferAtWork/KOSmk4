diff -Naur binutils-2.32-orig/bfd/config.bfd binutils-2.32/bfd/config.bfd
--- binutils-2.32-orig/bfd/config.bfd	2019-01-19 17:01:32.000000000 +0100
+++ binutils-2.32/bfd/config.bfd	2019-07-13 15:24:45.845003900 +0200
@@ -560,7 +560,7 @@
     targ_selvecs=hppa_elf32_vec
     ;;
 
-  i[3-7]86-*-elf* | i[3-7]86-*-rtems*)
+  i[3-7]86-*-elf* | i[3-7]86-*-rtems* | i[3-7]86-*-kos*)
     targ_defvec=i386_elf32_vec
     targ_selvecs="iamcu_elf32_vec i386_coff_vec"
     ;;
@@ -668,7 +668,7 @@
     targ_selvecs="i386_elf32_vec iamcu_elf32_vec l1om_elf64_vec k1om_elf64_vec"
     want64=true
     ;;
-  x86_64-*-elf* | x86_64-*-rtems* | x86_64-*-fuchsia)
+  x86_64-*-elf* | x86_64-*-rtems* | x86_64-*-fuchsia | x86_64-*-kos*)
     targ_defvec=x86_64_elf64_vec
     targ_selvecs="i386_elf32_vec iamcu_elf32_vec x86_64_elf32_vec l1om_elf64_vec k1om_elf64_vec"
     case "${targ}" in
diff -Naur binutils-2.32-orig/bfd/elf.c binutils-2.32/bfd/elf.c
--- binutils-2.32-orig/bfd/elf.c	2019-01-19 17:01:32.000000000 +0100
+++ binutils-2.32/bfd/elf.c	2020-06-20 13:31:09.159461000 +0200
@@ -8086,7 +8086,7 @@
       if ((flags & BSF_THREAD_LOCAL) != 0)
 	type = STT_TLS;
       else if ((flags & BSF_GNU_INDIRECT_FUNCTION) != 0)
-	type = STT_GNU_IFUNC;
+	type = (flags & BSF_OBJECT) ? 11 : STT_GNU_IFUNC;
       else if ((flags & BSF_FUNCTION) != 0)
 	type = STT_FUNC;
       else if ((flags & BSF_OBJECT) != 0)
diff -Naur binutils-2.32-orig/bfd/elf64-x86-64.c binutils-2.32/bfd/elf64-x86-64.c
--- binutils-2.32-orig/bfd/elf64-x86-64.c	2019-01-19 17:01:33.000000000 +0100
+++ binutils-2.32/bfd/elf64-x86-64.c	2019-08-08 12:53:44.236980500 +0200
@@ -3072,6 +3072,13 @@
 	  if ((input_section->flags & SEC_ALLOC) != 0
 	      && (input_section->flags & SEC_READONLY) != 0
 	      && h != NULL
+	      /* PATCH for KOS: Allow non-64-bit PC-relative relocation in shared objects
+	       *                when `-Wl,-z,noreloc-overflow' is passed.
+	       *                Why this isn't standard behavior, I don't know, but if
+	       *                you understand what's happening here, you should conclude
+	       *                that this makes sense. (after all: disallowing it is done
+	       *                to prevent a potential overflow at runtime) */
+	      && !info->no_reloc_overflow_check
 	      && ((bfd_link_executable (info)
 		   && ((h->root.type == bfd_link_hash_undefweak
 			&& !resolved_to_zero)
diff -Naur binutils-2.32-orig/bfd/elfcode.h binutils-2.32/bfd/elfcode.h
--- binutils-2.32-orig/bfd/elfcode.h	2019-01-19 17:01:33.000000000 +0100
+++ binutils-2.32/bfd/elfcode.h	2020-06-20 13:37:16.418211300 +0200
@@ -1343,6 +1343,9 @@
 	    case STT_GNU_IFUNC:
 	      sym->symbol.flags |= BSF_GNU_INDIRECT_FUNCTION;
 	      break;
+	    case 11:
+	      sym->symbol.flags |= BSF_OBJECT | BSF_GNU_INDIRECT_FUNCTION;
+	      break;
 	    }
 
 	  if (dynamic)
diff -Naur binutils-2.32-orig/bfd/elflink.c binutils-2.32/bfd/elflink.c
--- binutils-2.32-orig/bfd/elflink.c	2019-01-19 17:01:33.000000000 +0100
+++ binutils-2.32/bfd/elflink.c	2020-06-20 13:59:26.486070400 +0200
@@ -543,13 +543,18 @@
 	 table.  */
       name = h->root.root.string;
       p = strchr (name, ELF_VER_CHR);
-      if (p != NULL)
-	/* We know that the p points into writable memory.  In fact,
-	   there are only a few symbols that have read-only names, being
-	   those like _GLOBAL_OFFSET_TABLE_ that are created specially
-	   by the backends.  Most symbols will have names pointing into
-	   an ELF string table read from a file, or to objalloc memory.  */
-	*p = 0;
+      if (p != NULL) {
+		  if (name[0] == '?')
+			  p = NULL;
+		  else {
+			/* We know that the p points into writable memory.  In fact,
+			there are only a few symbols that have read-only names, being
+			those like _GLOBAL_OFFSET_TABLE_ that are created specially
+			by the backends.  Most symbols will have names pointing into
+			an ELF string table read from a file, or to objalloc memory.  */
+			*p = 0;
+		  }
+	  }
 
       indx = _bfd_elf_strtab_add (dynstr, name, p != NULL);
 
@@ -623,7 +628,7 @@
     {
       /* Set versioned if symbol version is unknown.  */
       char *version = strrchr (name, ELF_VER_CHR);
-      if (version)
+      if (version && name[0] != '?')
 	{
 	  if (version > name && version[-1] != ELF_VER_CHR)
 	    h->versioned = versioned_hidden;
@@ -1085,6 +1090,8 @@
     {
       /* Symbol version is unknown or versioned.  */
       new_version = strrchr (name, ELF_VER_CHR);
+	  if (new_version && name[0] == '?')
+		  new_version = NULL;
       if (new_version)
 	{
 	  if (h->versioned == unknown)
@@ -1856,6 +1863,8 @@
      decorated name.  This will cause external references which do not
      specify a version to be bound to this version of the symbol.  */
   p = strchr (name, ELF_VER_CHR);
+  if (p && name[0] == '?')
+	  p = NULL;
   if (h->versioned == unknown)
     {
       if (p == NULL)
@@ -2257,7 +2266,7 @@
 	    return FALSE;
 	  memcpy (alc, h->root.root.string, len - 1);
 	  alc[len - 1] = '\0';
-	  if (alc[len - 2] == ELF_VER_CHR)
+	  if (alc[len - 2] == ELF_VER_CHR && alc[0] != '?')
 	    alc[len - 2] = '\0';
 
 	  h->verinfo.vertree = t;
@@ -2304,6 +2313,8 @@
     return TRUE;
 
   p = strchr (h->root.root.string, ELF_VER_CHR);
+  if (p && h->root.root.string[0] == '?')
+	  p = NULL;
   if (p != NULL && h->verinfo.vertree == NULL)
     {
       struct bfd_elf_version_tree *t;
@@ -2383,6 +2394,8 @@
 
   hide = FALSE;
   p = strchr (h->root.root.string, ELF_VER_CHR);
+  if (p && h->root.root.string[0] == '?')
+	  p = NULL;
   if (p != NULL && h->verinfo.vertree == NULL)
     {
       struct bfd_elf_version_tree *t;
@@ -4944,6 +4957,9 @@
 	      if (type == STT_GNU_IFUNC
 		  && (abfd->flags & DYNAMIC) != 0)
 		type = STT_FUNC;
+	      if (type == 11
+		  && (abfd->flags & DYNAMIC) != 0)
+		type = STT_OBJECT;
 
 	      if (h->type != type)
 		{
@@ -4980,7 +4996,7 @@
 	  if (definition && !dynamic)
 	    {
 	      char *p = strchr (name, ELF_VER_CHR);
-	      if (p != NULL && p[1] != ELF_VER_CHR)
+	      if (p != NULL && p[1] != ELF_VER_CHR && name[0] != '?')
 		{
 		  /* Queue non-default versions so that .symver x, x@FOO
 		     aliases can be checked.  */
@@ -5248,6 +5264,8 @@
 	      || (h->root.type != bfd_link_hash_defined
 		  && h->root.type != bfd_link_hash_defweak))
 	    continue;
+	  if (h->root.root.string[0] == '?')
+	    continue;
 
 	  amt = p - h->root.root.string;
 	  shortname = (char *) bfd_malloc (amt + 1);
@@ -5539,6 +5557,8 @@
   p = strchr (name, ELF_VER_CHR);
   if (p == NULL || p[1] != ELF_VER_CHR)
     return h;
+  if (name[0] == '?')
+    return h;
 
   /* First check with only one `@'.  */
   len = strlen (name);
@@ -5771,7 +5791,7 @@
   if (h->versioned >= versioned)
     {
       char *p = strchr (name, ELF_VER_CHR);
-      if (p != NULL)
+      if (p != NULL && name[0] != '?')
 	{
 	  alc = (char *) bfd_malloc (p - name + 1);
 	  if (alc == NULL)
@@ -5845,7 +5865,7 @@
   if (h->versioned >= versioned)
     {
       char *p = strchr (name, ELF_VER_CHR);
-      if (p != NULL)
+      if (p != NULL && name[0] != '?')
 	{
 	  alc = (char *) bfd_malloc (p - name + 1);
 	  if (alc == NULL)
@@ -10059,7 +10079,7 @@
 	{
 	  char *p = strrchr (h->root.root.string, ELF_VER_CHR);
 
-	  if (p && p [1] != '\0')
+	  if (p && p [1] != '\0' && h->root.root.string[0] != '?')
 	    {
 	      _bfd_error_handler
 		/* xgettext:c-format */
diff -Naur binutils-2.32-orig/config.sub binutils-2.32/config.sub
--- binutils-2.32-orig/config.sub	2019-01-19 17:01:33.000000000 +0100
+++ binutils-2.32/config.sub	2019-03-17 10:50:26.187357500 +0100
@@ -1363,7 +1363,7 @@
 	     | powermax* | dnix* | nx6 | nx7 | sei* | dragonfly* \
 	     | skyos* | haiku* | rdos* | toppers* | drops* | es* \
 	     | onefs* | tirtos* | phoenix* | fuchsia* | redox* | bme* \
-	     | midnightbsd* | amdhsa* | unleashed* | emscripten*)
+	     | midnightbsd* | amdhsa* | unleashed* | emscripten* | kos*)
 	# Remember, each alternative MUST END IN *, to match a version number.
 		;;
 	qnx*)
diff -Naur binutils-2.32-orig/gas/config/obj-elf.c binutils-2.32/gas/config/obj-elf.c
--- binutils-2.32-orig/gas/config/obj-elf.c	2019-01-19 17:01:33.000000000 +0100
+++ binutils-2.32/gas/config/obj-elf.c	2020-06-20 13:29:30.464670500 +0200
@@ -2043,6 +2043,12 @@
 		type_name);
       type = BSF_FUNCTION | BSF_GNU_INDIRECT_FUNCTION;
     }
+  else if (strcmp (type_name, "kos_indirect_data") == 0
+	   || strcmp (type_name, "11") == 0
+	   || strcmp (type_name, "STT_KOS_IDATA") == 0)
+    {
+      type = BSF_OBJECT | BSF_GNU_INDIRECT_FUNCTION;
+    }
   else if (strcmp (type_name, "gnu_unique_object") == 0)
     {
       struct elf_backend_data *bed;
diff -Naur binutils-2.32-orig/gas/configure.tgt binutils-2.32/gas/configure.tgt
--- binutils-2.32-orig/gas/configure.tgt	2019-01-19 17:01:33.000000000 +0100
+++ binutils-2.32/gas/configure.tgt	2019-03-17 10:51:36.829505700 +0100
@@ -121,6 +121,7 @@
 generic_target=${cpu_type}-$vendor-$os
 # Note: This table is alpha-sorted, please try to keep it that way.
 case ${generic_target} in
+  i386-*-kos*)			fmt=elf em=linux ;;
   aarch64*-*-elf*)			fmt=elf;;
   aarch64*-*-fuchsia*)			fmt=elf;;
   aarch64*-*-linux*)			fmt=elf em=linux
diff -Naur binutils-2.32-orig/ld/Makefile.am binutils-2.32/ld/Makefile.am
--- binutils-2.32-orig/ld/Makefile.am	2019-01-19 17:01:33.000000000 +0100
+++ binutils-2.32/ld/Makefile.am	2019-03-17 11:30:22.015644800 +0100
@@ -283,6 +283,7 @@
 	eelf32xstormy16.c \
 	eelf32xtensa.c \
 	eelf_i386.c \
+	eelf_i386_kos.c \
 	eelf_i386_be.c \
 	eelf_i386_chaos.c \
 	eelf_i386_fbsd.c \
@@ -454,6 +455,7 @@
 	eelf_k1om.c \
 	eelf_k1om_fbsd.c \
 	eelf_x86_64.c \
+	eelf_x86_64_kos.c \
 	eelf_x86_64_cloudabi.c \
 	eelf_x86_64_fbsd.c \
 	eelf_x86_64_nacl.c \
@@ -1289,6 +1291,9 @@
 eelf_i386.c: $(srcdir)/emulparams/elf_i386.sh \
   $(ELF_X86_DEPS) $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
 
+eelf_i386_kos.c: $(srcdir)/emulparams/elf_i386_kos.sh \
+  $(ELF_X86_DEPS) $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
+
 eelf_i386_be.c: $(srcdir)/emulparams/elf_i386_be.sh \
   $(ELF_DEPS) $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
 
@@ -1849,6 +1854,9 @@
 eelf_x86_64.c: $(srcdir)/emulparams/elf_x86_64.sh \
   $(ELF_X86_DEPS) $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
 
+eelf_x86_64_kos.c: $(srcdir)/emulparams/elf_x86_64_kos.sh \
+  $(ELF_X86_DEPS) $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
+
 eelf_x86_64_cloudabi.c: $(srcdir)/emulparams/elf_x86_64_cloudabi.sh \
   $(srcdir)/emulparams/elf_x86_64.sh \
   $(ELF_X86_DEPS) $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
diff -Naur binutils-2.32-orig/ld/Makefile.in binutils-2.32/ld/Makefile.in
--- binutils-2.32-orig/ld/Makefile.in	2019-02-02 16:54:43.000000000 +0100
+++ binutils-2.32/ld/Makefile.in	2019-03-17 11:30:49.548147300 +0100
@@ -769,6 +769,7 @@
 	eelf32xstormy16.c \
 	eelf32xtensa.c \
 	eelf_i386.c \
+	eelf_i386_kos.c \
 	eelf_i386_be.c \
 	eelf_i386_chaos.c \
 	eelf_i386_fbsd.c \
@@ -939,6 +940,7 @@
 	eelf_k1om.c \
 	eelf_k1om_fbsd.c \
 	eelf_x86_64.c \
+	eelf_x86_64_kos.c \
 	eelf_x86_64_cloudabi.c \
 	eelf_x86_64_fbsd.c \
 	eelf_x86_64_nacl.c \
@@ -1386,6 +1388,7 @@
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/eelf_i386_be.Po@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/eelf_i386_chaos.Po@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/eelf_i386_fbsd.Po@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/eelf_i386_kos.Po@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/eelf_i386_ldso.Po@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/eelf_i386_nacl.Po@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/eelf_i386_sol2.Po@am__quote@
@@ -1399,6 +1402,7 @@
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/eelf_x86_64.Po@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/eelf_x86_64_cloudabi.Po@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/eelf_x86_64_fbsd.Po@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/eelf_x86_64_kos.Po@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/eelf_x86_64_nacl.Po@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/eelf_x86_64_sol2.Po@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/eh8300elf.Po@am__quote@
@@ -2893,6 +2897,9 @@
 eelf_i386.c: $(srcdir)/emulparams/elf_i386.sh \
   $(ELF_X86_DEPS) $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
 
+eelf_i386_kos.c: $(srcdir)/emulparams/elf_i386_kos.sh \
+  $(ELF_X86_DEPS) $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
+
 eelf_i386_be.c: $(srcdir)/emulparams/elf_i386_be.sh \
   $(ELF_DEPS) $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
 
@@ -3453,6 +3460,9 @@
 eelf_x86_64.c: $(srcdir)/emulparams/elf_x86_64.sh \
   $(ELF_X86_DEPS) $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
 
+eelf_x86_64_kos.c: $(srcdir)/emulparams/elf_x86_64_kos.sh \
+  $(ELF_X86_DEPS) $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
+
 eelf_x86_64_cloudabi.c: $(srcdir)/emulparams/elf_x86_64_cloudabi.sh \
   $(srcdir)/emulparams/elf_x86_64.sh \
   $(ELF_X86_DEPS) $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
diff -Naur binutils-2.32-orig/ld/configure.tgt binutils-2.32/ld/configure.tgt
--- binutils-2.32-orig/ld/configure.tgt	2019-01-19 17:01:33.000000000 +0100
+++ binutils-2.32/ld/configure.tgt	2019-07-13 15:30:28.060727700 +0200
@@ -45,6 +45,13 @@
 # architecture variants should be kept together even if their names
 # break the alpha sorting.
 case "${targ}" in
+i[3-7]86-*-kos*)
+			targ_emul=elf_i386_kos
+			targ_extra_emuls=elf_i386
+			targ64_extra_emuls="elf_x86_64_kos elf_x86_64" ;;
+x86_64-*-kos*)
+			targ_emul=elf_x86_64_kos
+			targ_extra_emuls="elf_i386_kos elf_x86_64 elf_i386" ;;
 aarch64_be-*-elf)	targ_emul=aarch64elfb
 			targ_extra_emuls="aarch64elf aarch64elf32 aarch64elf32b armelfb armelf" ;;
 aarch64-*-elf | aarch64-*-rtems*)
diff -Naur binutils-2.32-orig/ld/emulparams/elf_i386_kos.sh binutils-2.32/ld/emulparams/elf_i386_kos.sh
--- binutils-2.32-orig/ld/emulparams/elf_i386_kos.sh	1970-01-01 01:00:00.000000000 +0100
+++ binutils-2.32/ld/emulparams/elf_i386_kos.sh	2019-07-13 15:48:52.461639200 +0200
@@ -0,0 +1,4 @@
+. ${srcdir}/emulparams/elf_i386.sh
+GENERATE_SHLIB_SCRIPT=yes
+GENERATE_PIE_SCRIPT=yes
+XDATA_NAME=.xdata
diff -Naur binutils-2.32-orig/ld/emulparams/elf_x86_64_kos.sh binutils-2.32/ld/emulparams/elf_x86_64_kos.sh
--- binutils-2.32-orig/ld/emulparams/elf_x86_64_kos.sh	1970-01-01 01:00:00.000000000 +0100
+++ binutils-2.32/ld/emulparams/elf_x86_64_kos.sh	2019-07-13 15:49:36.688839000 +0200
@@ -0,0 +1,4 @@
+. ${srcdir}/emulparams/elf_x86_64.sh
+GENERATE_SHLIB_SCRIPT=yes
+GENERATE_PIE_SCRIPT=yes
+XDATA_NAME=.xdata
diff -Naur binutils-2.32-orig/ld/scripttempl/elf.sc binutils-2.32/ld/scripttempl/elf.sc
--- binutils-2.32-orig/ld/scripttempl/elf.sc	2019-01-19 17:01:33.000000000 +0100
+++ binutils-2.32/ld/scripttempl/elf.sc	2019-07-13 15:47:26.499923100 +0200
@@ -530,6 +530,19 @@
   ${RELOCATING+${TEXT_SEGMENT_ALIGN}}
 EOF
 
+if test -n "$XDATA_NAME"; then
+cat <<EOF
+  ${XDATA_NAME} :
+  {
+    ${RELOCATING+*(.xdata.unlikely .xdata.*_unlikely .xdata.unlikely.*)}
+    ${RELOCATING+*(.xdata.exit .xdata.exit.*)}
+    ${RELOCATING+*(.xdata.startup .xdata.startup.*)}
+    ${RELOCATING+*(.xdata.hot .xdata.hot.*)}
+    *(.xdata ${RELOCATING+ .xdata.*})
+  } ${FILL}
+EOF
+fi
+
 if test -n "${SEPARATE_CODE}${SEPARATE_TEXT}"; then
   if test -n "${RODATA_ADDR}"; then
     RODATA_ADDR="\
