diff -Naur libpciaccess-0.16-orig/scanpci/scanpci.c libpciaccess-0.16/scanpci/scanpci.c
--- libpciaccess-0.16-orig/scanpci/scanpci.c	2020-08-13 13:23:17.233174500 +0200
+++ libpciaccess-0.16/scanpci/scanpci.c	2020-08-13 13:27:05.381268300 +0200
@@ -21,7 +21,7 @@
  * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
  * DEALINGS IN THE SOFTWARE.
  */
-
+#define _BSD_SOURCE 1
 #ifdef HAVE_CONFIG_H
 #include "config.h"
 #endif
@@ -30,21 +30,7 @@
 #include <stdio.h>
 #include <unistd.h>
 #include <inttypes.h>
-
-#ifdef HAVE_ERR_H
 #include <err.h>
-#else
-# include <errno.h>
-# include <string.h>
-# define err(exitcode, format, args...) \
-   errx(exitcode, format ": %s", ## args, strerror(errno))
-# define errx(exitcode, format, args...) \
-   { warnx(format, ## args); exit(exitcode); }
-# define warn(format, args...) \
-   warnx(format ": %s", ## args, strerror(errno))
-# define warnx(format, args...) \
-   fprintf(stderr, format "\n", ## args)
-#endif
 
 #include "pciaccess.h"
 #include "pciaccess_private.h"
@@ -227,7 +213,7 @@
 
     ret = pci_system_init();
     if (ret != 0)
-	err(1, "Couldn't initialize PCI system");
+	errc(1, ret, "Couldn't initialize PCI system");
 
     iter = pci_slot_match_iterator_create( NULL );
 
diff -Naur libpciaccess-0.16-orig/src/Makefile.am libpciaccess-0.16/src/Makefile.am
--- libpciaccess-0.16-orig/src/Makefile.am	2020-08-13 13:23:17.233174500 +0200
+++ libpciaccess-0.16/src/Makefile.am	2020-08-08 15:57:45.347290700 +0200
@@ -27,8 +27,8 @@
 lib_LTLIBRARIES = libpciaccess.la
 
 if LINUX
-OS_SUPPORT = linux_sysfs.c linux_devmem.c linux_devmem.h
-VGA_ARBITER = common_vgaarb.c
+OS_SUPPORT = x86_pci.c x86_pci.h linux_devmem.c linux_devmem.h
+VGA_ARBITER = common_vgaarb_stub.c
 endif
 
 if FREEBSD
diff -Naur libpciaccess-0.16-orig/src/common_init.c libpciaccess-0.16/src/common_init.c
--- libpciaccess-0.16-orig/src/common_init.c	2020-08-13 13:23:17.233174500 +0200
+++ libpciaccess-0.16/src/common_init.c	2020-08-08 15:57:45.348288100 +0200
@@ -67,7 +67,7 @@
     err = pci_system_solx_devfs_create();
 #elif defined(__GNU__)
     err = pci_system_hurd_create();
-#elif defined(__CYGWIN__)
+#elif defined(__CYGWIN__) || defined(__KOS__)
     err = pci_system_x86_create();
 #else
 # error "Unsupported OS"
diff -Naur libpciaccess-0.16-orig/src/pciaccess_private.h libpciaccess-0.16/src/pciaccess_private.h
--- libpciaccess-0.16-orig/src/pciaccess_private.h	2020-08-13 13:23:17.248284600 +0200
+++ libpciaccess-0.16/src/pciaccess_private.h	2020-08-08 15:57:45.349285300 +0200
@@ -46,6 +46,7 @@
  * new version, so warn unconditionally.
  */
 #include <fcntl.h>
+#include <stddef.h>
 
 #ifndef O_CLOEXEC
 #warning O_CLOEXEC not available, please upgrade.
diff -Naur libpciaccess-0.16-orig/src/x86_pci.c libpciaccess-0.16/src/x86_pci.c
--- libpciaccess-0.16-orig/src/x86_pci.c	2020-08-13 13:23:17.248284600 +0200
+++ libpciaccess-0.16/src/x86_pci.c	2020-08-13 18:05:34.649640400 +0200
@@ -38,6 +38,36 @@
 #include "pciaccess.h"
 #include "pciaccess_private.h"
 
+
+#ifdef __KOS__
+/* This is faster, even it it leaks 1 fd
+ * Also note that when not using the KOS-patched version of this
+ * library, it will always leak /dev/mem in multiple locations... */
+#include <hybrid/atomic.h>
+static int _fd_dev_mem = -1;
+static int _dev_mem_open(void) {
+	int result = ATOMIC_READ(_fd_dev_mem);
+	if __unlikely(result == -1) {
+		result = open("/dev/mem", O_RDWR | O_CLOEXEC);
+		if __likely(result != -1) {
+			int new_result;
+			new_result = ATOMIC_CMPXCH_VAL(_fd_dev_mem, -1, result);
+			if __unlikely(new_result != -1) {
+				close(result);
+				result = new_result;
+			}
+		}
+	}
+	return result;
+}
+#define DEV_MEM_OPEN()     _dev_mem_open()
+#define DEV_MEM_CLOSE(fd)  (void)0 /* Nothing. - Keep /dev/mem open */
+#else
+#define DEV_MEM_OPEN()     open("/dev/mem", O_RDWR | O_CLOEXEC)
+#define DEV_MEM_CLOSE(fd)  close(fd)
+#endif
+
+
 #if defined(__GNU__)
 
 #include <sys/io.h>
@@ -58,11 +88,11 @@
     return errno;
 }
 
-#elif defined(__GLIBC__)
+#elif defined(__GLIBC__) || defined(__KOS__)
 
 #include <sys/io.h>
 
-static int
+int
 x86_enable_io(void)
 {
     if (!iopl(3))
@@ -70,7 +100,7 @@
     return errno;
 }
 
-static int
+int
 x86_disable_io(void)
 {
     if (!iopl(0))
@@ -441,20 +471,20 @@
     int memfd;
     struct pci_device_private *d = (struct pci_device_private *)dev;
 
-    memfd = open("/dev/mem", O_RDONLY | O_CLOEXEC);
+    memfd = DEV_MEM_OPEN();
     if (memfd == -1)
 	return errno;
 
     bios = mmap(NULL, dev->rom_size, PROT_READ, MAP_SHARED, memfd, d->rom_base);
     if (bios == MAP_FAILED) {
-	close(memfd);
+	DEV_MEM_CLOSE(memfd);
 	return errno;
     }
 
     memcpy(buffer, bios, dev->rom_size);
 
     munmap(bios, dev->rom_size);
-    close(memfd);
+    DEV_MEM_CLOSE(memfd);
 
     return 0;
 }
@@ -594,7 +624,7 @@
         }
 
         /* Map the region in our space */
-        memfd = open ("/dev/mem", O_RDWR | O_CLOEXEC);
+        memfd = DEV_MEM_OPEN();
         if (memfd == -1)
             return errno;
 
@@ -604,9 +634,10 @@
         if (dev->regions[reg_num].memory == MAP_FAILED)
         {
             dev->regions[reg_num].memory = 0;
-            close (memfd);
+            DEV_MEM_CLOSE (memfd);
             return errno;
         }
+        DEV_MEM_CLOSE (memfd);
     }
 
     return 0;
@@ -723,7 +754,7 @@
 {
     error_t err;
     uint8_t dev, func, nfuncs, hdrtype, secbus;
-    uint32_t reg;
+    uint32_t vendor_reg, reg;
     struct pci_device_private *d, *devices;
     struct pci_device scratchdev;
 
@@ -740,11 +771,11 @@
         for (func = 0; func < nfuncs; func++)
         {
             scratchdev.func = func;
-            err = pci_device_cfg_read_u32 (&scratchdev, &reg, PCI_VENDOR_ID);
+            err = pci_device_cfg_read_u32 (&scratchdev, &vendor_reg, PCI_VENDOR_ID);
             if (err)
                 return err;
 
-            if (PCI_VENDOR (reg) == PCI_VENDOR_INVALID || PCI_VENDOR (reg) == 0)
+            if (PCI_VENDOR (vendor_reg) == PCI_VENDOR_INVALID || PCI_VENDOR (vendor_reg) == 0)
                 continue;
 
             err = pci_device_cfg_read_u32 (&scratchdev, &reg, PCI_CLASS);
@@ -769,8 +800,16 @@
             d->base.bus = bus;
             d->base.dev = dev;
             d->base.func = func;
+/*FIX*/     d->base.vendor_id = PCI_VENDOR(vendor_reg);
+/*FIX*/     d->base.device_id = PCI_DEVICE(vendor_reg);
+/*FIX*/     err = pci_device_cfg_read_u32 (&scratchdev, &vendor_reg, PCI_SUB_VENDOR_ID);
+/*FIX*/     if (!err) {
+/*FIX*/         d->base.subvendor_id = PCI_VENDOR(vendor_reg);
+/*FIX*/         d->base.subdevice_id = PCI_DEVICE(vendor_reg);
+/*FIX*/     }
 
-            d->base.device_class = reg >> 8;
+/*FIX*/     d->base.device_class = reg >> 8;
+/*FIX*/     d->base.revision     = reg & 0xFF;
 
             err = pci_device_x86_probe (&d->base);
             if (err)
@@ -845,7 +884,7 @@
 pci_device_x86_map_range(struct pci_device *dev,
     struct pci_device_mapping *map)
 {
-    int memfd = open("/dev/mem", O_RDWR | O_CLOEXEC);
+    int memfd = DEV_MEM_OPEN();
     int prot = PROT_READ;
 
     if (memfd == -1)
@@ -856,9 +895,10 @@
 
     map->memory = mmap(NULL, map->size, prot, MAP_SHARED, memfd, map->base);
     if (map->memory == MAP_FAILED) {
-    	close(memfd);
+	DEV_MEM_CLOSE(memfd);
 	return errno;
     }
+    DEV_MEM_CLOSE(memfd);
     return 0;
 }
 
