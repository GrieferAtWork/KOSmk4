diff -Naur mtools-4.0.23-orig/mcopy.c mtools-4.0.23/mcopy.c
--- mtools-4.0.23-orig/mcopy.c	2018-12-09 10:29:53.000000000 +0100
+++ mtools-4.0.23/mcopy.c	2021-01-11 16:04:35.952449300 +0100
@@ -358,6 +358,7 @@
 }
 
 
+static unsigned char dos_write_attr = 0;
 
 static int dos_write(direntry_t *entry, MainParam_t *mp, int needfilter)
 /* write a messy dos file to another messy dos file */
@@ -367,9 +368,9 @@
 	const char *targetName = mpPickTargetName(mp);
 
 	if(entry && arg->preserveAttributes)
-		arg->attr = entry->dir.attr;
+		arg->attr = dos_write_attr | entry->dir.attr;
 	else
-		arg->attr = ATTR_ARCHIVE;
+		arg->attr = dos_write_attr | ATTR_ARCHIVE;
 
 	arg->needfilter = needfilter;
 	if (entry && mp->targetDir == entry->Dir){
@@ -523,7 +524,7 @@
 	fastquit = 0;
 	if(helpFlag(argc, argv))
 		usage(0);
-	while ((c = getopt(argc, argv, "i:abB/sptTnmvQD:oh")) != EOF) {
+	while ((c = getopt(argc, argv, "i:abB/SsptTnmvQD:oh")) != EOF) {
 		switch (c) {
 			case 'i':
 				set_cmd_line_image(optarg);
@@ -532,6 +533,9 @@
 			case '/':
 				arg.recursive = 1;
 				break;
+			case 'S':
+				dos_write_attr |= ATTR_SYSTEM;
+				break;
 			case 'p':
 				arg.preserveAttributes = 1;
 				break;
diff -Naur mtools-4.0.23-orig/mk_direntry.c mtools-4.0.23/mk_direntry.c
--- mtools-4.0.23-orig/mk_direntry.c	2018-12-09 11:08:33.000000000 +0100
+++ mtools-4.0.23/mk_direntry.c	2021-01-11 15:47:15.942069100 +0100
@@ -68,34 +68,7 @@
 				 char *longname,
 				 int isprimary)
 {
-	int mangled;
-
-	/* TODO: Would be nice to suggest "autorenamed" version of name, press 
-	 * <Return> to get it.
-	 */
-#if 0
-	fprintf(stderr,"Entering ask_rename, isprimary=%d.\n", isprimary);
-#endif
-
-	if(!opentty(0))
-		return 0;
-
-	mangled = 0;
-	do {
-		char tname[4*MAX_VNAMELEN+1];
-		fprintf(stderr, "New %s name for \"%s\": ",
-			isprimary ? "primary" : "secondary", longname);
-		fflush(stderr);
-		if (! fgets(tname, 4*MAX_VNAMELEN+1, opentty(0)))
-			return 0;
-		chomp(tname);
-		if (isprimary)
-			strcpy(longname, tname);
-		else
-			mangled = convert_to_shortname(cp, 
-						       ch, tname, shortname);
-	} while (mangled & 1);
-	return 1;
+	return 0;
 }
 
 /**
@@ -150,7 +123,7 @@
 
 	a = ch->action[isprimary];
 
-	if(a == NAMEMATCH_NONE && !opentty(1)) {
+	if(a == NAMEMATCH_NONE) {
 		/* no default, and no tty either . Skip the troublesome file */
 		return NAMEMATCH_SKIP;
 	}
@@ -173,21 +146,9 @@
 			"\ns)kip S)kip-all q)uit (aArR");
 		if(!no_overwrite)
 			fprintf(stderr,"oO");
-		fprintf(stderr,"sSq): ");
+		fprintf(stderr,"sSq): \n");
 		fflush(stderr);
-		fflush(opentty(1));
-		if (mtools_raw_tty) {
-			int rep;
-			rep = fgetc(opentty(1));			
-			fputs("\n", stderr);
-			if(rep == EOF)
-				ans[0] = 'q';
-			else
-				ans[0] = rep;
-		} else {
-			if(fgets(ans, 9, opentty(0)) == NULL)
-				ans[0] = 'q';
-		}
+		ans[0] = 'q';
 		perm = isupper((unsigned char)ans[0]);
 		switch(tolower((unsigned char)ans[0])) {
 			case 'a':
diff -Naur mtools-4.0.23-orig/mtools.h mtools-4.0.23/mtools.h
--- mtools-4.0.23-orig/mtools.h	2018-12-09 20:41:44.000000000 +0100
+++ mtools-4.0.23/mtools.h	2021-01-11 15:51:01.091501900 +0100
@@ -173,8 +173,6 @@
 int copyfile(Stream_t *Source, Stream_t *Target);
 int getfreeMinClusters(Stream_t *Stream, size_t ref);
 
-FILE *opentty(int mode);
-
 int is_dir(Stream_t *Dir, char *path);
 void bufferize(Stream_t **Dir);
 
@@ -256,7 +254,6 @@
 extern const char *mtools_date_string;
 extern uint8_t mtools_rate_0, mtools_rate_any;
 extern unsigned int mtools_default_codepage;
-extern int mtools_raw_tty;
 
 extern int batchmode;
 
diff -Naur mtools-4.0.23-orig/tty.c mtools-4.0.23/tty.c
--- mtools-4.0.23-orig/tty.c	2018-12-02 17:23:26.000000000 +0100
+++ mtools-4.0.23/tty.c	2021-01-11 15:50:03.601645500 +0100
@@ -19,207 +19,7 @@
 #include "sysincludes.h"
 #include "mtools.h"
 
-static FILE *tty=NULL;
-static int notty=0;	
-static int ttyfd=-1;
-#ifdef USE_RAWTERM
-int	mtools_raw_tty = 1;
-#else
-int	mtools_raw_tty = 0;
-#endif
-
-#ifdef USE_RAWTERM
-# if defined TCSANOW && defined HAVE_TCSETATTR
-/* we have tcsetattr & tcgetattr. Good */
-typedef struct termios Terminal;
-#  define stty(a,b)        (void)tcsetattr(a,TCSANOW,b)
-#  define gtty(a,b)        (void)tcgetattr(a,b)
-#  define USE_TCIFLUSH
-
-# elif defined TCSETS && defined TCGETS
-typedef struct termios Terminal;
-#  define stty(a,b) (void)ioctl(a,TCSETS,(char *)b)
-#  define gtty(a,b) (void)ioctl(a,TCGETS,(char *)b)
-#  define USE_TCIFLUSH
-
-# elif defined TCSETA && defined TCGETA
-typedef struct termio Terminal;
-#  define stty(a,b) (void)ioctl(a,TCSETA,(char *)b)
-#  define gtty(a,b) (void)ioctl(a,TCGETA,(char *)b)
-#  define USE_TCIFLUSH
-
-# elif defined(HAVE_SGTTY_H) && defined(TIOCSETP) && defined(TIOCGETP)
-typedef struct sgttyb Terminal;
-#  define stty(a,b) (void)ioctl(a,TIOCSETP,(char *)b)
-#  define gtty(a,b) (void)ioctl(a,TIOCGETP,(char *)b)
-#  define USE_SGTTY
-#  define discard_input(a) /**/
-
-# else
-/* no way to use raw terminal */
-#  warning Cannot use raw terminal code (disabled)
-#  undef USE_RAWTERM
-# endif
-
-#endif
-
-#ifdef USE_TCIFLUSH
-# if defined TCIFLUSH && defined HAVE_TCFLUSH
-#  define discard_input(a) tcflush(a,TCIFLUSH)
-# else
-#  define discard_input(a) /**/
-# endif
-#endif
-
-#ifdef USE_RAWTERM
-
-static int tty_mode = -1; /* 1 for raw, 0 for cooked, -1 for initial */
-static int need_tty_reset = 0;
-static int handlerIsSet = 0;
-
-#define restore_tty(a) stty(STDIN,a)
-
-
-#define STDIN ttyfd
-#ifdef future
-#define FAIL (-1)
-#endif
-#define DONE 0
-static Terminal in_orig;
-
-/*--------------- Signal Handler routines -------------*/
-
-static void tty_time_out(int dummy UNUSEDP) NORETURN;
-static void tty_time_out(int dummy UNUSEDP)
-{
-	int exit_code;
-	signal(SIGALRM, SIG_IGN);
-	if(tty && need_tty_reset)
-		restore_tty (&in_orig);	
-#ifdef future
-	if (fail_on_timeout)
-		exit_code=SHFAIL;
-	else {
-		if (default_choice && mode_defined) {
-			if (yes_no) {
-				if ('Y' == default_choice)
-					exit_code=0;
-				else
-					exit_code=1;
-			} else
-				exit_code=default_choice-minc+1;
-		} else
-			exit_code=DONE;
-	}
-#else
-	exit_code = DONE;
-#endif
-	exit(exit_code);
-}
-
-static void cleanup_tty(void)
-{ 
-	if(tty && need_tty_reset) {
-		restore_tty (&in_orig);
-		setup_signal();
-	}
-}
-
-static void set_raw_tty(int mode)
-{
-	Terminal in_raw;
-
-	if(mode != tty_mode && mode != -1) {
-		if(!handlerIsSet) {
-			/* Determine existing TTY settings */
-			gtty (STDIN, &in_orig);
-			need_tty_reset = 1;
-
-			/* Restore original TTY settings on exit */
-			atexit(cleanup_tty);
-			handlerIsSet = 1;
-		}
-
-
-		setup_signal();
-		signal (SIGALRM, tty_time_out);
-	
-		/* Change STDIN settings to raw */
-
-		gtty (STDIN, &in_raw);
-		if(mode) {
-#ifdef USE_SGTTY
-			in_raw.sg_flags |= CBREAK;
-#else
-			in_raw.c_lflag &= ~ICANON;
-			in_raw.c_cc[VMIN]=1;
-			in_raw.c_cc[VTIME]=0;			
-#endif
-			stty (STDIN, &in_raw);
-		} else {
-#ifdef USE_SGTTY
-			in_raw.sg_flags &= ~CBREAK;
-#else
-			in_raw.c_lflag |= ICANON;
-#endif
-			stty (STDIN, &in_raw);
-		}
-		tty_mode = mode;
-		discard_input(STDIN);
-	}
-}
-#endif
-
-FILE *opentty(int mode)
-{
-	if(notty)
-		return NULL;
-	if (tty == NULL) {
-		ttyfd = open("/dev/tty", O_RDONLY);
-		if(ttyfd >= 0) {
-			tty = fdopen(ttyfd, "r");
-		}
-	}
-	if  (tty == NULL){
-		if ( !isatty(0) ){
-			notty = 1;
-			return NULL;
-		}
-		ttyfd = 0;
-		tty = stdin;
-	}
-#ifdef USE_RAWTERM
-	if(mtools_raw_tty)
-		set_raw_tty(mode);
-#endif
-	return tty;
-}
-
 int ask_confirmation(const char *format, ...)
 {
-	char ans[10];
-	va_list ap;
-
-	if(!opentty(-1))
-		return 0;
-
-	while (1) {
-		va_start(ap, format);
-		vfprintf(stderr, format, ap);
-		va_end(ap);
-		fflush(stderr);
-		fflush(opentty(-1));
-		if (mtools_raw_tty) {
-			ans[0] = fgetc(opentty(1));
-			fputs("\n", stderr);
-		} else {
-			if(fgets(ans,9, opentty(0)) == NULL)
-				/* Treat end-of-file as no */
-				ans[0] = 'n';
-		}
-		if (ans[0] == 'y' || ans[0] == 'Y')
-			return 0;
-		if (ans[0] == 'n' || ans[0] == 'N')
-			return -1;
-	}
+	return 0;
 }
