/* Copyright (c) 2019-2020 Griefer@Work                                       *
 *                                                                            *
 * This software is provided 'as-is', without any express or implied          *
 * warranty. In no event will the authors be held liable for any damages      *
 * arising from the use of this software.                                     *
 *                                                                            *
 * Permission is granted to anyone to use this software for any purpose,      *
 * including commercial applications, and to alter it and redistribute it     *
 * freely, subject to the following restrictions:                             *
 *                                                                            *
 * 1. The origin of this software must not be misrepresented; you must not    *
 *    claim that you wrote the original software. If you use this software    *
 *    in a product, an acknowledgement (see the following) in the product     *
 *    documentation is required:                                              *
 *    Portions Copyright (c) 2019-2020 Griefer@Work                           *
 * 2. Altered source versions must be plainly marked as such, and must not be *
 *    misrepresented as being the original software.                          *
 * 3. This notice may not be removed or altered from any source distribution. *
 */


import * from deemon;
import * from ..libmagic.libmagic;
import flattenElfBinary from ..libmagic.steps.elf;
import opt = ._options;
import fs;
import ipc;
import ._common as common;
import ._shadow as shadow;

final global BOCHS_BIOS    = "BIOS-bochs-latest";
final global BOCHS_VGABIOS = "VGABIOS-lgpl-latest";

function enumerateBochsInstallationLocations(): {string...} {
	/* Check the bochs version created by `bash kos/misc/make_tool.sh bochs` */
	yield "binutils/build-bochs-2.6.11";
#ifdef __WINDOWS__
	for (local ver: ["2.6.11", "2.6.9", "2.6.8"]) {
		yield "D:\\Bochs-{}\\".format({ ver });
		yield "C:\\Program Files\\Bochs-{}".format({ ver });
		yield "C:\\Program Files (x86)\\Bochs-{}".format({ ver });
	}
#endif /* __WINDOWS__ */
	yield fs.environ["PATH"].split(fs.DELIM)...;
}

function enumerateBochsBiosLocations(): {string...} {
	return enumerateBochsInstallationLocations();
}


function start(
		groups: {Group...},
		config: Config,
		BINPATH: string,
		KERNEL: string,
		DRIVERS: {(string, string)...},
		TARGET_ARCH: string,
		TARGET: Module,
		DISK_FILENAME: string,
		options: {string: Object},
		magic: Module) {
	if (DRIVERS)
		throw Error("Bochs doesn't support booting KOS with additional drivers");
	if (options.get(opt.CMDLINE))
		throw Error("Bochs doesn't support a kernel commandline");
	local bochs = options.get("bochs.exe");
	if (bochs is none) {
		bochs = common.findExecutableInPaths(
			enumerateBochsInstallationLocations(), "bochs");
		if (bochs is none) {
			print "Failed to locate bochs executable";
			throw Error("Cannot locate bochs executable");
		}
	}
	local bochsBiosFilename    = options.get("bochs.bios");
	local bochsVGABiosFilename = options.get("bochs.vgabios");
	if (bochsBiosFilename is none || bochsVGABiosFilename is none) {
		for (local x: enumerateBochsBiosLocations()) {
			bochsBiosFilename    = fs.joinpath(x, BOCHS_BIOS);
			bochsVGABiosFilename = fs.joinpath(x, BOCHS_VGABIOS);
			if (fs.stat.isreg(bochsBiosFilename) &&
				fs.stat.isreg(bochsVGABiosFilename))
				goto got_bios;
		}
		print "Failed to locate bochs BIOS/VGA-VIOS";
		throw Error("Cannot locate bochs BIOS/VGA-VIOS");
	}
got_bios:
	local bochs_arguments = [];
	local kernelShadowFilename = shadow.updateKernelShadow(KERNEL, TARGET_ARCH);
	local bxrcFilename = "{}{}.bxrc".format({
		fs.headof(kernelShadowFilename),
		fs.fileof(kernelShadowFilename) });
	try fs.unlink(DISK_FILENAME + ".lock"); catch (...);
	try fs.unlink(kernelShadowFilename + ".lock"); catch (...);
	with (local rc = File.open(bxrcFilename, "w")) {
		rc << "romimage: file=" << repr(bochsBiosFilename) << "\n";
		rc << "vgaromimage: file=" << repr(bochsVGABiosFilename) << "\n";
		rc << "boot: disk\n";
		rc << "ata0-master: type=disk, path=" << repr(fs.tailof(kernelShadowFilename))
			<< ", mode=flat, cylinders=0, heads=16, spt=63, model=\"Generic 1234\", biosdetect=auto, translation=auto\n";
		rc << "ata1-master: type=disk, path=" << repr(fs.relpath(DISK_FILENAME, fs.headof(kernelShadowFilename)))
			<< ", mode=flat, cylinders=0, heads=0, spt=0, model=\"Generic 1234\", biosdetect=auto, translation=auto\n";
		rc << "cpuid: level=6, stepping=3, model=3, family=6, vendor_string=\"GenuineIntel\", brand_string=\"BOCHS         Intel(R) Pentium(R) 4 CPU        \"\n";
		rc << "cpu: count="
			<< options.get(opt.SMP, "1") /* Always default to 1, since bochs doesn't normally support this (you need to create your own custom build for SMP support) */
			<< ", ips=4000000, model=bx_generic, reset_on_triple_fault=";
		rc << (opt.getBool(options, opt.HOSTED, true) ? "0" : "1");
		rc << ", cpuid_limit_winnt=0, ignore_bad_msrs=1, mwait_is_nop=0\n";
		rc << "cpuid: mmx=1, apic=xapic, simd=sse2, sse4a=0, misaligned_sse=0, sep=1, movbe=0, adx=0\n";
		rc << "cpuid: aes=0, sha=0, xsave=0, xsaveopt=0";
		if (TARGET_ARCH == "x86_64")
			rc << ", x86_64=1, 1g_pages=0, pcid=0, fsgsbase=0";
		rc << "\n";
		rc << "vga: extension=vbe, update_freq=30, realtime=1\n";
		rc << "port_e9_hack: enabled=1\n";
		rc << "clock: sync=none\n";
//		rc << "debug: action=report\n";
		local gdbMode = options.get(opt.GDB);
		if (gdbMode !is none) {
			if (gdbMode == "emulator") {
				rc << "gdbstub: enabled=1, port="
					<< options.get(opt.GDB_PORT, "1234")
					<< ", text_base="
					<< options.get("bochs.gdb.text_base", "0")
					<< ", data_base="
					<< options.get("bochs.gdb.data_base", "0")
					<< ", bss_base="
					<< options.get("bochs.gdb.bss_base", "0")
					<< "\n";
			} else {
				throw Error("bochs only supports --gdb=emulator mode");
			}
		}

//		rc << "load32bitOSImage: os=nullkernel, path=" << repr(kernelShadowFilename) << ", iolog=, initrd=\n";
//		rc << "plugin_ctrl: unmapped=1, biosdev=1, speaker=1, extfpuirq=1, parallel=1, serial=1, gameport=1\n";
//		rc << "config_interface: win32config\n";
//		rc << "display_library: win32, options=\"gui_debug\"\n";
//		rc << "memory: host=256, guest=256\n";
//		rc << "boot: floppy\n";
//		rc << "floppy_bootsig_check: disabled=0\n";
//		rc << "ata0: enabled=1, ioaddr1=0x1f0, ioaddr2=0x3f0, irq=14\n";
//		rc << "ata0-slave: type=none\n";
//		rc << "ata1: enabled=1, ioaddr1=0x170, ioaddr2=0x370, irq=15\n";
//		rc << "ata1-master: type=none\n";
//		rc << "ata1-slave: type=none\n";
//		rc << "ata2: enabled=0\n";
//		rc << "ata3: enabled=0\n";
//		rc << "pci: enabled=1, chipset=i440fx\n";
//		rc << "vga: extension=vbe, update_freq=5, realtime=1\n";
//		rc << "#cpuid: smep=0, smap=0, mwait=1, vmx=1\n";
//		rc << "print_timestamps: enabled=0\n";
//		rc << "private_colormap: enabled=1\n";
//		rc << "clock: sync=none, time0=local, rtc_sync=0\n";
//		rc << "log: -\n";
//		rc << "logprefix: %t%e%d\n";
//		rc << "debug: action=ignore\n";
//		rc << "info: action=report\n";
//		rc << "error: action=report\n";
//		rc << "panic: action=ask\n";
//		rc << "keyboard: type=mf, serial_delay=250, paste_delay=100000, user_shortcut=none\n";
//		rc << "mouse: type=ps2, enabled=0, toggle=ctrl+mbutton\n";
//		rc << "sound: waveoutdrv=win, waveout=none, waveindrv=win, wavein=none, midioutdrv=win, midiout=none\n";
//		rc << "speaker: enabled=1, mode=sound\n";
//		rc << "parport1: enabled=1, file=none\n";
//		rc << "parport2: enabled=0\n";
//		rc << "com1: enabled=1, mode=null\n";
//		rc << "com2: enabled=0\n";
//		rc << "com3: enabled=0\n";
//		rc << "com4: enabled=0\n";
	}
	bochs_arguments.extend({ "-q", "-f", fs.tailof(bxrcFilename) });
	print "Bochs arguments", repr(bochs_arguments);
	bochs = fs.abspath(bochs);
	local proc = ipc.Process(bochs, bochs_arguments);
	local r, w = ipc.Pipe.new()...;
	proc.stdout = w;
	proc.stderr = w;
	local ocwd = fs.getcwd();
	fs.chdir(fs.headof(kernelShadowFilename));
	proc.start();
	try {
		fs.chdir(ocwd);
		w.close();
		magic.onEmulatorStarted();
		common.processKosDebugOutput(
			r: r,
			groups: groups,
			config: config,
			options: options);
		joinProcess(proc);
	} @[interrupt] catch (e...) {
		proc.terminate();
		throw;
	}
}



