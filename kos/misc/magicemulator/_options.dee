/* Copyright (c) 2019-2021 Griefer@Work                                       *
 *                                                                            *
 * This software is provided 'as-is', without any express or implied          *
 * warranty. In no event will the authors be held liable for any damages      *
 * arising from the use of this software.                                     *
 *                                                                            *
 * Permission is granted to anyone to use this software for any purpose,      *
 * including commercial applications, and to alter it and redistribute it     *
 * freely, subject to the following restrictions:                             *
 *                                                                            *
 * 1. The origin of this software must not be misrepresented; you must not    *
 *    claim that you wrote the original software. If you use this software    *
 *    in a product, an acknowledgement (see the following) in the product     *
 *    documentation is required:                                              *
 *    Portions Copyright (c) 2019-2021 Griefer@Work                           *
 * 2. Altered source versions must be plainly marked as such, and must not be *
 *    misrepresented as being the original software.                          *
 * 3. This notice may not be removed or altered from any source distribution. *
 */

import * from deemon;

/* Emulator-independent configuration options. */

@@Enable the use of `gdb` to control and debug KOS.
@@This can be done in 0, 1, or 2 ways, depending on the emulator used:
@@       emulator                server
@@qemu:  -s -S                   <modgdbserver>
@@bochs: gdbstub: enabled=1      -
@@vbox:  -                       -
@@In all cases, GDB should connect to `localhost:<GDB_PORT>`,
@@where `<GDB_PORT>` defaults to `1234`
final global GDB = "gdb"; /* "emulator" or "server" */

@@The port under which the GDB stub should listen
final global GDB_PORT = "gdb.port"; /* "1234" */

@@Prevent reboot on tripple fault (instead, pause the emulation)
@@qemu:  -no-reboot -no-shutdown
@@bochs: cpu: ... reset_on_triple_fault=0
@@vbox:  <TripleFaultReset enabled="false"/>
final global HOSTED = "hosted"; /* "true" */

@@Kernel command line (passed with multiboot)
final global CMDLINE = "cmdline"; /* "" */

@@How many cores to emulate in an SMP system
final global SMP = "smp"; /* SMP_DEFAULT */

@@The default value of @SMP
@@NOTE: In situations where this value is never accepted, @SMP
@@      will   instead   default  to   some   accepted  value.
final global SMP_DEFAULT = "2";


function getBool(options: {string: string}, name: string, defl: bool): bool {
	local val = options.get(name);
	if (val is none)
		return defl;
	if (val !in ["true", "false"])
		throw Error("Bad value for --emulator-setopt={}={} "
		            "(must be \"true\" or \"false\")"
			.format({ name, val }));
	return val == "true";
}

function getInt(options: {string: string}, name: string, defl: int): int {
	local val = options.get(name);
	if (val is none)
		return defl;
	return int(val);
}
