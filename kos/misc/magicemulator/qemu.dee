/* Copyright (c) 2019-2020 Griefer@Work                                       *
 *                                                                            *
 * This software is provided 'as-is', without any express or implied          *
 * warranty. In no event will the authors be held liable for any damages      *
 * arising from the use of this software.                                     *
 *                                                                            *
 * Permission is granted to anyone to use this software for any purpose,      *
 * including commercial applications, and to alter it and redistribute it     *
 * freely, subject to the following restrictions:                             *
 *                                                                            *
 * 1. The origin of this software must not be misrepresented; you must not    *
 *    claim that you wrote the original software. If you use this software    *
 *    in a product, an acknowledgement (see the following) in the product     *
 *    documentation is required:                                              *
 *    Portions Copyright (c) 2019-2020 Griefer@Work                           *
 * 2. Altered source versions must be plainly marked as such, and must not be *
 *    misrepresented as being the original software.                          *
 * 3. This notice may not be removed or altered from any source distribution. *
 */
#ifdef __WINDOWS__
#define HOST_EXE(x)  x ".exe"
#else
#define HOST_EXE(x)  x
#endif


import * from deemon;
import * from ..libmagic.libmagic;
import opt = ._options;
import fs;
import ipc;
import net;
import ._common as common;

function enumerateQEmuInstallationLocations(): {string...} {
#ifdef __WINDOWS__
	yield "D:\\qemu";
	yield "D:\\apps\\qemu";
#endif
	yield fs.environ["PATH"].split(fs.DELIM)...;
}

function qemuMonitorBackend(addr: string, monitorPipe: File) {
	local s = net.socket("INET", none, none);
	for (local i: [5000]) {
		try {
			s.connect(addr);
			break;
		} catch (e...) {
			if (i == 4999) {
				print Traceback.current;
				print repr e;
			}
		}
		Thread.sleep(milliseconds from time(1));
	}
	Thread([]{
		local isFirst = true;
		final local prefix = "monitor>: ";
		for (;;) {
			local text = s.recv();
			if (isFirst) {
				text = prefix + text;
				isFirst = false;
			}
			text = text.replace("\n", "\n" + prefix);
			File.stdout << text;
			File.stdout.sync();
		}
	}).start();
	local isFirst = true;
	final local prefix = "monitor<: ";
	for (;;) {
		local text = monitorPipe.read();
		s.send(text);
		if (isFirst) {
			text = prefix + text;
			isFirst = false;
		}
		text = text.replace("\n", "\n" + prefix);
		File.stdout << text;
		File.stdout.sync();
	}
}


function start(
		groups: {Group...},
		config: Config,
		BINPATH: string,
		KERNEL: string,
		DRIVERS: {(string, string)...},
		TARGET_ARCH: string,
		TARGET: Module,
		DISK_FILENAME: string,
		options: {string: Object},
		magic: Module) {
	local qemu = options.get(opt.EXE)
#ifdef __WINDOWS__
		.replace("\\","/")
#endif
		;
	if (qemu is none) {
		qemu = "qemu-system-" + TARGET_ARCH
#ifdef __WINDOWS__
			+ ".exe"
#endif
		;
	}
	if ("/" !in qemu) {
		for (local x: enumerateQEmuInstallationLocations()) {
			local fullPath = fs.joinpath(x,qemu);
			if (fs.stat.isreg(fullPath)) {
				qemu = fullPath;
				goto got_exe;
			}
		}
		print "Failed to locate:", repr qemu;
		throw Error("Cannot locate qemu binary");
	}
got_exe:
	local qemu_arguments = [];
	qemu_arguments.extend({ "-serial", "stdio" });
	if (options.get(opt.HOSTED, true))
		qemu_arguments.extend({ "-no-reboot", "-no-shutdown" });
	local gdb_mode = options.get(opt.GDB);
	local boot_drivers = List(DRIVERS);
	if (gdb_mode !is none) {
		if (gdb_mode == "server") {
			/* Make use of out GDB server driver */
			boot_drivers.append((
				BINPATH + "/os/drivers/gdbserver",
				"transport=serial:0x2f8:0xf3"
			));
			qemu_arguments.extend({ "-serial", "tcp::1234,server" });
		} else if (gdb_mode == "emulator") {
			/* Use qemu's builtin GDB support */
			/* Make use of out GDB-stub driver */
			qemu_arguments.extend({ "-s", "-S" });
		} else {
			throw Error("Invalid GDB mode: " + repr gdb_mode);
		}
	}
	if (TARGET_ARCH == "x86_64") {
		/* Must create+use a custom kernel binary with e_machine = EM_386 */
		local kernel386 = "{}.em386-{}".format({
			fs.headof(KERNEL),
			fs.tailof(KERNEL),
		});
		local x32modified = getLastModfiedTime(kernel386);
		if (x32modified !is none) {
			local x64modified = getLastModfiedTime(KERNEL);
			if (x64modified !is none && x64modified <= x32modified)
				goto did_update_x86_64_kernel;
			try fs.unlink(kernel386); catch (...);
		}
		print "[qemu] Updating kernel shadow", repr kernel386;
		fs.copyfile(KERNEL, kernel386);
		with (local fp = File.open(kernel386, "rb+,nobuf")) {
			fp.seek(18); /* __OFFSET_ELF64_EHDR_MACHINE */
			fp.write((3).tobytes(2, "little", false)); /* EM_386 */
		}
did_update_x86_64_kernel:
		KERNEL = kernel386;
	}
	if (boot_drivers) {
		qemu_arguments.append("-initrd");
		qemu_arguments.append(",".join(
			for (local name, cmdline: boot_drivers)
				!cmdline
					? name.replace(",", ",,")
					: "{} {}".format({
						name.replace(",", ",,"),
						cmdline.replace(",", ",,")
					})
		));
	}
	try {
		final local trace_filename = "qemu-events";
		local trace_file = File.open(trace_filename, "r");
		for (local l: trace_file) {
			l = l.strip();
			if (l.startswith("#") || !l)
				continue;
			/* Non-empty trace file */
			qemu_arguments.extend({
				"-trace",
				"events=" + trace_filename
			});
			break;
		}
	} catch (...) {
	}
	qemu_arguments.extend({
//		"-accel", "hax",
		"-kernel", KERNEL,
//		"-initrd", "bin/i386-kos/drivers/ext2fs e f g h",
		"-drive", "file=" + DISK_FILENAME + ",format=raw,index=0,media=disk",
#if 0
		"-drive", "file=bin/Postal2.iso,format=raw,index=1,media=disk",
		"-drive", "file=bin/ext2.img,format=raw,index=2,media=disk",
#endif
		"-smp", "2",
		"-display", "gtk",
		"-device", "isa-debug-exit,iobase=0xf4,iosize=0x04",
//		"-d", "int",

//		"-netdev", "user,id=n1", "-device", "rtl8139,netdev=n1",
		"-netdev", "user,id=n1", "-device", "ne2k_pci,netdev=n1",
		"-object", "filter-dump,id=f1,netdev=n1,file=qemu-netdump.dat",
		"-vga", "std",
	});
	if (fs.stat.exists("bin/ext2.img")) {
		qemu_arguments.extend({
			"-blockdev", "driver=file,node-name=usb1,filename=bin/ext2.img",
			"-device", "pci-ohci,id=ohci",
			"-device", "vt82c686b-usb-uhci,id=uhci",
			"-device", "usb-storage,bus=uhci.0,drive=usb1",
			"-device", "usb-mouse,bus=ohci.0",
//			"-device", "usb-kbd,bus=uhci.0",
		});
	}
	local enableMonitorCommands = false;
	local monitorCommandPipe = none;
	if (enableMonitorCommands) {
		final local port = "1235";
		qemu_arguments.extend({ "-monitor", "tcp::" + port + ",server" });
		local r;
		r, monitorCommandPipe = ipc.Pipe.new()...;
		enableMonitorCommands = Thread(qemuMonitorBackend, ("localhost:" + port, r));
	}
	local cmdline = options.get(opt.CMDLINE);
	if (cmdline) {
		print "QEMU_CMDLINE",repr(cmdline);
		qemu_arguments.append("-append");
		qemu_arguments.append(cmdline);
	}
	local proc = ipc.Process(qemu, qemu_arguments);
	local r, w = ipc.Pipe.new()...;
	proc.stdout = w;
	proc.stderr = w;
	proc.start();
	if (enableMonitorCommands is Thread)
		enableMonitorCommands.start();
	try {
		w.close();
		common.processKosDebugOutput(
			r: r,
			groups: groups,
			config: config,
			monitorCommandPipe: monitorCommandPipe);
		joinProcess(proc);
	} @[interrupt] catch (e...) {
		proc.terminate();
		throw;
	}
}



























