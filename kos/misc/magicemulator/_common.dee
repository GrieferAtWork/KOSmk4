/* Copyright (c) 2019-2022 Griefer@Work                                       *
 *                                                                            *
 * This software is provided 'as-is', without any express or implied          *
 * warranty. In no event will the authors be held liable for any damages      *
 * arising from the use of this software.                                     *
 *                                                                            *
 * Permission is granted to anyone to use this software for any purpose,      *
 * including commercial applications, and to alter it and redistribute it     *
 * freely, subject to the following restrictions:                             *
 *                                                                            *
 * 1. The origin of this software must not be misrepresented; you must not    *
 *    claim that you wrote the original software. If you use this software    *
 *    in a product, an acknowledgement (see the following) in the product     *
 *    documentation is required:                                              *
 *    Portions Copyright (c) 2019-2022 Griefer@Work                           *
 * 2. Altered source versions must be plainly marked as such, and must not be *
 *    misrepresented as being the original software.                          *
 * 3. This notice may not be removed or altered from any source distribution. *
 */
#ifdef __WINDOWS__
#define HOST_EXE(x)  x ".exe"
#else
#define HOST_EXE(x)  x
#endif


import * from deemon;
import * from errors;
import * from ..libmagic.libmagic;
import * from ..libmagic.steps.mtools;
import opt = ._options;
import fs;
import ipc;
import net;

global writeStdout: Callable;

@@Search for an executable @name in @path, returning
@@its  absolute  path  if  found,  or  @none  other.
function findExecutableInPath(path: string, name: string): string | none {
	local filename = fs.joinpath(path, name);
	if (fs.stat.exists(filename))
		return filename;
#ifdef __WINDOWS__
	{
		local exeFilename = filename + ".exe";
		if (fs.stat.exists(exeFilename))
			return exeFilename;
	}
	/* Resolve batch-file forwarders:
	 * >> @echo off
	 * >> "D:\Path\To\Executable.exe" %*
	 */
	for (local ext: [".cmd", ".bat"]) {
		local fullFilename = filename + ext;
		local fp;
		try {
			fp = File.open(fullFilename, "r");
		} catch (...) {
			continue;
		}
		local res = none;
		with (fp) {
			for (local l: fp) {
				l = l.strip().lstrip("@").lstrip();
				if (l.startswith("echo"))
					continue;
				if (l.endswith("%*")) {
					if (res !is none)
						res = false;
					else {
						l = l[:-2].rstrip();
						if (l.startswith("\"") && l.endswith("\""))
							l = l[1:-1];
						res = l.decode("utf-8", "ignore");
					}
					continue;
				}
				return none;
			}
		}
		if (res is string)
			return res;
	}
#endif /* __WINDOWS__ */
	return none;
}

@@Same as @findExecutableInPath(), but search multiple @paths
function findExecutableInPaths(paths: {string...}, name: string): string | none {
	for (local path: paths) {
		local r = findExecutableInPath(path, name);
		if (r !is none)
			return r;
	}
	return none;
}


function normalizeFilenameForLog(filename: string | Bytes): string {
	if (filename !is string)
		filename = filename.decode("utf-8", "ignore");
#ifdef __WINDOWS__
	filename = fs.abspath(normalizePath(filename, false), ROOTDIR)
		.replace("/", "\\");
	if (filename && filename.islower(0)) {
		local drive_pos = filename.find(":");
		if (drive_pos >= 0) {
			filename =
				filename[:drive_pos].upper() +
				filename[drive_pos:];
		}
	}
	return filename;
#else
	return fs.abspath(normalizePath(filename, false), ROOTDIR);
#endif
}

class Addr2line {

	private final member proc: ipc.Process;
	private final member reader: File;
	private final member writer: File;

	this(config: Config, hostFile: string) {
		proc = ipc.Process(
			HOST_EXE(config.CROSS_PREFIX + "addr2line"),
			{ "-ife", hostFile });
		local proc_stdin, proc_stdout;
		/* Create pipes for communicating with addr2line */
		proc_stdin, writer = ipc.Pipe.new()...;
		reader, proc_stdout = ipc.Pipe.new()...;
		reader = File.Buffer(reader, "ro,c,none"); /* line-buffered */
		proc.stdin = proc_stdin;
		proc.stdout = proc_stdout;
		proc.start();
		proc_stdin.close();
		proc_stdout.close();
	}

	@@Convert a given address to a (filename, line, function) triple
	function addr2line(addr: int | string): {(string, string, string)...} {
		writer.write("{}\n".format({
			addr is string
				? addr
				: addr.hex()
		}));
		local text = reader.read();
		while (text) {
			local func,data;
			func, none, text = text.partition("\n")...;
			data, none, text = text.partition("\n")...;
			local filename, line = data.scanf("%[^:]:%[A-Fa-f0-9]")...;
			filename = filename.strip();
			line = line.strip();
			filename = normalizeFilenameForLog(filename);
			yield (filename, line, func.strip());
		}
	}
	function close() {
		try writer.close(); catch (...);
		try reader.close(); catch (...);
		try proc.terminate(); catch (...);
	}
	~this() {
		close();
	}
}

function printFormattedAddr2line(
		format: string,
		file: string, line: string,
		func: string, addr: string) {
	for (local i = 0; i < #format; ++i) {
		local ch = format[i];
		if (ch != "%" || i == #format-1)
			writeStdout(ch);
		else {
			++i;
			ch = format[i];
			if (ch == "f") {
				writeStdout(file);
			} else if (ch == "l") {
				writeStdout(str line);
			} else if (ch == "c") {
				writeStdout("0");
			} else if (ch == "n") {
				writeStdout(func);
			} else if (ch == "<") {
				writeStdout("0");
			} else if (ch == ">") {
				writeStdout("0");
			} else if (ch == "p") {
				writeStdout(addr.upper().lsstrip("0X"));
			} else {
				writeStdout("%" + ch);
			}
		}
	}
}

#define FINAL_FORMAT_RAW_DATA(x)  x


class TraceController {
	member m_name: string;
	member m_addresses: {int...} = HashSet();
	member m_addresses_stack: {{int...}...} = [];
	this(name: string)
		: m_name(name)
	{}

	function err(message: string) {
		writeStdout("{ERROR:trace(");
		writeStdout(repr(m_name));
		writeStdout("): ");
		writeStdout(message);
		writeStdout("}\n");
	}

	function printDiff(addrFormat: string, oldSet: {int...}) {
			local added = HashSet(), removed = HashSet();
			for (local x: oldSet) {
				if (x !in m_addresses)
					removed.insert(x);
			}
			for (local x: m_addresses) {
				if (x !in oldSet)
					added.insert(x);
			}
			if (added || removed) {
				err("Missmatched address sets");
				for (local x: added)
					err("Leaked {}".format({ addrFormat % x }));
				for (local x: removed)
					err("Freed {}".format({ addrFormat % x }));
			}
	}

	function doMethod(method: string, argument: string) {
		switch (method) {

		case "alloc":
		case "free": {
			local minaddr, maxaddr;
			if (":" in argument) {
				minaddr, none, maxaddr = argument.partition(":")...;
				minaddr = int(minaddr);
				maxaddr = int(maxaddr);
			} else {
				minaddr = int(argument);
				maxaddr = minaddr;
			}
			if (method == "alloc") {
				for (local x: [minaddr:maxaddr + 1]) {
					if (x in m_addresses)
						err("Duplicate allocation for " + repr(x));
					m_addresses.insert(x);
				}
			} else {
				for (local x: [minaddr:maxaddr + 1])
					m_addresses.remove(x);
			}
		}	break;

		case "push":
			m_addresses_stack.append(copy m_addresses);
			break;

		case "diff":
			if (!m_addresses_stack) {
				err("Stack is empty");
				break;
			}
			if (!argument)
				argument = "%.13I64X000";
			printDiff(argument, m_addresses_stack.back);
			break;

		case "pop": {
			if (!m_addresses_stack) {
				err("Stack is empty");
				break;
			}
			local o = m_addresses_stack.popback();
			if (!argument)
				argument = "%.13I64X000";
			printDiff(argument, o);
			m_addresses = o;
		}	break;

		default:
			err("Unknown trace method " + repr(method));
			break;
		}
	}
}



@@While it is impossible to get rid of the `cmd:' prefix on anything
@@that we write to stdout ourself,  it _is_ possible to hi-jack  the
@@stdout output stream of GDB:
@@>> // NOTE: `hGDB' needs permissions:
@@>> //   - PROCESS_QUERY_LIMITED_INFORMATION (identification)
@@>> //   - PROCESS_DUP_HANDLE                (DuplicateHandle())
@@>> //   - PROCESS_VM_READ                   (Read out the PEB)
@@>> hGDB = FileProcessByName("gdb.exe");
@@>> // ADDRESS_OF_PEB can be determined programmatically!
@@>> // ProcessHacker has an option for this
@@>> PEB = ProcessReadMemory(hGDB, <ADDRESS_OF_PEB>);
@@>> hRemoteHandle = PEB.<STD_OUTPUT_HANDLE>;
@@>> hGDBStdout = DuplicateHandle(hGDB, hRemoteHandle, GetCurrentProcess());
@@>> // NOTE: It is important that the data buffer of this write isn't
@@>> //       too large, since Windows might otherwise decide to only write
@@>> //       a portion of it (causing any future data that the real GDB might
@@>> //       try to write to end up inside of the message string we're trying
@@>> //       to output to Visual Studio)
@@>> //       That's fine however, since the messages written as ~"..." have
@@>> //       their own buffer, and are re-assembled by Visual Studio as they
@@>> //       are written by GDB. Furthermore, GDB doesn't make much use of
@@>> //       the ~-stream (except for the initial greeting after startup)
@@>> //       As such, we're pretty safe in using it for our own purposes!
@@>> WriteFile(hGDBStdout, "~{!r}\n".format({
@@>>     "Hello World (from " + GetCurrentProcessId() + ")\n"
@@>> }));
@@>> CloseHandle(hGDB);
@@Output written with this method will appear unfiltered in the Output window
@@in such a way that click-to-go-to-source is possible!
@@NOTE: I've  also tested what  happens when GDB exits  while we still have
@@      a handle to its standard output  handle. - It behaves normally,  in
@@      that Visual Studio appears to wait for GDB to terminate, and simply
@@      ignores anyone else still having an open handle to GDB's old stdout
@@      As a matter of  fact, Visual Studio uses  a Pipe for capturing  the
@@      output from GDB, and that pipe is closed once Visual Studio  closes
@@      its  reader-end of said  pipe (causing us  attempting to write more
@@      data in WriteFile() throwing an exception!)
function reOpenProcessStdoutAndWrapAsGdbMIMessageStream(processName: string): Callable | none {
	local _reopenhandle, win32, hGDB;
	try {
		_reopenhandle = import("._reopenhandle");
		win32 = import("win32");
		hGDB = _reopenhandle.FindProcessByImageName(processName);
	} catch (...) {
		return none;
	}
	/* XXX: Verify that `hGDB' is the correct instance of GDB? */
	try {
		local hGDBStdout = _reopenhandle.GetProcessStdHandles(hGDB)[1];
		local hMyGDBStdout = win32.DuplicateHandle(
			hGDB, hGDBStdout, win32.GetCurrentProcess());
		try {
			/* Overwrite the write-to-stdout callback to
			 * instead perform writes to `hMyGDBStdout'! */
			local write2gdb = File.System(hMyGDBStdout, inherit: true).write;
			return (data: string | Bytes) -> {
				local final MAX_PACKET_SIZE = 512;
#if 1 /* Technically, this is incorrect. GDB documents that the  ~-stream
       * should be used for "[...] the textual responses to CLI commands"
       * https://sourceware.org/gdb/onlinedocs/gdb/GDB_002fMI-Stream-Records.html
       * And  that  the @-stream  should  be used  for  what we're  doing,  as it
       * contains             "[...] any textual output from the running target".
       * However,  Visual   Studio  doesn't   understand/support  the   @-stream,
       * though  it does understand  (and accept at any  point in time), messages
       * received  via  the  ~-stream  (which  it  displays  without  any further
       * processing  of  the output,  and  is exactly  what  we want  to achieve) */
				local final FORMAT = "~{!r}\n";
#else
				local final FORMAT = "@{!r}\n";
#endif
				if (data !is string) {
					if (data is Bytes)
						data = data.decode("utf-8", "ignore");
					else {
						data = str(data);
					}
				}
				while (#data > MAX_PACKET_SIZE) {
					write2gdb(FORMAT.format({ data[:MAX_PACKET_SIZE] }));
					data = data[MAX_PACKET_SIZE:];
				}
				write2gdb(FORMAT.format({ data }));
			};
		} catch (...) {
			win32.CloseHandle(hMyGDBStdout);
			throw;
		}
	} finally {
		win32.CloseHandle(hGDB);
	}
}

function processKosDebugOutput(
		r: File,
		groups: {Group...},
		config: Config,
		monitorCommandPipe: File | none = none,
		options: {string: string} | none = none) {
	writeStdout = File.stddbg.write;
	local processName = options.get("redirect.stdout");
	if (processName !is none) {
		/* Setup the writeStdout function to re-direct itself to inject
		 * its output into gdb.exe:stdout,  such that all future  calls
		 * are simply forwarded to that handle. */
		writeStdout = (data) -> {
			/* Capture the stdout of `processName' to inject our output into it. */
			writeStdout = reOpenProcessStdoutAndWrapAsGdbMIMessageStream(processName);
			if (writeStdout is none) {
				print File.stderr: (
					"[redirect.stdout] Failed to hi-jack stdout of process ",
					repr(processName));
				writeStdout = File.stddbg.write;
			}
			writeStdout(data);
		};
	}
#undef CONFIG_POSTPROCESS_QEMU_SERIAL_OUTPUT
#define CONFIG_POSTPROCESS_QEMU_SERIAL_OUTPUT 1
#ifndef CONFIG_POSTPROCESS_QEMU_SERIAL_OUTPUT
	while (local text = r.read(1)) {
		writeStdout(text);
	}
#else /* !CONFIG_POSTPROCESS_QEMU_SERIAL_OUTPUT */
	final local MAX_COMMAND_LENGTH = 512;
	local running_addr2line: {string: Addr2line} = Dict();
	local stored_data = Cell();
	function writeData(data: Bytes) {
		data = data.replace("\030", "");
		if (stored_data) {
			data = stored_data.value + data;
			del stored_data.value;
		}
		local flushStart = 0;
		local i = 0;
		for (;;) {
			local pos = data.find(") :", i);
			if (pos < 0) {
				pos = data.find("):", i);
				if (pos < 0)
					break;
			}
			local lineStart = data.rfind("\n", flushStart, pos);
			if (lineStart >= 0) {
				++lineStart;
do_format_line:
				local line = data[lineStart:pos];
				if (line.isanyspace() || "(" !in line) {
					i = pos + 3;
					continue;
				}
				/* Clickable line directive (must normalize the path) */
				writeStdout(FINAL_FORMAT_RAW_DATA(data[flushStart:lineStart]));
				local filename, none, line = line.partition("(")...;
				filename = normalizeFilenameForLog(filename);
				writeStdout(filename);
				writeStdout("(");
				writeStdout(line);
				flushStart = pos;
			} else if (flushStart == 0) {
				lineStart = 0;
				goto do_format_line;
			}
			i = pos + 3;
		}
		local lineEnd = data.rfind("\n", flushStart);
		local savedData;
		if (lineEnd < 0) {
			savedData = data[flushStart:];
		} else {
			++lineEnd;
			writeStdout(FINAL_FORMAT_RAW_DATA(data[flushStart:lineEnd]));
			savedData = data[lineEnd:];
		}
		if (savedData)
			stored_data.value = savedData;
	}
	local tracedControllers: {string: TraceController} = Dict();
	while (local text = r.read()) {
		local flushStart = 0;
		local len = #text;
		for (;;) {
			local i = text.find("%", flushStart);
			if (i < 0)
				break;
			writeData(text[flushStart:i]);
			++i;
			flushStart = i;
			if (i >= len) {
				flushStart = i = 0;
				text = r.read();
				if (!text) {
					writeData("%");
					goto done_join;
				}
				len = #text;
			}
			if (text.substr(i, i + 1) != "{") {
				writeData("%");
				continue;
			} else {
				++i;
				if (i >= len) {
					flushStart = i = 0;
					text = r.read();
					if (!text) {
						writeData("%{");
						goto done_join;
					}
					len = #text;
				}
again_find_match:
				local end = text.findmatch("{", "}", i, i + MAX_COMMAND_LENGTH);
				if (end < 0)
					end = text.find("\030", i, i + MAX_COMMAND_LENGTH);
				if (end < 0) {
					if (len >= i + MAX_COMMAND_LENGTH) {
						flushStart = i - 2;
						goto do_flush_text;
					}
					local temp = r.read();
					if (!temp) {
						flushStart = i - 2;
						goto do_flush_text;
					}
					text = text + temp;
					len = #text;
					goto again_find_match;
				}
				local command = text[i:end];
				local argument = "";
				if (":" in command)
					command, none, argument = command.partition(":")...;
				switch (command.strip()) {

				case "monitor":
					monitorCommandPipe.write(argument);
					break;

				case "trace": {
					local method, name, extargs;
					method, none, extargs = argument.partition(":")...;
					if (":" in extargs) {
						name, none, extargs = extargs.partition(":")...;
					} else {
						name = extargs;
						extargs = "";
					}
					name = string(name);
					local obj = tracedControllers.get(name);
					if (obj is none)
						tracedControllers[name] = obj = TraceController(name);
					try {
						obj.doMethod(method, extargs);
					} catch (...) {
						print("While executing: ", repr(method), " with ", repr(argument));
						throw;
					}
				}	break;

				case "artifact": {
					local outfile, filesize = argument.scanf("%[^:]:%[^:]")...;
					filesize = int(filesize);
					with (local fp = File.open(outfile, "w")) {
						local temp = text[end + 1:];
						local written = #temp;
						if (written >= filesize) {
							fp.write(temp[:filesize]);
							flushStart = i = end + 1 + filesize;
						} else {
							fp.write(temp);
							flushStart = i = len;
						}
						while (filesize > written) {
							temp = r.read(filesize - written);
							fp.write(temp);
							written += #temp;
						}
					}
				}	break;

				case "vinfo": {
					local binary, address, req_address;
					binary, address, req_address, argument =
						argument.scanf("%[^:]:%[^:]:%[^:]:%[^]")...;
					binary = binary.replace("\\", "/").lstrip("/");
					local a2l = running_addr2line.get(binary);
					if (a2l is none) {
						local host_binary = findDiskFileOrigin(groups, binary);
						a2l = host_binary is none ? none : Addr2line(config, host_binary);
						running_addr2line[binary] = a2l;
					}
					local is_first = true;
					for (local file, line, func: a2l.addr2line(address)) {
						if (!is_first)
							writeData("\n");
						is_first = false;
						printFormattedAddr2line(
							format: argument,
							file: file,
							line: line,
							func: func,
							addr: req_address);
					}
					if (is_first) {
						printFormattedAddr2line(
							format: argument,
							file: "??" "?",
							line: 0,
							func: "??" "?",
							addr: req_address);
						writeData(" (a2l:{!r}:{!r}:{})".format({
							findDiskFileOrigin(groups, binary),
							binary,
							address
						}));
					}
				}	break;

				case "vload":
					argument = argument.replace("\\", "/").lstrip("/");
					if (argument !in running_addr2line) {
						local host_binary = findDiskFileOrigin(groups, argument);
						local a2l = host_binary is none ? none : Addr2line(config, host_binary);
						running_addr2line[argument] = a2l;
					}
					break;

				default:
					flushStart = i - 2;
					goto do_flush_text;
				}
				flushStart = i = end + 1;
			}
		}
do_flush_text:
		writeData(text[flushStart:]);
	}
done_join:
	if (stored_data)
		writeStdout(FINAL_FORMAT_RAW_DATA(stored_data.value));
	for (local none, x: running_addr2line)
		x.close();
#endif /* CONFIG_POSTPROCESS_QEMU_SERIAL_OUTPUT */
}
