/* Copyright (c) 2019-2025 Griefer@Work                                       *
 *                                                                            *
 * This software is provided 'as-is', without any express or implied          *
 * warranty. In no event will the authors be held liable for any damages      *
 * arising from the use of this software.                                     *
 *                                                                            *
 * Permission is granted to anyone to use this software for any purpose,      *
 * including commercial applications, and to alter it and redistribute it     *
 * freely, subject to the following restrictions:                             *
 *                                                                            *
 * 1. The origin of this software must not be misrepresented; you must not    *
 *    claim that you wrote the original software. If you use this software    *
 *    in a product, an acknowledgement (see the following) in the product     *
 *    documentation is required:                                              *
 *    Portions Copyright (c) 2019-2025 Griefer@Work                           *
 * 2. Altered source versions must be plainly marked as such, and must not be *
 *    misrepresented as being the original software.                          *
 * 3. This notice may not be removed or altered from any source distribution. *
 */
#ifndef GUARD_LIBDL_LIBDL_CTEST
#define GUARD_LIBDL_LIBDL_CTEST 1
#define _KOS_SOURCE 1
#define _GNU_SOURCE 1
#undef NDEBUG

#include <hybrid/compiler.h>

#include <kos/except.h>
#include <kos/exec/elf.h>
#include <kos/types.h>
#include <system-test/ctest.h>

#include <assert.h>
#include <dlfcn.h>
#include <elf.h>
#include <stddef.h>
#include <string.h>

DECL_BEGIN

DEFINE_TEST(libdl_aux_sections) {
	struct dl_section *sect;
	/* Test auxiliary sections. */
	ISnonnullf((sect = dllocksection(dlopen(NULL, 0), ".elf.ehdr",
	                                 DLLOCKSECTION_FNORMAL)),
	           "%s", dlerror());
	EQ(sizeof(ElfW(Ehdr)), sect->ds_size);
	{
		ElfW(Ehdr) *ehdr;
		ehdr = (ElfW(Ehdr) *)sect->ds_data;
		EQ(ELFMAG0, ehdr->e_ident[EI_MAG0]);
		EQ(ELFMAG1, ehdr->e_ident[EI_MAG1]);
		EQ(ELFMAG2, ehdr->e_ident[EI_MAG2]);
		EQ(ELFMAG3, ehdr->e_ident[EI_MAG3]);
	}
	dlunlocksection(sect);
}

static int my_static = 0;

DEFINE_TEST(libdl_fromaddr) {
	/* Test auxiliary sections. */
	void *raw_dlopen, *mod;
	char const *name;
	/* Don't pass a pointer to `dlopen' because that  address
	 * may (read: is) part of the main programs .plt where it
	 * exists as an indirection to call the real function. */
	ISnonnullf((raw_dlopen = dlsym(RTLD_DEFAULT, "dlopen")), "%s", dlerror());
	ISnonnullf((mod = dlgethandle(raw_dlopen, DLGETHANDLE_FNORMAL)), "%s", dlerror());
	ISnonnullf((name = dlmodulename(mod)), "%s", dlerror());
	EQstrf("libdl.so", basename(name), "name:%q", name);

	/* Test for the primary application. */
	ISnonnullf((mod = dlgethandle(&my_static, DLGETHANDLE_FNORMAL)), "%s", dlerror());
	ISnonnullf(dlopen(NULL, 0), "%s", dlerror());
	EQ(dlopen(NULL, 0), mod);
}


static char const *libdl_symbols[] = {
	"__argc",
	"__argv",
	"__environ",
	"__peb",
	"__progname",
	"__progname_full",
	"__tls_get_addr",
	"_environ",
	"_pgmptr",
	"dl_iterate_phdr",
	"dladdr",
	"dlauxctrl",
	"dlclearcaches",
	"dlclose",
	"dlerror",
	"dlexceptaware",
	"dlfopen",
	"dlgethandle",
	"dlgetmodule",
	"dlinflatesection",
	"dllocksection",
	"dlmodulebase",
	"dlmodulefd",
	"dlmodulename",
	"dlopen",
	"dlsectionindex",
	"dlsectionmodule",
	"dlsectionname",
	"dlsym",
	"dltlsaddr",
	"dltlsaddr2",
	"dltlsalloc",
	"dltlsallocseg",
	"dltlsfree",
	"dltlsfreeseg",
	"dlunlocksection",
	"environ",
	"program_invocation_name",
	"program_invocation_short_name",
};


DEFINE_TEST(libdl_builtins) {
	/* Test that all advertised libdl builtins can be  loaded.
	 * All symbols are tested (and not just a couple of them),
	 * because some of them have  special code paths used  for
	 * lazy initialization. */
	unsigned int i;
	void *libdl;
	ISnonnullf((libdl = dlgetmodule("dl", DLGETHANDLE_FNORMAL)), "%s", dlerror());
	for (i = 0; i < lengthof(libdl_symbols); ++i) {
		void *sym;
		ISnonnullf((sym = dlsym(libdl, libdl_symbols[i])),
		           "%s:%s", libdl_symbols[i], dlerror());
	}
}

DECL_END

#endif /* !GUARD_LIBDL_LIBDL_CTEST */
