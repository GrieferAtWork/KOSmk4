/* Copyright (c) 2019-2021 Griefer@Work                                       *
 *                                                                            *
 * This software is provided 'as-is', without any express or implied          *
 * warranty. In no event will the authors be held liable for any damages      *
 * arising from the use of this software.                                     *
 *                                                                            *
 * Permission is granted to anyone to use this software for any purpose,      *
 * including commercial applications, and to alter it and redistribute it     *
 * freely, subject to the following restrictions:                             *
 *                                                                            *
 * 1. The origin of this software must not be misrepresented; you must not    *
 *    claim that you wrote the original software. If you use this software    *
 *    in a product, an acknowledgement (see the following) in the product     *
 *    documentation is required:                                              *
 *    Portions Copyright (c) 2019-2021 Griefer@Work                           *
 * 2. Altered source versions must be plainly marked as such, and must not be *
 *    misrepresented as being the original software.                          *
 * 3. This notice may not be removed or altered from any source distribution. *
 */
#ifndef GUARD_LIBDL_LIBDL_CTEST
#define GUARD_LIBDL_LIBDL_CTEST 1
#define _KOS_SOURCE 1
#define _GNU_SOURCE 1
#undef NDEBUG

#include <hybrid/compiler.h>

#include <kos/except.h>
#include <kos/exec/elf.h>
#include <kos/types.h>
#include <system-test/ctest.h>

#include <assert.h>
#include <dlfcn.h>
#include <elf.h>
#include <stddef.h>
#include <string.h>

DECL_BEGIN

DEFINE_TEST(libdl_aux_sections) {
	struct dl_section *sect;
	/* Test auxiliary sections. */
	sect = dllocksection(dlopen(NULL, 0), ".elf.ehdr",
	                     DLLOCKSECTION_FNORMAL);
	assertf(sect, "%s", dlerror());
	EQs(sect->ds_size, sizeof(ElfW(Ehdr)));
	{
		ElfW(Ehdr) *ehdr;
		ehdr = (ElfW(Ehdr) *)sect->ds_data;
		EQu(ehdr->e_ident[EI_MAG0], ELFMAG0);
		EQu(ehdr->e_ident[EI_MAG1], ELFMAG1);
		EQu(ehdr->e_ident[EI_MAG2], ELFMAG2);
		EQu(ehdr->e_ident[EI_MAG3], ELFMAG3);
	}
	dlunlocksection(sect);
}

static int my_static = 0;

DEFINE_TEST(libdl_fromaddr) {
	/* Test auxiliary sections. */
	void *raw_dlopen, *mod;
	char const *name;
	/* Don't pass a pointer to `dlopen' because that  address
	 * may (read: is) part of the main programs .plt where it
	 * exists as an indirection to call the real function. */
	raw_dlopen = dlsym(RTLD_DEFAULT, "dlopen");
	assertf(raw_dlopen, "%s", dlerror());
	mod = dlgethandle(raw_dlopen, DLGETHANDLE_FNORMAL);
	assertf(mod, "%s", dlerror());
	name = dlmodulename(mod);
	assertf(name, "%s", dlerror());
	assertf(strcmp(basename(name), "libdl.so") == 0, "%q", name);

	/* Test for the primary application. */
	mod = dlgethandle(&my_static, DLGETHANDLE_FNORMAL);
	assertf(mod, "%s", dlerror());
	EQp(mod, dlopen(NULL, 0));
}

DECL_END

#endif /* !GUARD_LIBDL_LIBDL_CTEST */
