/* Copyright (c) 2019-2021 Griefer@Work                                       *
 *                                                                            *
 * This software is provided 'as-is', without any express or implied          *
 * warranty. In no event will the authors be held liable for any damages      *
 * arising from the use of this software.                                     *
 *                                                                            *
 * Permission is granted to anyone to use this software for any purpose,      *
 * including commercial applications, and to alter it and redistribute it     *
 * freely, subject to the following restrictions:                             *
 *                                                                            *
 * 1. The origin of this software must not be misrepresented; you must not    *
 *    claim that you wrote the original software. If you use this software    *
 *    in a product, an acknowledgement (see the following) in the product     *
 *    documentation is required:                                              *
 *    Portions Copyright (c) 2019-2021 Griefer@Work                           *
 * 2. Altered source versions must be plainly marked as such, and must not be *
 *    misrepresented as being the original software.                          *
 * 3. This notice may not be removed or altered from any source distribution. *
 */
#ifndef GUARD_LIBICONV_ICONV_CTEST
#define GUARD_LIBICONV_ICONV_CTEST 1
#define _KOS_SOURCE 1
#undef NDEBUG

#include <hybrid/compiler.h>

#include <kos/types.h>
#include <system-test/ctest.h>

#include <assert.h>
#include <dlfcn.h>
#include <format-printer.h>
#include <string.h>

#include <libiconv/iconv.h>


DECL_BEGIN

PRIVATE _LPICONV_TRANSCODE_INIT _iconv_transcode_init = NULL;


DEFINE_TEST(iconv) {
	void *libiconv;
	libiconv = dlopen(LIBICONV_LIBRARY_NAME, RTLD_LOCAL);
	assertf(libiconv, "dlerror(): %s", dlerror());
#define DLSYM(x) (*(void **)&x = dlsym(libiconv, #x), assertf(x, "dlerror(): %s", dlerror()))
	DLSYM(_iconv_transcode_init);
#undef DLSYM
	{
		char buf[512], *ptr = buf;
		struct iconv_transcode tc;
		struct iconv_printer in;
		int error;
		tc.it_encode.ice_output.ii_printer = &format_sprintf_printer;
		tc.it_encode.ice_output.ii_arg     = &ptr;
		tc.it_encode.ice_flags             = ICONV_ERR_ERRNO;
		error = _iconv_transcode_init(&tc, &in, "latin1", "de");
		assert(error == 0);
		format_printf(in.ii_printer, in.ii_arg, "aou: \xE4\xF6\xFC");
		*ptr = 0;
		assertf(strcmp(buf, "aou: \x7b\x7c\x7d") == 0, "buf = %q", buf);
	}

	{
		char buf[512], *ptr = buf;
		struct iconv_transcode tc;
		struct iconv_printer in;
		int error;
		tc.it_encode.ice_output.ii_printer = &format_sprintf_printer;
		tc.it_encode.ice_output.ii_arg     = &ptr;
		tc.it_encode.ice_flags             = ICONV_ERR_ERRNO | ICONV_ERR_TRANSLIT;
		error = _iconv_transcode_init(&tc, &in, "de", "ascii");
		assert(error == 0);
		format_printf(in.ii_printer, in.ii_arg, "ss: \x7e");
		*ptr = 0;
		assertf(strcmp(buf, "ss: ss") == 0, "buf = %q", buf);
	}

	dlclose(libiconv);
}


DECL_END

#endif /* !GUARD_LIBICONV_ICONV_CTEST */
