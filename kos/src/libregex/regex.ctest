/* Copyright (c) 2019-2022 Griefer@Work                                       *
 *                                                                            *
 * This software is provided 'as-is', without any express or implied          *
 * warranty. In no event will the authors be held liable for any damages      *
 * arising from the use of this software.                                     *
 *                                                                            *
 * Permission is granted to anyone to use this software for any purpose,      *
 * including commercial applications, and to alter it and redistribute it     *
 * freely, subject to the following restrictions:                             *
 *                                                                            *
 * 1. The origin of this software must not be misrepresented; you must not    *
 *    claim that you wrote the original software. If you use this software    *
 *    in a product, an acknowledgement (see the following) in the product     *
 *    documentation is required:                                              *
 *    Portions Copyright (c) 2019-2022 Griefer@Work                           *
 * 2. Altered source versions must be plainly marked as such, and must not be *
 *    misrepresented as being the original software.                          *
 * 3. This notice may not be removed or altered from any source distribution. *
 */
#ifndef GUARD_LIBREGEX_REGEX_CTEST
#define GUARD_LIBREGEX_REGEX_CTEST 1
#define _KOS_SOURCE 1
#undef NDEBUG

#include <hybrid/compiler.h>

#include <bits/os/iovec.h>
#include <kos/types.h>
#include <sys/syslog.h>
#include <system-test/ctest.h>

#include <assert.h>
#include <dlfcn.h>
#include <malloc.h>
#include <stddef.h>
#include <stdio.h>
#include <string.h>

#include <libiberty.h>
#include <libregex/regcomp.h>
#include <libregex/regexec.h>

DECL_BEGIN

#undef DUMP_DISASM
#if 0
#define DUMP_DISASM
#endif

PRIVATE PRE_COMPILER_COMPILE re_compiler_compile;
#ifdef DUMP_DISASM
PRIVATE PRE_CODE_DISASM re_code_disasm;
#endif /* DUMP_DISASM */
PRIVATE PRE_EXEC_MATCH re_exec_match;
PRIVATE PRE_EXEC_SEARCH re_exec_search;
PRIVATE PRE_EXEC_RSEARCH re_exec_rsearch;

#define DEFAULT_SYNTAX_FLAGS               \
	(RE_SYNTAX_BACKSLASH_ESCAPE_IN_LISTS | \
	 RE_SYNTAX_CHAR_CLASSES |              \
	 RE_SYNTAX_CONTEXT_INVALID_OPS |       \
	 RE_SYNTAX_DOT_NOT_NULL |              \
	 RE_SYNTAX_INTERVALS |                 \
	 RE_SYNTAX_NO_BK_BRACES |              \
	 RE_SYNTAX_NO_BK_PARENS |              \
	 RE_SYNTAX_NO_BK_VBAR |                \
	 RE_SYNTAX_NO_EMPTY_RANGES |           \
	 RE_SYNTAX_CONTEXT_INVALID_DUP)

PRIVATE re_errno_t re_compile_error(char const *pattern,
                                    uintptr_t extra_syntax_flags) {
	re_errno_t error;
	struct re_compiler compiler;
	re_compiler_init(&compiler, pattern, strend(pattern),
	                 DEFAULT_SYNTAX_FLAGS | extra_syntax_flags);
	error = re_compiler_compile(&compiler);
	NE(RE_NOERROR, error);
	re_compiler_fini(&compiler);
	return error;
}

PRIVATE struct re_code *re_compile(char const *pattern,
                                   uintptr_t extra_syntax_flags) {
	struct re_code *result;
	re_errno_t error;
	struct re_compiler compiler;
	re_compiler_init(&compiler, pattern, strend(pattern),
	                 DEFAULT_SYNTAX_FLAGS | extra_syntax_flags);
	error = re_compiler_compile(&compiler);
	EQ(RE_NOERROR, error);
	result = re_compiler_pack(&compiler);
#ifdef DUMP_DISASM
	if (re_code_disasm)
		re_code_disasm(result, &syslog_printer, SYSLOG_PRINTER_CLOSURE(LOG_DEBUG));
#endif /* DUMP_DISASM */
	return result;
}

PRIVATE ssize_t re_match_code(struct re_code const *code, char const *input,
                              size_t exp_matchc, re_regmatch_t const *exp_matchv) {
	ssize_t result, result2;
	struct re_exec exec;
	size_t input_len   = strlen(input);
	struct iovec iov[] = { { (void *)input, input_len } };
	exec.rx_code       = code;
	exec.rx_iov        = iov;
	exec.rx_startoff   = 0;
	exec.rx_endoff     = input_len;
	exec.rx_extra      = 0;
	exec.rx_eflags     = 0;
	exec.rx_nmatch     = exp_matchc;
	exec.rx_pmatch     = (re_regmatch_t *)xmalloc(exp_matchc * sizeof(re_regmatch_t));
	/* Do the match */
	result = re_exec_match(&exec);
	EQmem(exec.rx_pmatch, exp_matchv, exp_matchc * sizeof(re_regmatch_t));

	/* Do the match (without getting group-offsets back) */
	if (exp_matchc) {
		exec.rx_nmatch = 0;
		result2 = re_exec_match(&exec);
		EQ(result, result2);
		exec.rx_nmatch = exp_matchc;
	}

	/* Also attempt the match where every character of `input' appears in its own iov chunk. */
	{
		size_t i;
		struct iovec *chunks;
		chunks = (struct iovec *)xmalloc((2 * input_len) * sizeof(struct iovec));
		for (i = 0; i < input_len; ++i) {
			chunks[(i * 2) + 0].iov_base = NULL;
			chunks[(i * 2) + 0].iov_len  = 0;
			chunks[(i * 2) + 1].iov_base = (void *)&input[i];
			chunks[(i * 2) + 1].iov_len  = 1;
		}
		exec.rx_iov = chunks;
		result2     = re_exec_match(&exec);
		EQ(result, result2);
		EQmem(exec.rx_pmatch, exp_matchv, exp_matchc * sizeof(re_regmatch_t));

		/* Do the match (without getting group-offsets back) */
		if (exp_matchc) {
			exec.rx_nmatch = 0;
			result2 = re_exec_match(&exec);
			EQ(result, result2);
			/*exec.rx_nmatch = exp_matchc;*/
		}

		free(chunks);
	}

	free(exec.rx_pmatch);
	return result;
}
#define re_match_syntax(pattern, input, extra_syntax_flags) _re_match_syntax(pattern, input, 0, NULL, extra_syntax_flags)
#define re_match_syntax_g(pattern, input, extra_syntax_flags, ...)                   \
	({                                                                               \
		static re_regmatch_t const _matches[] = __VA_ARGS__;                         \
		_re_match(pattern, input, lengthof(_matches), _matches, extra_syntax_flags); \
	})
PRIVATE ssize_t _re_match_syntax(char const *pattern, char const *input,
                                size_t exp_matchc, re_regmatch_t const *exp_matchv,
                                uintptr_t extra_syntax_flags) {
	struct re_code *code;
	ssize_t result;
	code   = re_compile(pattern, extra_syntax_flags);
	result = re_match_code(code, input, exp_matchc, exp_matchv);
	free(code);
	return result;
}

#define re_match(pattern, input) _re_match(pattern, input, 0, NULL)
#define re_match_g(pattern, input, ...)                          \
	({                                                           \
		static re_regmatch_t const _matches[] = __VA_ARGS__;     \
		_re_match(pattern, input, lengthof(_matches), _matches); \
	})
PRIVATE ssize_t _re_match(char const *pattern, char const *input,
                          size_t exp_matchc, re_regmatch_t const *exp_matchv) {
	return _re_match_syntax(pattern, input, exp_matchc, exp_matchv, 0);
}

#define REGMATCH(so, eo) { so, eo }

DEFINE_TEST(regex) {
	void *libregex;
	ISnonnullf((libregex = dlopen(LIBREGEX_LIBRARY_NAME, RTLD_LOCAL)), "%s", dlerror());
#define DLSYM(x) ISnonnullf((*(void **)&x = dlsym(libregex, #x)), "%s", dlerror())
	DLSYM(re_compiler_compile);
	DLSYM(re_exec_match);
	DLSYM(re_exec_search);
	DLSYM(re_exec_rsearch);
#undef DLSYM
#ifdef DUMP_DISASM
	*(void **)&re_code_disasm = dlsym(libregex, "re_code_disasm");
#endif /* DUMP_DISASM */

	/* Test some regular expressions */
	EQ(3, re_match("abc", "abc"));
	EQ(3, re_match("abc", "abcd"));
	EQ(3, re_match("ab*c", "abc"));
	EQ(7, re_match("ab+c", "abbbbbc"));
	EQ(3, re_match("ab?c", "abc"));
	EQ(2, re_match("ab?c", "ac"));
	EQ(1, re_match("ab?", "a"));
	EQ(2, re_match("ab?", "ab"));
	EQ(1, re_match_g("a(|b)", "a", { REGMATCH(1, 1) }));
	EQ(2, re_match_g("a(|b)", "ab", { REGMATCH(1, 2) }));
	EQ(1, re_match_g("a(b|)", "a", { REGMATCH(1, 1) }));
	EQ(2, re_match_g("a(b|)", "ab", { REGMATCH(1, 2) }));
	EQ(-RE_NOMATCH, re_match("ab?c", "abd"));
	EQ(-RE_NOMATCH, re_match("ab+c", "abbbbbd"));
	EQ(6, re_match("abbbbb", "abbbbbd"));
	EQ(6, re_match("ab+", "abbbbbd"));
	EQ(-RE_NOMATCH, re_match("a.+", "a"));
	EQ(2, re_match("a.+", "ax"));
	EQ(0, re_match_g("()", "foobar", { REGMATCH(0, 0) }));
	EQ(1, re_match_g("(|f)", "foobar", { REGMATCH(0, 1) }));
	EQ(1, re_match_g("(f|)", "foobar", { REGMATCH(0, 1) }));
	EQ(0, re_match_g("()*", "foobar", { REGMATCH(0, 0) }));
	EQ(1, re_match_g("(|f)*", "foobar", { REGMATCH(0, 1) }));
	EQ(1, re_match_g("(f|)*", "foobar", { REGMATCH(0, 1) }));
	EQ(1, re_match_g("(f)*", "foobar", { REGMATCH(0, 1) }));
	EQ(3, re_match_g("(|f|o)*", "foobar", { REGMATCH(2, 3) }));
	EQ(3, re_match_g("(f||o)*", "foobar", { REGMATCH(2, 3) }));
	EQ(3, re_match_g("(f|o|)*", "foobar", { REGMATCH(2, 3) }));
	EQ(3, re_match_g("(f|o)*", "foobar", { REGMATCH(2, 3) }));
	EQ(5, re_match_g("(|f|o|ba)*", "foobar", { REGMATCH(3, 5) }));
	EQ(5, re_match_g("(f|o||ba)*", "foobar", { REGMATCH(3, 5) }));
	EQ(5, re_match_g("(f||o|ba)*", "foobar", { REGMATCH(3, 5) }));
	EQ(5, re_match_g("(f|o|ba|)*", "foobar", { REGMATCH(3, 5) }));
	EQ(5, re_match_g("(f|o|ba)*", "foobar", { REGMATCH(3, 5) }));
	EQ(6, re_match_g("(|f|o|ba|r)*", "foobar", { REGMATCH(5, 6) }));
	EQ(6, re_match_g("(f|o||ba|r)*", "foobar", { REGMATCH(5, 6) }));
	EQ(6, re_match_g("(f|o|ba|r|)*", "foobar", { REGMATCH(5, 6) }));
	EQ(6, re_match_g("(f|o|ba|r)*", "foobar", { REGMATCH(5, 6) }));
	EQ(9, re_match_g("(|f|o|ba|r)*", "foobarfffb", { REGMATCH(8, 9) }));
	EQ(9, re_match_g("(f|o||ba|r)*", "foobarfffb", { REGMATCH(8, 9) }));
	EQ(9, re_match_g("(f|o|ba|r|)*", "foobarfffb", { REGMATCH(8, 9) }));
	EQ(9, re_match_g("(f|o|ba|r)*", "foobarfffb", { REGMATCH(8, 9) }));
	EQ(11, re_match_g("(|f|o|ba|r)*", "foobarfffba", { REGMATCH(9, 11) }));
	EQ(11, re_match_g("(f|o||ba|r)*", "foobarfffba", { REGMATCH(9, 11) }));
	EQ(11, re_match_g("(f|o|ba|r|)*", "foobarfffba", { REGMATCH(9, 11) }));
	EQ(11, re_match_g("(f|o|ba|r)*", "foobarfffba", { REGMATCH(9, 11) }));
	EQ(0, re_match_g("()?", "foobar", { REGMATCH(0, 0) }));
	EQ(0, re_match("x?", "foobar"));
	EQ(0, re_match("x*", "foobar"));
	EQ(-RE_NOMATCH, re_match("x+", "foobar"));
	EQ(3, re_match_g("(abc|def)", "abcdefX", { REGMATCH(0, 3) }));
	EQ(3, re_match_g("(abc|defX)", "abcdefX", { REGMATCH(0, 3) }));
	EQ(7, re_match_g("(abc|defX)*", "abcdefX", { REGMATCH(3, 7) }));
	EQ(7, re_match_g("(abc|defX)*", "abcdefXY", { REGMATCH(3, 7) }));
	EQ(3, re_match_g("(abc|def)", "abcdefX", { REGMATCH(0, 3) }));
	EQ(6, re_match_g("(abc|def)*", "abcdefX", { REGMATCH(3, 6) }));
	EQ(6, re_match_g("(abc|def)+", "abcdefX", { REGMATCH(3, 6) }));
	EQ(3, re_match_g("(abc|def){1}", "abcabcdefabcX", { REGMATCH(0, 3) }));
	EQ(9, re_match_g("(abc|def){1,3}", "abcabcdefabcX", { REGMATCH(6, 9) }));
	EQ(12, re_match_g("(abc|def){1,}", "abcabcdefabcX", { REGMATCH(9, 12) }));
	EQ(12, re_match_g("(abc|def){1,4}", "abcabcdefabcX", { REGMATCH(9, 12) }));

	/* Make sure that code variables work correctly. */
	EQ(5, re_match_g("(a|b){4}a", "aaaaaaaa", { REGMATCH(3, 4) }));
	EQ(5, re_match_g("(a|b){4}a", "babaaaaa", { REGMATCH(3, 4) }));
	EQ(5, re_match_g("(a|b){4}a", "ababaaaa", { REGMATCH(3, 4) }));
	EQ(5, re_match_g("(a|b){4}a", "bbbbaaaa", { REGMATCH(3, 4) }));
	EQ(5, re_match_g("(b|a){4}a", "aaaaaaaa", { REGMATCH(3, 4) }));
	EQ(5, re_match_g("(b|a){4}a", "babaaaaa", { REGMATCH(3, 4) }));
	EQ(5, re_match_g("(b|a){4}a", "ababaaaa", { REGMATCH(3, 4) }));
	EQ(5, re_match_g("(b|a){4}a", "bbbbaaaa", { REGMATCH(3, 4) }));
	EQ(-RE_NOMATCH, re_match("(a|b){4}a", "aaaaX"));
	EQ(-RE_NOMATCH, re_match("(a|b){4}a", "babaX"));
	EQ(-RE_NOMATCH, re_match("(a|b){4}a", "ababX"));
	EQ(-RE_NOMATCH, re_match("(a|b){4}a", "bbbbX"));

	EQ(1, re_match("\\?", "?"));

	EQ(1, re_match("\\n", "\rfoo"));
	EQ(1, re_match("\\n", "\nfoo"));
	EQ(-RE_NOMATCH, re_match("\\N", "\rfoo"));
	EQ(-RE_NOMATCH, re_match("\\N", "\nfoo"));

	/* Ensure that character sets work in both ASCII and UTF-8 mode. */
	EQ(12, re_match_syntax("[[:hex:]]+", "abcdefABCDEF_", 0));
	EQ(12, re_match_syntax("[[:hex:]]+", "abcdefABCDEF_", RE_SYNTAX_NO_UTF8));
	EQ(-RE_NOMATCH, re_match_syntax("[[:hex:]]+", "_abcdefABCDEF", 0));
	EQ(-RE_NOMATCH, re_match_syntax("[[:hex:]]+", "_abcdefABCDEF", RE_SYNTAX_NO_UTF8));
	EQ(14, re_match_syntax("[[:hex:]ä]+", "äabcdefABCDEF_", 0));
	EQ(3, re_match_syntax("[^[:lower:]Ä]+", "FOOÄBAR", 0));
	EQ(8, re_match_syntax("[^[:lower:]]+", "FOOÄBAR", 0));

	/* Byte-escapes must work properly (even in utf-8 mode) */
	EQ(2, re_match("\\xAB\\xCD", "\xAB\xCD\xCD\xEF"));
	EQ(3, re_match("\\xAB\\xCD+", "\xAB\xCD\xCD\xEF"));
	EQ(1, re_match("[\\xAB\\xCD]", "\xAB\xCD\xCD\xEF"));
	EQ(1, re_match("[\\xAB\\xCD]", "\xCD\xAB\xCD\xEF"));
	EQ(3, re_match("[\\xAB\\xCD]+", "\xAB\xCD\xCD\xEF"));

	/* Unicode-escape must also work (and not get confused for byte-escape) */
	EQ(4, re_match("\\u00AB\\u00CD", "«ÍÍï"));
	EQ(4, re_match("\\U000000AB\\U000000CD", "«ÍÍï"));
	EQ(6, re_match("\\u00AB\\u00CD+", "«ÍÍï"));
	EQ(6, re_match("\\U000000AB\\U000000CD+", "«ÍÍï"));
	EQ(2, re_match("[\\u00AB\\u00CD]", "«ÍÍï"));
	EQ(2, re_match("[\\U000000AB\\U000000CD]", "«ÍÍï"));
	EQ(2, re_match("[\\u00AB\\u00CD]", "Í«Íï"));
	EQ(2, re_match("[\\U000000AB\\U000000CD]", "Í«Íï"));
	EQ(6, re_match("[\\u00AB\\u00CD]+", "«ÍÍï"));
	EQ(6, re_match("[\\U000000AB\\U000000CD]+", "«ÍÍï"));

	/* Ensure that illegal charsets aren't accepted. */
	EQ(RE_EILLSET, re_compile_error("[Ä\\xC3]", 0));

	/* Ensure that peephole work with this corner-case. */
	EQ(5, re_match_g("a(foo|[Ff]oo)b", "afoob", { REGMATCH(1, 4) }));
	EQ(5, re_match_g("a(foo|[Ff]oo)b", "aFoob", { REGMATCH(1, 4) }));

	/* Ensure that group matching works when combined with rollback. */
	EQ(6, re_match_g("foo?(o)bar", "foobar", { REGMATCH(2, 3) }));
	EQ(6, re_match_g("fo(o?o)bar", "foobar", { REGMATCH(2, 3) }));

	/* Ensure that the regex interpreter prefers larger groups. */
	EQ(6, re_match_g(".*(.*).*", "foobar", { REGMATCH(0, 6) }));

	/* Ensure that collating characters work. */
	EQ(3, re_match("[[.tab.]]+", "\t\t\tfoo"));
	EQ(1, re_match("[[.tab.]]+", "\tfoo"));
	EQ(-RE_NOMATCH, re_match("[[.tab.]]+", "foo"));
	EQ(RE_ECOLLATE, re_compile_error("[[.BAD COLL NAME.]]", 0));

	/* Ensure that unicode brace-escape works */
	EQ(6, re_match("[\\u{1234 ABCD}]+", "\u1234\uABCDxxxxxxxxxxxxxxxxx"));
	EQ(2, re_match("[\\u{7E 7F}]+", "\x7E\x7Fxxxxxxxxxxxxxxxxx"));

	/* Cleanup */
	EQ(0, dlclose(libregex));
}


DECL_END

#endif /* !GUARD_LIBREGEX_REGEX_CTEST */
