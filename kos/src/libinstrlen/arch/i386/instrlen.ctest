/* Copyright (c) 2019-2022 Griefer@Work                                       *
 *                                                                            *
 * This software is provided 'as-is', without any express or implied          *
 * warranty. In no event will the authors be held liable for any damages      *
 * arising from the use of this software.                                     *
 *                                                                            *
 * Permission is granted to anyone to use this software for any purpose,      *
 * including commercial applications, and to alter it and redistribute it     *
 * freely, subject to the following restrictions:                             *
 *                                                                            *
 * 1. The origin of this software must not be misrepresented; you must not    *
 *    claim that you wrote the original software. If you use this software    *
 *    in a product, an acknowledgement (see the following) in the product     *
 *    documentation is required:                                              *
 *    Portions Copyright (c) 2019-2022 Griefer@Work                           *
 * 2. Altered source versions must be plainly marked as such, and must not be *
 *    misrepresented as being the original software.                          *
 * 3. This notice may not be removed or altered from any source distribution. *
 */
#ifndef GUARD_LIBINSTRLEN_ARCH_I386_INSTRLEN_CTEST
#define GUARD_LIBINSTRLEN_ARCH_I386_INSTRLEN_CTEST 1
#define _KOS_SOURCE 1
#undef NDEBUG

#include <hybrid/compiler.h>

#include <kos/except.h>
#include <kos/types.h>
#include <system-test/ctest.h>

#include <assert.h>
#include <dlfcn.h>
#include <inttypes.h>
#include <stdlib.h>

#include <libinstrlen/instrlen.h>

DECL_BEGIN

DEFINE_TEST(instrlen_x86_prevent_jcc_regression) {
	PRIVATE byte_t const code[] = {
		0x74, 0x01,       /* je    . + 1 */
		0xa4,             /* movsb */
		0x5e,             /* popl  %esi */
		0x5f,             /* popl  %edi */
		0xc2, 0x0c, 0x00, /* ret   $0xc */
	};
	void *libinstrlen;
	PINSTRUCTION_SUCC instruction_succ;
	ISnonnullf((libinstrlen = dlopen(LIBINSTRLEN_LIBRARY_NAME, RTLD_LOCAL)), "%s", dlerror());
	ISnonnullf((*(void **)&instruction_succ = dlsym(libinstrlen, "instruction_succ")), "%s", dlerror());

#define EQcodeptr(a, b)                                             \
	do {                                                            \
		void const *_a = (a), *_b = (b);                            \
		assertf(_a == _b, "%p(+%" PRIuPTR ") == %p(+%" PRIuPTR ")", \
		        _a, (byte_t *)_a - code,                            \
		        _b, (byte_t *)_b - code);                           \
	}	__WHILE0
	EQcodeptr(instruction_succ(code + 0, ISA_I386), code + 2); /* je    . + 1 */
	EQcodeptr(instruction_succ(code + 2, ISA_I386), code + 3); /* movsb */
	EQcodeptr(instruction_succ(code + 3, ISA_I386), code + 4); /* popl  %esi */
	EQcodeptr(instruction_succ(code + 4, ISA_I386), code + 5); /* popl  %edi */
	EQcodeptr(instruction_succ(code + 5, ISA_I386), code + 8); /* ret   $0xc */

#ifdef ISA_X86_64
	EQcodeptr(instruction_succ(code + 0, ISA_X86_64), code + 2); /* je    . + 1 */
	EQcodeptr(instruction_succ(code + 2, ISA_X86_64), code + 3); /* movsb */
	EQcodeptr(instruction_succ(code + 3, ISA_X86_64), code + 4); /* popq  %rsi */
	EQcodeptr(instruction_succ(code + 4, ISA_X86_64), code + 5); /* popq  %rdi */
	EQcodeptr(instruction_succ(code + 5, ISA_X86_64), code + 8); /* ret   $0xc */
#endif /* ISA_X86_64 */

#ifdef ISA_8086
	EQcodeptr(instruction_succ(code + 0, ISA_8086), code + 2); /* je    . + 1 */
	EQcodeptr(instruction_succ(code + 2, ISA_8086), code + 3); /* movsb */
	EQcodeptr(instruction_succ(code + 3, ISA_8086), code + 4); /* popw  %si */
	EQcodeptr(instruction_succ(code + 4, ISA_8086), code + 5); /* popw  %di */
	EQcodeptr(instruction_succ(code + 5, ISA_8086), code + 8); /* ret   $0xc */
#endif /* ISA_8086 */
#undef EQcodeptr

	dlclose(libinstrlen);
}

DECL_END

#endif /* !GUARD_LIBINSTRLEN_ARCH_I386_INSTRLEN_CTEST */
