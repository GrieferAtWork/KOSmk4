/* Copyright (c) 2019 Griefer@Work                                            *
 *                                                                            *
 * This software is provided 'as-is', without any express or implied          *
 * warranty. In no event will the authors be held liable for any damages      *
 * arising from the use of this software.                                     *
 *                                                                            *
 * Permission is granted to anyone to use this software for any purpose,      *
 * including commercial applications, and to alter it and redistribute it     *
 * freely, subject to the following restrictions:                             *
 *                                                                            *
 * 1. The origin of this software must not be misrepresented; you must not    *
 *    claim that you wrote the original software. If you use this software    *
 *    in a product, an acknowledgement in the product documentation would be  *
 *    appreciated but is not required.                                        *
 * 2. Altered source versions must be plainly marked as such, and must not be *
 *    misrepresented as being the original software.                          *
 * 3. This notice may not be removed or altered from any source distribution. *
 */
#ifdef __INTELLISENSE__
#include <kos/kernel/segment.h>
#include <kos/kernel/gdt.h>
#define SHORT(x)
#define LONG(x)
#endif

#ifdef __x86_64__
#define DEFINE(TYPE, args)                  \
	LONG(SEGMENT_##TYPE##_INIT_UL args);    \
	LONG(SEGMENT_##TYPE##_INIT_UH args);    \
	LONG(SEGMENT_##TYPE##_HI_INIT_UL args); \
	LONG(SEGMENT_##TYPE##_HI_INIT_UH args);
#define DEFINE_INTRGATE_EX(offset, TYPE, DPL, IST) \
	DEFINE(INTRGATE, (offset, SEGMENT_KERNEL_CODE, IST, TYPE, DPL, 1))
#else /* __x86_64__ */
#define DEFINE(TYPE, args)               \
	LONG(SEGMENT_##TYPE##_INIT_UL args); \
	LONG(SEGMENT_##TYPE##_INIT_UH args);
#define DEFINE_INTRGATE_EX(offset, TYPE, DPL, IST) \
	DEFINE(INTRGATE, (offset, SEGMENT_KERNEL_CODE, TYPE, DPL, 1))
#endif /* !__x86_64__ */


#ifdef FOR_DEBUGGER
#define DEFINE_INTRGATE(id, TYPE) \
	DEFINE_INTRGATE_EX(x86_debug_asmirq_##id, TYPE, x86_irqdpl_##id, x86_irqist_##id)
#else /* FOR_DEBUGGER */
#define DEFINE_INTRGATE(id, TYPE) \
	DEFINE_INTRGATE_EX(x86_asmirq_##id, TYPE, x86_irqdpl_##id, x86_irqist_##id)
#endif /* !FOR_DEBUGGER */

#define DEFINE_INTERRUPT(id) DEFINE_INTRGATE(id, SEGMENT_DESCRIPTOR_TYPE_INTRGATE)
#ifdef __x86_64__
/* Can't use traps on x86_64, because we need to
 * be able to do swapgs without being interrupted. */
#define DEFINE_TRAP(id) DEFINE_INTRGATE(id, SEGMENT_DESCRIPTOR_TYPE_INTRGATE)
#else
#define DEFINE_TRAP(id) DEFINE_INTRGATE(id, SEGMENT_DESCRIPTOR_TYPE_TRAPGATE)
#endif

/* GATE:      Leave EFLAGS.IF unchanged */
/* INTERRUPT: Clear EFLAGS.IF to disable preemption. */

DEFINE_TRAP(00)       /* #DE -- Divide by zero */
DEFINE_INTERRUPT(01)  /* #DB -- Debug */
DEFINE_INTERRUPT(02)  /* NMI -- Non-maskable Interrupt */
DEFINE_TRAP(03)       /* #BP -- Breakpoint */
DEFINE_TRAP(04)       /* #OF -- Overflow */
DEFINE_TRAP(05)       /* #BR -- Bound Range */
DEFINE_TRAP(06)       /* #UD -- Illegal Instruction */
DEFINE_INTERRUPT(07)  /* #NM -- Device not available. */

#ifdef __x86_64__
DEFINE_INTERRUPT(08)  /* #DF -- Double Fault. */
#else
/* Special handling for #DF (implemented using a task gate on i386) */
DEFINE(TASKGATE, (SEGMENT_CPU_TSS_DF, x86_irqdpl_08, 1))
#endif

DEFINE_INTERRUPT(09)
DEFINE_INTERRUPT(0a)  /* #TS -- Invalid TSS. */
DEFINE_INTERRUPT(0b)  /* #NP -- Segment not present. */
DEFINE_INTERRUPT(0c)  /* #SS -- Stack segment fault. */
DEFINE_TRAP(0d)       /* #GP -- General Protection Fault. */
DEFINE_INTERRUPT(0e)  /* #PF -- Page Fault. */
DEFINE_INTERRUPT(0f)
DEFINE_INTERRUPT(10)
DEFINE_INTERRUPT(11)
DEFINE_INTERRUPT(12)
DEFINE_INTERRUPT(13)
DEFINE_INTERRUPT(14)
DEFINE_INTERRUPT(15)
DEFINE_INTERRUPT(16)
DEFINE_INTERRUPT(17)
DEFINE_INTERRUPT(18)
DEFINE_INTERRUPT(19)
DEFINE_INTERRUPT(1a)
DEFINE_INTERRUPT(1b)
DEFINE_INTERRUPT(1c)
DEFINE_INTERRUPT(1d)
DEFINE_INTERRUPT(1e)
DEFINE_INTERRUPT(1f)
DEFINE_INTERRUPT(20)
DEFINE_INTERRUPT(21)
DEFINE_INTERRUPT(22)
DEFINE_INTERRUPT(23)
DEFINE_INTERRUPT(24)
DEFINE_INTERRUPT(25)
DEFINE_INTERRUPT(26)
DEFINE_INTERRUPT(27)
DEFINE_INTERRUPT(28)
DEFINE_INTERRUPT(29)
DEFINE_INTERRUPT(2a)
DEFINE_INTERRUPT(2b)
DEFINE_INTERRUPT(2c)
DEFINE_INTERRUPT(2d)
DEFINE_INTERRUPT(2e)
DEFINE_INTERRUPT(2f)
DEFINE_INTERRUPT(30)
DEFINE_INTERRUPT(31)
DEFINE_INTERRUPT(32)
DEFINE_INTERRUPT(33)
DEFINE_INTERRUPT(34)
DEFINE_INTERRUPT(35)
DEFINE_INTERRUPT(36)
DEFINE_INTERRUPT(37)
DEFINE_INTERRUPT(38)
DEFINE_INTERRUPT(39)
DEFINE_INTERRUPT(3a)
DEFINE_INTERRUPT(3b)
DEFINE_INTERRUPT(3c)
DEFINE_INTERRUPT(3d)
DEFINE_INTERRUPT(3e)
DEFINE_INTERRUPT(3f)
DEFINE_INTERRUPT(40)
DEFINE_INTERRUPT(41)
DEFINE_INTERRUPT(42)
DEFINE_INTERRUPT(43)
DEFINE_INTERRUPT(44)
DEFINE_INTERRUPT(45)
DEFINE_INTERRUPT(46)
DEFINE_INTERRUPT(47)
DEFINE_INTERRUPT(48)
DEFINE_INTERRUPT(49)
DEFINE_INTERRUPT(4a)
DEFINE_INTERRUPT(4b)
DEFINE_INTERRUPT(4c)
DEFINE_INTERRUPT(4d)
DEFINE_INTERRUPT(4e)
DEFINE_INTERRUPT(4f)
DEFINE_INTERRUPT(50)
DEFINE_INTERRUPT(51)
DEFINE_INTERRUPT(52)
DEFINE_INTERRUPT(53)
DEFINE_INTERRUPT(54)
DEFINE_INTERRUPT(55)
DEFINE_INTERRUPT(56)
DEFINE_INTERRUPT(57)
DEFINE_INTERRUPT(58)
DEFINE_INTERRUPT(59)
DEFINE_INTERRUPT(5a)
DEFINE_INTERRUPT(5b)
DEFINE_INTERRUPT(5c)
DEFINE_INTERRUPT(5d)
DEFINE_INTERRUPT(5e)
DEFINE_INTERRUPT(5f)
DEFINE_INTERRUPT(60)
DEFINE_INTERRUPT(61)
DEFINE_INTERRUPT(62)
DEFINE_INTERRUPT(63)
DEFINE_INTERRUPT(64)
DEFINE_INTERRUPT(65)
DEFINE_INTERRUPT(66)
DEFINE_INTERRUPT(67)
DEFINE_INTERRUPT(68)
DEFINE_INTERRUPT(69)
DEFINE_INTERRUPT(6a)
DEFINE_INTERRUPT(6b)
DEFINE_INTERRUPT(6c)
DEFINE_INTERRUPT(6d)
DEFINE_INTERRUPT(6e)
DEFINE_INTERRUPT(6f)
DEFINE_INTERRUPT(70)
DEFINE_INTERRUPT(71)
DEFINE_INTERRUPT(72)
DEFINE_INTERRUPT(73)
DEFINE_INTERRUPT(74)
DEFINE_INTERRUPT(75)
DEFINE_INTERRUPT(76)
DEFINE_INTERRUPT(77)
DEFINE_INTERRUPT(78)
DEFINE_INTERRUPT(79)
DEFINE_INTERRUPT(7a)
DEFINE_INTERRUPT(7b)
DEFINE_INTERRUPT(7c)
DEFINE_INTERRUPT(7d)
DEFINE_INTERRUPT(7e)
DEFINE_INTERRUPT(7f)
#ifdef FOR_DEBUGGER
DEFINE_INTERRUPT(80)
#elif defined(WITH_SYSCALL_TRACING_ENABLED)
#ifdef __x86_64__
/* Can't use traps on x86_64, because we need to
 * be able to do swapgs without being interrupted. */
DEFINE_INTRGATE_EX(x86_asmirq_80_traced, SEGMENT_DESCRIPTOR_TYPE_INTRGATE, x86_irqdpl_80, x86_irqist_80)
#else /* __x86_64__ */
DEFINE_INTRGATE_EX(x86_asmirq_80_traced, SEGMENT_DESCRIPTOR_TYPE_TRAPGATE, x86_irqdpl_80, x86_irqist_80)
#endif /* !__x86_64__ */
#else /* ... */
DEFINE_TRAP(80) /* Keep interrupts on for system calls. */
#endif /* !... */
DEFINE_INTERRUPT(81)
DEFINE_INTERRUPT(82)
DEFINE_INTERRUPT(83)
DEFINE_INTERRUPT(84)
DEFINE_INTERRUPT(85)
DEFINE_INTERRUPT(86)
DEFINE_INTERRUPT(87)
DEFINE_INTERRUPT(88)
DEFINE_INTERRUPT(89)
DEFINE_INTERRUPT(8a)
DEFINE_INTERRUPT(8b)
DEFINE_INTERRUPT(8c)
DEFINE_INTERRUPT(8d)
DEFINE_INTERRUPT(8e)
DEFINE_INTERRUPT(8f)
DEFINE_INTERRUPT(90)
DEFINE_INTERRUPT(91)
DEFINE_INTERRUPT(92)
DEFINE_INTERRUPT(93)
DEFINE_INTERRUPT(94)
DEFINE_INTERRUPT(95)
DEFINE_INTERRUPT(96)
DEFINE_INTERRUPT(97)
DEFINE_INTERRUPT(98)
DEFINE_INTERRUPT(99)
DEFINE_INTERRUPT(9a)
DEFINE_INTERRUPT(9b)
DEFINE_INTERRUPT(9c)
DEFINE_INTERRUPT(9d)
DEFINE_INTERRUPT(9e)
DEFINE_INTERRUPT(9f)
DEFINE_INTERRUPT(a0)
DEFINE_INTERRUPT(a1)
DEFINE_INTERRUPT(a2)
DEFINE_INTERRUPT(a3)
DEFINE_INTERRUPT(a4)
DEFINE_INTERRUPT(a5)
DEFINE_INTERRUPT(a6)
DEFINE_INTERRUPT(a7)
DEFINE_INTERRUPT(a8)
DEFINE_INTERRUPT(a9)
DEFINE_INTERRUPT(aa)
DEFINE_INTERRUPT(ab)
DEFINE_INTERRUPT(ac)
DEFINE_INTERRUPT(ad)
DEFINE_INTERRUPT(ae)
DEFINE_INTERRUPT(af)
DEFINE_INTERRUPT(b0)
DEFINE_INTERRUPT(b1)
DEFINE_INTERRUPT(b2)
DEFINE_INTERRUPT(b3)
DEFINE_INTERRUPT(b4)
DEFINE_INTERRUPT(b5)
DEFINE_INTERRUPT(b6)
DEFINE_INTERRUPT(b7)
DEFINE_INTERRUPT(b8)
DEFINE_INTERRUPT(b9)
DEFINE_INTERRUPT(ba)
DEFINE_INTERRUPT(bb)
DEFINE_INTERRUPT(bc)
DEFINE_INTERRUPT(bd)
DEFINE_INTERRUPT(be)
DEFINE_INTERRUPT(bf)
DEFINE_INTERRUPT(c0)
DEFINE_INTERRUPT(c1)
DEFINE_INTERRUPT(c2)
DEFINE_INTERRUPT(c3)
DEFINE_INTERRUPT(c4)
DEFINE_INTERRUPT(c5)
DEFINE_INTERRUPT(c6)
DEFINE_INTERRUPT(c7)
DEFINE_INTERRUPT(c8)
DEFINE_INTERRUPT(c9)
DEFINE_INTERRUPT(ca)
DEFINE_INTERRUPT(cb)
DEFINE_INTERRUPT(cc)
DEFINE_INTERRUPT(cd)
DEFINE_INTERRUPT(ce)
DEFINE_INTERRUPT(cf)
DEFINE_INTERRUPT(d0)
DEFINE_INTERRUPT(d1)
DEFINE_INTERRUPT(d2)
DEFINE_INTERRUPT(d3)
DEFINE_INTERRUPT(d4)
DEFINE_INTERRUPT(d5)
DEFINE_INTERRUPT(d6)
DEFINE_INTERRUPT(d7)
DEFINE_INTERRUPT(d8)
DEFINE_INTERRUPT(d9)
DEFINE_INTERRUPT(da)
DEFINE_INTERRUPT(db)
DEFINE_INTERRUPT(dc)
DEFINE_INTERRUPT(dd)
DEFINE_INTERRUPT(de)
DEFINE_INTERRUPT(df)
DEFINE_INTERRUPT(e0)
DEFINE_INTERRUPT(e1)
DEFINE_INTERRUPT(e2)
DEFINE_INTERRUPT(e3)
DEFINE_INTERRUPT(e4)
DEFINE_INTERRUPT(e5)
DEFINE_INTERRUPT(e6)
DEFINE_INTERRUPT(e7)
DEFINE_INTERRUPT(e8)
DEFINE_INTERRUPT(e9)
DEFINE_INTERRUPT(ea)
DEFINE_INTERRUPT(eb)
DEFINE_INTERRUPT(ec)
DEFINE_INTERRUPT(ed)
DEFINE_INTERRUPT(ee)
DEFINE_INTERRUPT(ef)
DEFINE_INTERRUPT(f0)
DEFINE_INTERRUPT(f1)
DEFINE_INTERRUPT(f2)
DEFINE_INTERRUPT(f3)
DEFINE_INTERRUPT(f4)
DEFINE_INTERRUPT(f5)
DEFINE_INTERRUPT(f6)
DEFINE_INTERRUPT(f7)
DEFINE_INTERRUPT(f8)
DEFINE_INTERRUPT(f9)
DEFINE_INTERRUPT(fa)
DEFINE_INTERRUPT(fb)
DEFINE_INTERRUPT(fc)
DEFINE_INTERRUPT(fd)
DEFINE_INTERRUPT(fe)
DEFINE_INTERRUPT(ff)

#undef DEFINE_TRAP
#undef DEFINE_INTERRUPT
#undef DEFINE_INTRGATE
#undef DEFINE_INTRGATE_EX
#undef DEFINE
#undef FOR_DEBUGGER
