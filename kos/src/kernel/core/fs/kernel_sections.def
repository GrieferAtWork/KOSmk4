/* Copyright (c) 2019-2020 Griefer@Work                                       *
 *                                                                            *
 * This software is provided 'as-is', without any express or implied          *
 * warranty. In no event will the authors be held liable for any damages      *
 * arising from the use of this software.                                     *
 *                                                                            *
 * Permission is granted to anyone to use this software for any purpose,      *
 * including commercial applications, and to alter it and redistribute it     *
 * freely, subject to the following restrictions:                             *
 *                                                                            *
 * 1. The origin of this software must not be misrepresented; you must not    *
 *    claim that you wrote the original software. If you use this software    *
 *    in a product, an acknowledgement in the product documentation would be  *
 *    appreciated but is not required.                                        *
 * 2. Altered source versions must be plainly marked as such, and must not be *
 *    misrepresented as being the original software.                          *
 * 3. This notice may not be removed or altered from any source distribution. *
 */
#ifndef SECTION
#error "Must #define SECTION(name, type, flags, start, size, entsize, link, info) before #including this file"
#endif /* !SECTION */

#ifndef SECTION_GLOBALS_DEFINED
#define SECTION_GLOBALS_DEFINED 1
INTDEF byte_t __kernel_sect_text_start[];
INTDEF byte_t __kernel_sect_text_size[];
INTDEF byte_t __kernel_sect_rodata_start[];
INTDEF byte_t __kernel_sect_rodata_size[];
INTDEF byte_t __kernel_sect_gcc_except_table_start[];
INTDEF byte_t __kernel_sect_gcc_except_table_size[];
INTDEF byte_t __kernel_sect_eh_frame_start[];
INTDEF byte_t __kernel_sect_eh_frame_size[];
INTDEF byte_t __kernel_debug_line_start[];
INTDEF byte_t __kernel_debug_line_size[];
INTDEF byte_t __kernel_debug_info_start[];
INTDEF byte_t __kernel_debug_info_size[];
INTDEF byte_t __kernel_debug_aranges_start[];
INTDEF byte_t __kernel_debug_aranges_size[];
INTDEF byte_t __kernel_debug_abbrev_start[];
INTDEF byte_t __kernel_debug_abbrev_size[];
INTDEF byte_t __kernel_debug_str_start[];
INTDEF byte_t __kernel_debug_str_size[];
INTDEF byte_t __kernel_debug_ranges_start[];
INTDEF byte_t __kernel_debug_ranges_size[];
INTDEF byte_t __kernel_debug_loc_start[];
INTDEF byte_t __kernel_debug_loc_size[];
INTDEF byte_t __kernel_pertask_start[];
INTDEF byte_t __kernel_pertask_size[];
INTDEF byte_t __kernel_pervm_start[];
INTDEF byte_t __kernel_pervm_size[];
INTDEF byte_t __kernel_percpu_start[];
INTDEF byte_t __kernel_percpu_size[];
INTDEF byte_t __kernel_sect_data_start[];
INTDEF byte_t __kernel_sect_data_size[];
INTDEF byte_t __kernel_sect_bss_start[];
INTDEF byte_t __kernel_sect_bss_size[];
#endif /* !SECTION_GLOBALS_DEFINED */

SECTION(".text", SHT_PROGBITS, SHF_ALLOC | SHF_EXECINSTR, __kernel_sect_text_start, __kernel_sect_text_size, 0, 0, 0)
SECTION(".rodata", SHT_PROGBITS, SHF_ALLOC, __kernel_sect_rodata_start, __kernel_sect_rodata_size, 0, 0, 0)
SECTION(".gcc_except_table", SHT_PROGBITS, SHF_ALLOC, __kernel_sect_gcc_except_table_start, __kernel_sect_gcc_except_table_size, 0, 0, 0)
SECTION(".eh_frame", SHT_PROGBITS, SHF_ALLOC, __kernel_sect_eh_frame_start, __kernel_sect_eh_frame_size, 0, 0, 0)
SECTION(".debug_line", SHT_PROGBITS, SHF_ALLOC, __kernel_debug_line_start, __kernel_debug_line_size, 0, 0, 0)
SECTION(".debug_info", SHT_PROGBITS, SHF_ALLOC, __kernel_debug_info_start, __kernel_debug_info_size, 0, 0, 0)
SECTION(".debug_aranges", SHT_PROGBITS, SHF_ALLOC, __kernel_debug_aranges_start, __kernel_debug_aranges_size, 0, 0, 0)
SECTION(".debug_abbrev", SHT_PROGBITS, SHF_ALLOC, __kernel_debug_abbrev_start, __kernel_debug_abbrev_size, 0, 0, 0)
SECTION(".debug_str", SHT_PROGBITS, SHF_ALLOC, __kernel_debug_str_start, __kernel_debug_str_size, 0, 0, 0)
SECTION(".debug_ranges", SHT_PROGBITS, SHF_ALLOC, __kernel_debug_ranges_start, __kernel_debug_ranges_size, 0, 0, 0)
SECTION(".debug_loc", SHT_PROGBITS, SHF_ALLOC, __kernel_debug_loc_start, __kernel_debug_loc_size, 0, 0, 0)
SECTION(".pertask", SHT_PROGBITS, SHF_ALLOC | SHF_TLS, __kernel_pertask_start, __kernel_pertask_size, 0, 0, 0)
SECTION(".pervm", SHT_PROGBITS, SHF_ALLOC | SHF_TLS, __kernel_pervm_start, __kernel_pervm_size, 0, 0, 0)
SECTION(".percpu", SHT_PROGBITS, SHF_ALLOC | SHF_TLS, __kernel_percpu_start, __kernel_percpu_size, 0, 0, 0)
SECTION(".data", SHT_PROGBITS, SHF_ALLOC | SHF_WRITE, __kernel_sect_data_start, __kernel_sect_data_size, 0, 0, 0)
SECTION(".bss", SHT_NOBITS, SHF_ALLOC | SHF_WRITE, __kernel_sect_bss_start, __kernel_sect_bss_size, 0, 0, 0)

/* NOTE: This section _must_ be last! */
SECTION(".shstrtab", SHT_STRTAB, SHF_ALLOC | SHF_STRINGS, &kernel_shstrtab_data, sizeof(struct kernel_shstrtab) - 1, 0, 0, 0)

#undef SECTION
