/* Copyright (c) 2019-2024 Griefer@Work                                       *
 *                                                                            *
 * This software is provided 'as-is', without any express or implied          *
 * warranty. In no event will the authors be held liable for any damages      *
 * arising from the use of this software.                                     *
 *                                                                            *
 * Permission is granted to anyone to use this software for any purpose,      *
 * including commercial applications, and to alter it and redistribute it     *
 * freely, subject to the following restrictions:                             *
 *                                                                            *
 * 1. The origin of this software must not be misrepresented; you must not    *
 *    claim that you wrote the original software. If you use this software    *
 *    in a product, an acknowledgement (see the following) in the product     *
 *    documentation is required:                                              *
 *    Portions Copyright (c) 2019-2024 Griefer@Work                           *
 * 2. Altered source versions must be plainly marked as such, and must not be *
 *    misrepresented as being the original software.                          *
 * 3. This notice may not be removed or altered from any source distribution. *
 */
#ifndef GUARD_LIBC_LIBC_MATH_CTEST
#define GUARD_LIBC_LIBC_MATH_CTEST 1
#define _KOS_SOURCE 1
#undef NDEBUG

#include <hybrid/compiler.h>

#include <system-test/ctest.h>

#include <assert.h>
#include <fenv.h>
#include <stdio.h>
#include <math.h>

DECL_BEGIN

DEFINE_TEST(math_rounding) {
	volatile double a = 1.499;
	volatile double b = 1.5;
	volatile double c = 1.501;
	volatile double d = -1.499;
	volatile double e = -1.5;
	volatile double f = -1.501;

#define EQFLT(a, b)                            \
	({                                         \
		volatile double _a = (a);              \
		volatile double _b = (b);              \
		assertf(isfinite(_a), "%f", _a);       \
		assertf(_a == _b, "%f != %f", _a, _b); \
	})
	EQFLT(round(a), 1.0);
	EQFLT(round(b), 2.0);
	EQFLT(round(c), 2.0);
	EQFLT(round(d), -1.0);
	EQFLT(round(e), -2.0);
	EQFLT(round(f), -2.0);

	EQ(1, lround(a));
	EQ(2, lround(b));
	EQ(2, lround(c));
	EQ(-1, lround(d));
	EQ(-2, lround(e));
	EQ(-2, lround(f));

	EQ(1, llround(a));
	EQ(2, llround(b));
	EQ(2, llround(c));
	EQ(-1, llround(d));
	EQ(-2, llround(e));
	EQ(-2, llround(f));

	EQFLT(floor(a), 1.0);
	EQFLT(floor(b), 1.0);
	EQFLT(floor(c), 1.0);
	EQFLT(floor(d), -2.0);
	EQFLT(floor(e), -2.0);
	EQFLT(floor(f), -2.0);

	EQFLT(ceil(a), 2.0);
	EQFLT(ceil(b), 2.0);
	EQFLT(ceil(c), 2.0);
	EQFLT(ceil(d), -1.0);
	EQFLT(ceil(e), -1.0);
	EQFLT(ceil(f), -1.0);

	EQFLT(trunc(a), 1.0);
	EQFLT(trunc(b), 1.0);
	EQFLT(trunc(c), 1.0);
	EQFLT(trunc(d), -1.0);
	EQFLT(trunc(e), -1.0);
	EQFLT(trunc(f), -1.0);

	EQ(0, fesetround(FE_TONEAREST));
	EQ(FE_TONEAREST, fegetround());
	EQFLT(nearbyint(a), round(a)); EQ(1, lrint(a));  EQ(1, llrint(a));
	EQFLT(nearbyint(b), round(b)); EQ(2, lrint(b));  EQ(2, llrint(b));
	EQFLT(nearbyint(c), round(c)); EQ(2, lrint(c));  EQ(2, llrint(c));
	EQFLT(nearbyint(d), round(d)); EQ(-1, lrint(d)); EQ(-1, llrint(d));
	EQFLT(nearbyint(e), round(e)); EQ(-2, lrint(e)); EQ(-2, llrint(e));
	EQFLT(nearbyint(f), round(f)); EQ(-2, lrint(f)); EQ(-2, llrint(f));
	EQ(FE_TONEAREST, fegetround());

	EQ(0, fesetround(FE_DOWNWARD));
	EQ(FE_DOWNWARD, fegetround());
	EQFLT(nearbyint(a), floor(a)); EQ(1, lrint(a));  EQ(1, llrint(a));
	EQFLT(nearbyint(b), floor(b)); EQ(1, lrint(b));  EQ(1, llrint(b));
	EQFLT(nearbyint(c), floor(c)); EQ(1, lrint(c));  EQ(1, llrint(c));
	EQFLT(nearbyint(d), floor(d)); EQ(-2, lrint(d)); EQ(-2, llrint(d));
	EQFLT(nearbyint(e), floor(e)); EQ(-2, lrint(e)); EQ(-2, llrint(e));
	EQFLT(nearbyint(f), floor(f)); EQ(-2, lrint(f)); EQ(-2, llrint(f));
	EQ(FE_DOWNWARD, fegetround());

	EQ(0, fesetround(FE_UPWARD));
	EQ(FE_UPWARD, fegetround());
	EQFLT(nearbyint(a), ceil(a)); EQ(2, lrint(a));  EQ(2, llrint(a));
	EQFLT(nearbyint(b), ceil(b)); EQ(2, lrint(b));  EQ(2, llrint(b));
	EQFLT(nearbyint(c), ceil(c)); EQ(2, lrint(c));  EQ(2, llrint(c));
	EQFLT(nearbyint(d), ceil(d)); EQ(-1, lrint(d)); EQ(-1, llrint(d));
	EQFLT(nearbyint(e), ceil(e)); EQ(-1, lrint(e)); EQ(-1, llrint(e));
	EQFLT(nearbyint(f), ceil(f)); EQ(-1, lrint(f)); EQ(-1, llrint(f));
	EQ(FE_UPWARD, fegetround());

	EQ(0, fesetround(FE_TOWARDZERO));
	EQ(FE_TOWARDZERO, fegetround());
	EQFLT(nearbyint(a), trunc(a)); EQ(1, lrint(a));  EQ(1, llrint(a));
	EQFLT(nearbyint(b), trunc(b)); EQ(1, lrint(b));  EQ(1, llrint(b));
	EQFLT(nearbyint(c), trunc(c)); EQ(1, lrint(c));  EQ(1, llrint(c));
	EQFLT(nearbyint(d), trunc(d)); EQ(-1, lrint(d)); EQ(-1, llrint(d));
	EQFLT(nearbyint(e), trunc(e)); EQ(-1, lrint(e)); EQ(-1, llrint(e));
	EQFLT(nearbyint(f), trunc(f)); EQ(-1, lrint(f)); EQ(-1, llrint(f));
	EQ(FE_TOWARDZERO, fegetround());

#undef EQFLT
}


DECL_END

#endif /* !GUARD_LIBC_LIBC_MATH_CTEST */
