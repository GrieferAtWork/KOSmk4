/* Copyright (c) 2019-2021 Griefer@Work                                       *
 *                                                                            *
 * This software is provided 'as-is', without any express or implied          *
 * warranty. In no event will the authors be held liable for any damages      *
 * arising from the use of this software.                                     *
 *                                                                            *
 * Permission is granted to anyone to use this software for any purpose,      *
 * including commercial applications, and to alter it and redistribute it     *
 * freely, subject to the following restrictions:                             *
 *                                                                            *
 * 1. The origin of this software must not be misrepresented; you must not    *
 *    claim that you wrote the original software. If you use this software    *
 *    in a product, an acknowledgement (see the following) in the product     *
 *    documentation is required:                                              *
 *    Portions Copyright (c) 2019-2021 Griefer@Work                           *
 * 2. Altered source versions must be plainly marked as such, and must not be *
 *    misrepresented as being the original software.                          *
 * 3. This notice may not be removed or altered from any source distribution. *
 */

#ifndef S
#define S(id, message) /* nothing */
#define __SYS_SIGLIST_DEFINES_S 1
#endif /* !S */

#ifndef S_UNDEF
#define S_UNDEF(id) /* nothing */
#define __SYS_SIGLIST_DEFINES_S_UNDEF 1
#endif /* !S_UNDEF */


/*[[[deemon
import * from deemon;
import * from util;
local signum_values: {(string, string)...} = [];
for (local l: File.open("../../../include/asm/os/kos/signal.h")) {
	local name, value, comment;
	try {
		name, value, comment = l.scanf(" # define %[^ ] %[^/ ] /" "* %[^]")...;
	} catch (...) {
		continue;
	}
	comment = comment.strip().rsstrip("*" "/").rstrip();
	name = name.strip();
	try {
		value = int(value.strip());
	} catch (...) {
		continue;
	}
	if (!name.startswith("__SIG"))
		continue;
	name = name[5:];
	if (name.startswith("_"))
		continue;
	if (value >= #signum_values)
		signum_values.resize(value + 1);
	comment = comment.rpartition("(")[0].rstrip().rstrip(".").rstrip();


	signum_values[value] = (name, comment);
}
local longestNameLength = (
	for (local name, none: signum_values)
		if (name !is none)
			#name
	) > ...;
for (local i, nameAndComment: enumerate(signum_values)) {
	local name, comment = nameAndComment...;
	if (name is none) {
		print("S_UNDEF(", i, ")");
		continue;
	}
	print("S(", name, ", ", " " * (longestNameLength - #name), repr(comment), ")");
}
]]]*/
S_UNDEF(0)
S(HUP,    "Hangup")
S(INT,    "Interrupt")
S(QUIT,   "Quit")
S(ILL,    "Illegal instruction")
S(TRAP,   "Trace trap")
S(ABRT,   "Abort")
S(BUS,    "BUS error")
S(FPE,    "Floating-point exception")
S(KILL,   "Kill, unblockable")
S(USR1,   "User-defined signal 1")
S(SEGV,   "Segmentation violation")
S(USR2,   "User-defined signal 2")
S(PIPE,   "Broken pipe")
S(ALRM,   "Alarm clock")
S(TERM,   "Termination")
S(STKFLT, "Stack fault")
S(CHLD,   "Child status has changed")
S(CONT,   "Continue")
S(STOP,   "Stop, unblockable")
S(TSTP,   "Keyboard stop")
S(TTIN,   "Background read from tty")
S(TTOU,   "Background write to tty")
S(URG,    "Urgent condition on socket")
S(XCPU,   "CPU limit exceeded")
S(XFSZ,   "File size limit exceeded")
S(VTALRM, "Virtual alarm clock")
S(PROF,   "Profiling alarm clock")
S(WINCH,  "Window size change")
S(IO,     "I/O now possible")
S(PWR,    "Power failure restart")
S(SYS,    "Bad system call")
/*[[[end]]]*/

#ifdef __SYS_SIGLIST_DEFINES_S_UNDEF
#undef __SYS_SIGLIST_DEFINES_S_UNDEF
#undef S_UNDEF
#endif /* __SYS_SIGLIST_DEFINES_S_UNDEF */

#ifdef __SYS_SIGLIST_DEFINES_S
#undef __SYS_SIGLIST_DEFINES_S
#undef S
#endif /* __SYS_SIGLIST_DEFINES_S */
