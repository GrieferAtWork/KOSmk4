/* Copyright (c) 2019-2025 Griefer@Work                                       *
 *                                                                            *
 * This software is provided 'as-is', without any express or implied          *
 * warranty. In no event will the authors be held liable for any damages      *
 * arising from the use of this software.                                     *
 *                                                                            *
 * Permission is granted to anyone to use this software for any purpose,      *
 * including commercial applications, and to alter it and redistribute it     *
 * freely, subject to the following restrictions:                             *
 *                                                                            *
 * 1. The origin of this software must not be misrepresented; you must not    *
 *    claim that you wrote the original software. If you use this software    *
 *    in a product, an acknowledgement (see the following) in the product     *
 *    documentation is required:                                              *
 *    Portions Copyright (c) 2019-2025 Griefer@Work                           *
 * 2. Altered source versions must be plainly marked as such, and must not be *
 *    misrepresented as being the original software.                          *
 * 3. This notice may not be removed or altered from any source distribution. *
 */
#ifndef GUARD_LIBC_LIBC_WORDEXP_CTEST
#define GUARD_LIBC_LIBC_WORDEXP_CTEST 1
#define _KOS_SOURCE 1
#undef NDEBUG

#include <hybrid/compiler.h>

#include <system-test/ctest.h>

#include <assert.h>
#include <inttypes.h>
#include <stdarg.h>
#include <stdlib.h>
#include <string.h>
#include <wordexp.h>

DECL_BEGIN

PRIVATE void
assert_wordexp(char const *expand_me, size_t num_words, ...) {
	wordexp_t wx;
	size_t i, common_count;
	va_list args;
	EQ(0, wordexp(expand_me, &wx, 0));
	EQ(0, wx.we_offs);
	common_count = wx.we_wordc;
	if (common_count > num_words)
		common_count = num_words;
	va_start(args, num_words);
	for (i = 0; i < common_count; ++i) {
		char const *exp = va_arg(args, char const *);
		char const *got = wx.we_wordv[i];
		assertf(strcmp(exp, got) == 0,
		        "Word #%" PRIuSIZ " of wordexp(%q) is incorrect\n"
		        "exp: %q\n"
		        "got: %q\n",
		        i, expand_me, exp, got);
	}
	va_end(args);
	EQ(wx.we_wordc, num_words);
	EQ((char *)NULL, wx.we_wordv[wx.we_wordc]);
	wordfree(&wx);
}


DEFINE_TEST(wordexp) {

	/* Basic tests */
	assert_wordexp("foobar", 1, "foobar");
	assert_wordexp("foo bar", 2, "foo", "bar");
	assert_wordexp("foo    bar", 2, "foo", "bar");
	assert_wordexp("foo \t\t\t  bar", 2, "foo", "bar");

	/* Bring in environment variables */
	setenv("TEST", "10 20 30", 1);
	assert_wordexp("a $TEST b", 5, "a", "10", "20", "30", "b");
	assert_wordexp("a \"$TEST\" b", 3, "a", "10 20 30", "b");
	assert_wordexp("a\"$TEST\" b", 2, "a10 20 30", "b");
	assert_wordexp("a\"$TEST\"b", 1, "a10 20 30b");
	assert_wordexp("a\"\\$TEST\"b", 1, "a$TESTb");
	assert_wordexp("a'$TEST'b", 1, "a$TESTb");
	assert_wordexp("a ${TEST} b", 5, "a", "10", "20", "30", "b");
	assert_wordexp("a \"${TEST}\" b", 3, "a", "10 20 30", "b");
	assert_wordexp("a\"${TEST}\" b", 2, "a10 20 30", "b");
	assert_wordexp("a\"${TEST}\"b", 1, "a10 20 30b");
	assert_wordexp("a ${TEST=42} b", 5, "a", "10", "20", "30", "b");
	assert_wordexp("a \"${TEST=42}\" b", 3, "a", "10 20 30", "b");
	assert_wordexp("a\"${TEST=42}\" b", 2, "a10 20 30", "b");
	assert_wordexp("a\"${TEST=42}\"b", 1, "a10 20 30b");
	unsetenv("TEST");
	assert_wordexp("a $TEST b", 2, "a", "b");
	assert_wordexp("a \"$TEST\" b", 3, "a", "", "b");
	assert_wordexp("a\"$TEST\" b", 2, "a", "b");
	assert_wordexp("a\"$TEST\"b", 1, "ab");
	assert_wordexp("a\"\\$TEST\"b", 1, "a$TESTb");
	assert_wordexp("a'$TEST'b", 1, "a$TESTb");
	assert_wordexp("a ${TEST} b", 2, "a", "b");
	assert_wordexp("a \"${TEST}\" b", 3, "a", "", "b");
	assert_wordexp("a\"${TEST}\" b", 2, "a", "b");
	assert_wordexp("a\"${TEST}\"b", 1, "ab");
	ISnull(getenv("TEST"));
	assert_wordexp("a ${TEST=42} b", 3, "a", "42", "b");
	ISnonnull(getenv("TEST"));
	EQstr("42", getenv("TEST"));
	assert_wordexp("a ${TEST} b", 3, "a", "42", "b");
	assert_wordexp("a \"${TEST}\" b", 3, "a", "42", "b");
	assert_wordexp("a\"${TEST}\" b", 2, "a42", "b");
	assert_wordexp("a\"${TEST}\"b", 1, "a42b");
	unsetenv("TEST");

	/* Test arithmetic */
	assert_wordexp("$((10 + 20))", 1, "30");
	assert_wordexp("\"$((10 + 20))\"", 1, "30");
	assert_wordexp("$((10 * 20))", 1, "200");
	assert_wordexp("$[10 + 20]", 1, "30");
	assert_wordexp("\"$[10 + 20]\"", 1, "30");
	assert_wordexp("$[10 * 20]", 1, "200");
	assert_wordexp("$[10 + 20 * 30]", 1, "610");
	assert_wordexp("$[20 * 30 + 10]", 1, "610");
	assert_wordexp("$[20 * (30 + 10)]", 1, "800");

	/* Test KOS extensions to expression parsing */
	assert_wordexp("$[1 ? 42 : 10]", 1, "42");
	assert_wordexp("$[0 ? 42 : 10]", 1, "10");
	assert_wordexp("$[42 ?: 10]", 1, "42");
	assert_wordexp("$[0 ?: 10]", 1, "10");
	assert_wordexp("$[42 ?: (10/0)]", 1, "42"); /* Important: divide-by-zero doesn't trigger in dead branches */
	assert_wordexp("$[42 ?: (10 / 0)]", 1, "42");
	assert_wordexp("$[42 ?: 10/0]", 1, "42");
	assert_wordexp("$[42 ?: 10 / 0]", 1, "42");
	assert_wordexp("$[0 ?: 10]", 1, "10");
	assert_wordexp("$[0 ?(10/0): 10]", 1, "10");
	assert_wordexp("$[0 ? (10/0) : 10]", 1, "10");
	assert_wordexp("$[0 ? 10/0 : 10]", 1, "10");
	assert_wordexp("$[0 ? 10 / 0 : 10]", 1, "10");
	assert_wordexp("$[10 == 20]", 1, "0");
	assert_wordexp("$[10 != 20]", 1, "1");
	assert_wordexp("$[10 < 20]", 1, "1");
	assert_wordexp("$[10 <= 20]", 1, "1");
	assert_wordexp("$[20 < 20]", 1, "0");
	assert_wordexp("$[20 <= 20]", 1, "1");
	assert_wordexp("$[10 > 20]", 1, "0");
	assert_wordexp("$[10 >= 20]", 1, "0");
	assert_wordexp("$[20 > 20]", 1, "0");
	assert_wordexp("$[20 >= 20]", 1, "1");
	assert_wordexp("$[16 % 6]", 1, "4");
	assert_wordexp("$[17 % 6]", 1, "5");
	assert_wordexp("$[18 % 6]", 1, "0");

	/* Also test arithmetic expressions containing environ references. */
	setenv("FIRST", "10", 1);
	setenv("SECOND", "42", 1);
	assert_wordexp("$FIRST", 1, "10");
	assert_wordexp("$SECOND", 1, "42");
	assert_wordexp("\"$FIRST\"", 1, "10");
	assert_wordexp("\"$SECOND\"", 1, "42");
	assert_wordexp("$[$FIRST + $SECOND]", 1, "52");
	assert_wordexp("\"$[$FIRST + $SECOND]\"", 1, "52");
	assert_wordexp("\"$[($FIRST) + ($SECOND)]\"", 1, "52");
	assert_wordexp("\"$[(($FIRST) + ($SECOND))]\"", 1, "52");
	assert_wordexp("$(($FIRST + $SECOND))", 1, "52");
	assert_wordexp("\"$(($FIRST + $SECOND))\"", 1, "52");
	assert_wordexp("\"$((($FIRST) + ($SECOND)))\"", 1, "52");
	assert_wordexp("\"$(((($FIRST) + ($SECOND))))\"", 1, "52");
	/* KOS extension: Variables should also be expanded if not preceded by a '$' */
	assert_wordexp("$[FIRST + SECOND]", 1, "52");
	assert_wordexp("\"$[FIRST + SECOND]\"", 1, "52");
	assert_wordexp("\"$[(FIRST) + (SECOND)]\"", 1, "52");
	assert_wordexp("\"$[((FIRST) + (SECOND))]\"", 1, "52");
	unsetenv("FIRST");
	unsetenv("SECOND");

	/* KOS extension: Variable assignment in math expressions. */
	unsetenv("FOO");
	ISnull(getenv("FOO"));
	assert_wordexp("$[FOO=42]", 1, "42");
	ISnonnull(getenv("FOO"));
	EQstr("42", getenv("FOO"));
	assert_wordexp("$[FOO++]", 1, "42");
	ISnonnull(getenv("FOO"));
	EQstr("43", getenv("FOO"));
	assert_wordexp("$[++FOO]", 1, "44");
	ISnonnull(getenv("FOO"));
	EQstr("44", getenv("FOO"));
	unsetenv("FOO");

	/* Test bash-style (and 100% bash-compatible) substring expansion. */
	setenv("FOO", "TestString", 1);
	assert_wordexp("${FOO:1}", 1, "estString");
	assert_wordexp("${FOO:1:}", 0);
	assert_wordexp("\"${FOO:1:}\"", 1, "");
	assert_wordexp("${FOO:1:3}", 1, "est");
	assert_wordexp("${FOO::1}", 1, "T");
	assert_wordexp("${FOO:3}", 1, "tString");
	assert_wordexp("${FOO:3:2}", 1, "tS");
	assert_wordexp("${FOO::-1}", 1, "TestStrin");
	assert_wordexp("${FOO::-2}", 1, "TestStri");
	assert_wordexp("${FOO:1:-1}", 1, "estStrin");
	assert_wordexp("${FOO:2:-2}", 1, "stStri");
	assert_wordexp("${FOO:(-6):-2}", 1, "Stri");
	assert_wordexp("${FOO:(-6):-1}", 1, "Strin");
	assert_wordexp("${FOO:(-6)}", 1, "String");
	assert_wordexp("${FOO:(-6):1}", 1, "S");
	assert_wordexp("${FOO:(-6):2}", 1, "St");
	assert_wordexp("${FOO:(-7):-2}", 1, "tStri");
	assert_wordexp("${FOO:(-7):-1}", 1, "tStrin");
	assert_wordexp("${FOO:(-7)}", 1, "tString");
	assert_wordexp("${FOO:(-7):1}", 1, "t");
	assert_wordexp("${FOO:(-7):2}", 1, "tS");
	assert_wordexp("${FOO:(-10):-2}", 1, "TestStri");
	assert_wordexp("${FOO:(-10):-1}", 1, "TestStrin");
	assert_wordexp("${FOO:(-10)}", 1, "TestString");
	assert_wordexp("${FOO:(-10):1}", 1, "T");
	assert_wordexp("${FOO:(-10):2}", 1, "Te");
	assert_wordexp("${FOO:(-11):-2}", 0);
	assert_wordexp("${FOO:(-11):-1}", 0);
	assert_wordexp("${FOO:(-11)}", 0);
	assert_wordexp("${FOO:(-11):1}", 0);
	assert_wordexp("${FOO:(-11):2}", 0);
	assert_wordexp("\"${FOO:(-11):-2}\"", 1, "");
	assert_wordexp("\"${FOO:(-11):-1}\"", 1, "");
	assert_wordexp("\"${FOO:(-11)}\"", 1, "");
	assert_wordexp("\"${FOO:(-11):1}\"", 1, "");
	assert_wordexp("\"${FOO:(-11):2}\"", 1, "");
	unsetenv("FOO");

	/* Assert that unquoted variable expansion works when using a custom $IFS */
	setenv("IFS", ", \t\r\n", 1);
	setenv("VAR", "foo, bar, baz", 1);
	assert_wordexp("$VAR", 3, "foo", "bar", "baz");
	setenv("VAR", "foo, bar ,,   baz", 1);
	assert_wordexp("$VAR", 4, "foo", "bar", "", "baz");
	/* Unquoted  program output must also be subjegated  to $IFS, but in our impl
	 * that system has its own processing engine (because program output must  be
	 * processed chunk-wise, rather than all at once like we can with variables).
	 * As such, also test $IFS splitting for that case! */
	assert_wordexp("`echo \"$VAR\"`", 4, "foo", "bar", "", "baz");
	unsetenv("VAR");
	unsetenv("IFS");


	/* Finally, test invocation of external programs. */
	assert_wordexp("`echo hi there`", 2, "hi", "there");
	assert_wordexp("$(echo hi there)", 2, "hi", "there");
	assert_wordexp("\"`echo hi there`\"", 1, "hi there");
	assert_wordexp("\"$(echo hi there)\"", 1, "hi there");
}


DECL_END

#endif /* !GUARD_LIBC_LIBC_WORDEXP_CTEST */
