/* Copyright (c) 2019-2022 Griefer@Work                                       *
 *                                                                            *
 * This software is provided 'as-is', without any express or implied          *
 * warranty. In no event will the authors be held liable for any damages      *
 * arising from the use of this software.                                     *
 *                                                                            *
 * Permission is granted to anyone to use this software for any purpose,      *
 * including commercial applications, and to alter it and redistribute it     *
 * freely, subject to the following restrictions:                             *
 *                                                                            *
 * 1. The origin of this software must not be misrepresented; you must not    *
 *    claim that you wrote the original software. If you use this software    *
 *    in a product, an acknowledgement (see the following) in the product     *
 *    documentation is required:                                              *
 *    Portions Copyright (c) 2019-2022 Griefer@Work                           *
 * 2. Altered source versions must be plainly marked as such, and must not be *
 *    misrepresented as being the original software.                          *
 * 3. This notice may not be removed or altered from any source distribution. *
 */
#ifndef GUARD_LIBC_LIBC_EXCEPT_CTEST
#define GUARD_LIBC_LIBC_EXCEPT_CTEST 1
#define _KOS_SOURCE 1
#undef NDEBUG

#include <hybrid/compiler.h>

#include <kos/except.h>
#include <kos/types.h>
#include <system-test/ctest.h>

#include <assert.h>
#include <stddef.h>
#include <string.h>

DECL_BEGIN


static int volatile x = 77;
static int volatile *volatile p = (int volatile *)0x1234;

PRIVATE ATTR_NOINLINE void cause_segfault() {
	*p = x;
}

DEFINE_TEST(kernel_exceptions_function_correctly_with_cxx_handlers) {
	bool volatile reached_before = false;
	bool volatile reached_after = false;
	bool volatile reached_inner = false;
	bool volatile reached_outer = false;
	assert(except_code() == EXCEPT_CODEOF(E_OK)); /* No exception thrown */
	try {
		try {
			reached_before = true;
			cause_segfault();
			reached_after = true;  /* NOT REACHABLE! (asserted below) */
		} catch (...) {
			reached_inner = true;
			assertf(except_code() == EXCEPT_CODEOF(E_SEGFAULT_UNMAPPED),
			        "except_code() = %#" PRIxN(__SIZEOF_EXCEPT_CODE_T__), except_code());
			throw; /* Rethrow the exception */
		}
	} catch (...) {
		reached_outer = true;
		assertf(except_code() == EXCEPT_CODEOF(E_SEGFAULT_UNMAPPED),
		        "except_code() = %#" PRIxN(__SIZEOF_EXCEPT_CODE_T__), except_code());
		assertf((void *)except_data()->e_args.e_segfault.s_addr == (void *)p,
		        "except_data()->e_args.e_segfault.s_addr = %p\n",
		        "p                                      = %p\n",
		        except_data()->e_args.e_segfault.s_addr, p);
#ifdef E_SEGFAULT_CONTEXT_FAULT
		assert(except_data()->e_args.e_segfault.s_context & E_SEGFAULT_CONTEXT_FAULT);
#endif /* E_SEGFAULT_CONTEXT_FAULT */
#ifdef E_SEGFAULT_CONTEXT_WRITING
		assert(except_data()->e_args.e_segfault.s_context & E_SEGFAULT_CONTEXT_WRITING);
#endif /* E_SEGFAULT_CONTEXT_WRITING */
#ifdef E_SEGFAULT_CONTEXT_USERCODE
		assert(except_data()->e_args.e_segfault.s_context & E_SEGFAULT_CONTEXT_USERCODE);
#endif /* E_SEGFAULT_CONTEXT_USERCODE */
#ifdef E_SEGFAULT_CONTEXT_NONCANON
		assert(!(except_data()->e_args.e_segfault.s_context & E_SEGFAULT_CONTEXT_NONCANON));
#endif /* E_SEGFAULT_CONTEXT_NONCANON */
#ifdef E_SEGFAULT_CONTEXT_EXEC
		assert(!(except_data()->e_args.e_segfault.s_context & E_SEGFAULT_CONTEXT_EXEC));
#endif /* E_SEGFAULT_CONTEXT_EXEC */
#ifdef E_SEGFAULT_CONTEXT_UNMAP
		assert(!(except_data()->e_args.e_segfault.s_context & E_SEGFAULT_CONTEXT_UNMAP));
#endif /* E_SEGFAULT_CONTEXT_UNMAP */
		/* HINT: This is where the SEGFAULT exception gets cleaned up. */
	}
	assert(except_code() == EXCEPT_CODEOF(E_OK)); /* No exception thrown (any more) */
	assert(reached_before);
	assert(!reached_after);
	assert(reached_inner);
	assert(reached_outer);

	/* Also make sure that `except_name()' works correctly. */
	EQstr(except_name(EXCEPT_CODEOF(E_OK)), /*                                */ "E_OK");
	EQstr(except_name(EXCEPT_CODEOF(E_BADALLOC)), /*                          */ "E_BADALLOC");
	EQstr(except_name(EXCEPT_CODEOF(E_BADALLOC_INSUFFICIENT_SWAP_SPACE)), /*  */ "E_BADALLOC_INSUFFICIENT_SWAP_SPACE");
	EQstr(except_name(EXCEPT_CODEOF(E_INVALID_HANDLE)), /*                    */ "E_INVALID_HANDLE");
	EQstr(except_name(EXCEPT_CODEOF(E_INVALID_HANDLE_NET_OPERATION)), /*      */ "E_INVALID_HANDLE_NET_OPERATION");
	EQstr(except_name(EXCEPT_CODEOF(E_FSERROR)), /*                           */ "E_FSERROR");
	EQstr(except_name(EXCEPT_CODEOF(E_FSERROR_DELETED)), /*                   */ "E_FSERROR_DELETED");
	EQstr(except_name(EXCEPT_CODEOF(E_FSERROR_IS_A_MOUNTING_POINT)), /*       */ "E_FSERROR_IS_A_MOUNTING_POINT");
	EQstr(except_name(EXCEPT_CODEOF(E_FSERROR_UNSUPPORTED_OPERATION)), /*     */ "E_FSERROR_UNSUPPORTED_OPERATION");
	EQstr(except_name(EXCEPT_CODEOF(E_NET_ERROR)), /*                         */ "E_NET_ERROR");
	EQstr(except_name(EXCEPT_CODEOF(E_NET_HOST_UNREACHABLE)), /*              */ "E_NET_HOST_UNREACHABLE");
	EQstr(except_name(EXCEPT_CODEOF(E_NOT_EXECUTABLE_NOT_A_BINARY)), /*       */ "E_NOT_EXECUTABLE_NOT_A_BINARY");
	EQstr(except_name(EXCEPT_CODEOF(E_INSUFFICIENT_RIGHTS)), /*               */ "E_INSUFFICIENT_RIGHTS");
	EQstr(except_name(EXCEPT_CODEOF(E_BUFFER_TOO_SMALL)), /*                  */ "E_BUFFER_TOO_SMALL");
	EQstr(except_name(EXCEPT_CODEOF(E_INTERRUPT)), /*                         */ "E_INTERRUPT");
	EQstr(except_name(EXCEPT_CODEOF(E_EXIT_THREAD)), /*                       */ "E_EXIT_THREAD");
	EQstr(except_name(EXCEPT_CODEOF(E_EXIT_PROCESS)), /*                      */ "E_EXIT_PROCESS");
	EQstr(except_name(EXCEPT_CODEOF(E_UNHANDLED_INTERRUPT)), /*               */ "E_UNHANDLED_INTERRUPT");
	EQstr(except_name(EXCEPT_CODEOF(E_SEGFAULT)), /*                          */ "E_SEGFAULT");
	EQstr(except_name(EXCEPT_CODEOF(E_SEGFAULT_UNMAPPED)), /*                 */ "E_SEGFAULT_UNMAPPED");
	EQstr(except_name(EXCEPT_CODEOF(E_BREAKPOINT)), /*                        */ "E_BREAKPOINT");
	EQstr(except_name(EXCEPT_CODEOF(E_DIVIDE_BY_ZERO)), /*                    */ "E_DIVIDE_BY_ZERO");
	EQstr(except_name(EXCEPT_CODEOF(E_OVERFLOW)), /*                          */ "E_OVERFLOW");
	EQstr(except_name(EXCEPT_CODEOF(E_ILLEGAL_INSTRUCTION)), /*               */ "E_ILLEGAL_INSTRUCTION");
	EQstr(except_name(EXCEPT_CODEOF(E_ILLEGAL_INSTRUCTION_BAD_OPERAND)), /*   */ "E_ILLEGAL_INSTRUCTION_BAD_OPERAND");
#ifdef E_ILLEGAL_INSTRUCTION_X86_BAD_PREFIX
	EQstr(except_name(EXCEPT_CODEOF(E_ILLEGAL_INSTRUCTION_X86_BAD_PREFIX)), /**/ "E_ILLEGAL_INSTRUCTION_X86_BAD_PREFIX");
#endif /* E_ILLEGAL_INSTRUCTION_X86_BAD_PREFIX */
#ifdef E_ILLEGAL_INSTRUCTION_X86_INTERRUPT
	EQstr(except_name(EXCEPT_CODEOF(E_ILLEGAL_INSTRUCTION_X86_INTERRUPT)), /* */ "E_ILLEGAL_INSTRUCTION_X86_INTERRUPT");
#endif /* E_ILLEGAL_INSTRUCTION_X86_INTERRUPT */
	EQstr(except_name(EXCEPT_CODEOF(E_ILLEGAL_INSTRUCTION_REGISTER)), /*      */ "E_ILLEGAL_INSTRUCTION_REGISTER");
	EQstr(except_name(EXCEPT_CODEOF(E_STACK_OVERFLOW)), /*                    */ "E_STACK_OVERFLOW");
	EQstr(except_name(EXCEPT_CODEOF(E_INDEX_ERROR)), /*                       */ "E_INDEX_ERROR");
	EQstr(except_name(EXCEPT_CODEOF(E_INDEX_ERROR_OUT_OF_BOUNDS)), /*         */ "E_INDEX_ERROR_OUT_OF_BOUNDS");
}


DECL_END

#endif /* !GUARD_LIBC_LIBC_EXCEPT_CTEST */
