/* Copyright (c) 2019-2025 Griefer@Work                                       *
 *                                                                            *
 * This software is provided 'as-is', without any express or implied          *
 * warranty. In no event will the authors be held liable for any damages      *
 * arising from the use of this software.                                     *
 *                                                                            *
 * Permission is granted to anyone to use this software for any purpose,      *
 * including commercial applications, and to alter it and redistribute it     *
 * freely, subject to the following restrictions:                             *
 *                                                                            *
 * 1. The origin of this software must not be misrepresented; you must not    *
 *    claim that you wrote the original software. If you use this software    *
 *    in a product, an acknowledgement (see the following) in the product     *
 *    documentation is required:                                              *
 *    Portions Copyright (c) 2019-2025 Griefer@Work                           *
 * 2. Altered source versions must be plainly marked as such, and must not be *
 *    misrepresented as being the original software.                          *
 * 3. This notice may not be removed or altered from any source distribution. *
 */
#ifndef GUARD_LIBC_LIBC_EXCEPT_CTEST
#define GUARD_LIBC_LIBC_EXCEPT_CTEST 1
#define _KOS_SOURCE 1
#undef NDEBUG

#include <hybrid/compiler.h>

#include <kos/except.h>
#include <kos/types.h>
#include <system-test/ctest.h>

#include <assert.h>
#include <stddef.h>
#include <string.h>

DECL_BEGIN


static int volatile x = 77;
static int volatile *volatile p = (int volatile *)0x1234;

PRIVATE ATTR_NOINLINE void cause_segfault() {
	*p = x;
}

DEFINE_TEST(kernel_exceptions_function_correctly_with_cxx_handlers) {
	bool volatile reached_before = false;
	bool volatile reached_after = false;
	bool volatile reached_inner = false;
	bool volatile reached_outer = false;
	EQ(EXCEPT_CODEOF(E_OK), except_code()); /* No exception thrown */
	try {
		try {
			reached_before = true;
			cause_segfault();
			reached_after = true;  /* NOT REACHABLE! (asserted below) */
		} catch (...) {
			reached_inner = true;
			EQ(EXCEPT_CODEOF(E_SEGFAULT_UNMAPPED), except_code());
			throw; /* Rethrow the exception */
		}
	} catch (...) {
		reached_outer = true;
		EQ(EXCEPT_CODEOF(E_SEGFAULT_UNMAPPED), except_code());
		EQ((void *)p, (void *)except_data()->e_args.e_segfault.s_addr);
#ifdef E_SEGFAULT_CONTEXT_FAULT
		ISbiton(E_SEGFAULT_CONTEXT_FAULT, except_data()->e_args.e_segfault.s_context);
#endif /* E_SEGFAULT_CONTEXT_FAULT */
#ifdef E_SEGFAULT_CONTEXT_WRITING
		ISbiton(E_SEGFAULT_CONTEXT_WRITING, except_data()->e_args.e_segfault.s_context);
#endif /* E_SEGFAULT_CONTEXT_WRITING */
#ifdef E_SEGFAULT_CONTEXT_USERCODE
		ISbiton(E_SEGFAULT_CONTEXT_USERCODE, except_data()->e_args.e_segfault.s_context);
#endif /* E_SEGFAULT_CONTEXT_USERCODE */
#ifdef E_SEGFAULT_CONTEXT_NONCANON
		ISbitoff(E_SEGFAULT_CONTEXT_NONCANON, except_data()->e_args.e_segfault.s_context);
#endif /* E_SEGFAULT_CONTEXT_NONCANON */
#ifdef E_SEGFAULT_CONTEXT_EXEC
		ISbitoff(E_SEGFAULT_CONTEXT_EXEC, except_data()->e_args.e_segfault.s_context);
#endif /* E_SEGFAULT_CONTEXT_EXEC */
#ifdef E_SEGFAULT_CONTEXT_UNMAP
		ISbitoff(E_SEGFAULT_CONTEXT_UNMAP, except_data()->e_args.e_segfault.s_context);
#endif /* E_SEGFAULT_CONTEXT_UNMAP */
		/* HINT: This is where the SEGFAULT exception gets cleaned up. */
	}
	EQ(EXCEPT_CODEOF(E_OK), except_code()); /* No exception thrown (any more) */
	assert(reached_before);
	assert(!reached_after);
	assert(reached_inner);
	assert(reached_outer);

	/* Also make sure that `except_name()' works correctly. */
	EQstr("E_OK" /*                                */, except_name(EXCEPT_CODEOF(E_OK)));
	EQstr("E_BADALLOC" /*                          */, except_name(EXCEPT_CODEOF(E_BADALLOC)));
	EQstr("E_BADALLOC_INSUFFICIENT_SWAP_SPACE" /*  */, except_name(EXCEPT_CODEOF(E_BADALLOC_INSUFFICIENT_SWAP_SPACE)));
	EQstr("E_INVALID_HANDLE" /*                    */, except_name(EXCEPT_CODEOF(E_INVALID_HANDLE)));
	EQstr("E_INVALID_HANDLE_NET_OPERATION" /*      */, except_name(EXCEPT_CODEOF(E_INVALID_HANDLE_NET_OPERATION)));
	EQstr("E_FSERROR" /*                           */, except_name(EXCEPT_CODEOF(E_FSERROR)));
	EQstr("E_FSERROR_DELETED" /*                   */, except_name(EXCEPT_CODEOF(E_FSERROR_DELETED)));
	EQstr("E_FSERROR_IS_A_MOUNTING_POINT" /*       */, except_name(EXCEPT_CODEOF(E_FSERROR_IS_A_MOUNTING_POINT)));
	EQstr("E_FSERROR_UNSUPPORTED_OPERATION" /*     */, except_name(EXCEPT_CODEOF(E_FSERROR_UNSUPPORTED_OPERATION)));
	EQstr("E_NET_ERROR" /*                         */, except_name(EXCEPT_CODEOF(E_NET_ERROR)));
	EQstr("E_NET_HOST_UNREACHABLE" /*              */, except_name(EXCEPT_CODEOF(E_NET_HOST_UNREACHABLE)));
	EQstr("E_NOT_EXECUTABLE_NOT_A_BINARY" /*       */, except_name(EXCEPT_CODEOF(E_NOT_EXECUTABLE_NOT_A_BINARY)));
	EQstr("E_INSUFFICIENT_RIGHTS" /*               */, except_name(EXCEPT_CODEOF(E_INSUFFICIENT_RIGHTS)));
	EQstr("E_BUFFER_TOO_SMALL" /*                  */, except_name(EXCEPT_CODEOF(E_BUFFER_TOO_SMALL)));
	EQstr("E_INTERRUPT" /*                         */, except_name(EXCEPT_CODEOF(E_INTERRUPT)));
	EQstr("E_EXIT_THREAD" /*                       */, except_name(EXCEPT_CODEOF(E_EXIT_THREAD)));
	EQstr("E_EXIT_PROCESS" /*                      */, except_name(EXCEPT_CODEOF(E_EXIT_PROCESS)));
	EQstr("E_UNHANDLED_INTERRUPT" /*               */, except_name(EXCEPT_CODEOF(E_UNHANDLED_INTERRUPT)));
	EQstr("E_SEGFAULT" /*                          */, except_name(EXCEPT_CODEOF(E_SEGFAULT)));
	EQstr("E_SEGFAULT_UNMAPPED" /*                 */, except_name(EXCEPT_CODEOF(E_SEGFAULT_UNMAPPED)));
	EQstr("E_BREAKPOINT" /*                        */, except_name(EXCEPT_CODEOF(E_BREAKPOINT)));
	EQstr("E_DIVIDE_BY_ZERO" /*                    */, except_name(EXCEPT_CODEOF(E_DIVIDE_BY_ZERO)));
	EQstr("E_OVERFLOW" /*                          */, except_name(EXCEPT_CODEOF(E_OVERFLOW)));
	EQstr("E_ILLEGAL_INSTRUCTION" /*               */, except_name(EXCEPT_CODEOF(E_ILLEGAL_INSTRUCTION)));
	EQstr("E_ILLEGAL_INSTRUCTION_BAD_OPERAND" /*   */, except_name(EXCEPT_CODEOF(E_ILLEGAL_INSTRUCTION_BAD_OPERAND)));
#ifdef E_ILLEGAL_INSTRUCTION_X86_BAD_PREFIX
	EQstr("E_ILLEGAL_INSTRUCTION_X86_BAD_PREFIX" /**/, except_name(EXCEPT_CODEOF(E_ILLEGAL_INSTRUCTION_X86_BAD_PREFIX)));
#endif /* E_ILLEGAL_INSTRUCTION_X86_BAD_PREFIX */
#ifdef E_ILLEGAL_INSTRUCTION_X86_INTERRUPT
	EQstr("E_ILLEGAL_INSTRUCTION_X86_INTERRUPT" /* */, except_name(EXCEPT_CODEOF(E_ILLEGAL_INSTRUCTION_X86_INTERRUPT)));
#endif /* E_ILLEGAL_INSTRUCTION_X86_INTERRUPT */
	EQstr("E_ILLEGAL_INSTRUCTION_REGISTER" /*      */, except_name(EXCEPT_CODEOF(E_ILLEGAL_INSTRUCTION_REGISTER)));
	EQstr("E_STACK_OVERFLOW" /*                    */, except_name(EXCEPT_CODEOF(E_STACK_OVERFLOW)));
	EQstr("E_INDEX_ERROR" /*                       */, except_name(EXCEPT_CODEOF(E_INDEX_ERROR)));
	EQstr("E_INDEX_ERROR_OUT_OF_BOUNDS" /*         */, except_name(EXCEPT_CODEOF(E_INDEX_ERROR_OUT_OF_BOUNDS)));
}


PRIVATE int filtered_catch_exception_impl(except_code_t code) {
	TRY {
		except_thrown(code, 1, 42);
	} CATCH (E_BADALLOC, e) {
		return e.ba_insufficient_heap_memory.ihm_num_bytes;
	} CATCH (E_INVALID_ARGUMENT_BAD_VALUE) {
		return -2;
	} CATCH (E_INVALID_ARGUMENT) {
		return -1;
	} CATCH (E_INVALID_ARGUMENT_UNKNOWN_COMMAND) {
		return -98;
	}
	return -99;
}

DEFINE_TEST(filtered_catch_exception) {
	EQ(42, filtered_catch_exception_impl(EXCEPT_CODEOF(E_BADALLOC_INSUFFICIENT_HEAP_MEMORY)));
	EQ(-2, filtered_catch_exception_impl(EXCEPT_CODEOF(E_INVALID_ARGUMENT_BAD_VALUE)));
	EQ(-1, filtered_catch_exception_impl(EXCEPT_CODEOF(E_INVALID_ARGUMENT_UNKNOWN_COMMAND)));
}

DECL_END

#endif /* !GUARD_LIBC_LIBC_EXCEPT_CTEST */
