/* Copyright (c) 2019-2025 Griefer@Work                                       *
 *                                                                            *
 * This software is provided 'as-is', without any express or implied          *
 * warranty. In no event will the authors be held liable for any damages      *
 * arising from the use of this software.                                     *
 *                                                                            *
 * Permission is granted to anyone to use this software for any purpose,      *
 * including commercial applications, and to alter it and redistribute it     *
 * freely, subject to the following restrictions:                             *
 *                                                                            *
 * 1. The origin of this software must not be misrepresented; you must not    *
 *    claim that you wrote the original software. If you use this software    *
 *    in a product, an acknowledgement (see the following) in the product     *
 *    documentation is required:                                              *
 *    Portions Copyright (c) 2019-2025 Griefer@Work                           *
 * 2. Altered source versions must be plainly marked as such, and must not be *
 *    misrepresented as being the original software.                          *
 * 3. This notice may not be removed or altered from any source distribution. *
 */
#ifndef GUARD_LIBC_LIBC_UNICODE_CTEST
#define GUARD_LIBC_LIBC_UNICODE_CTEST 1
#define _KOS_SOURCE 1
#undef NDEBUG

#include <hybrid/compiler.h>

#include <system-test/ctest.h>

#include <uchar.h>
#include <unicode.h>

DECL_BEGIN

DEFINE_TEST(unicode) {
	char32_t wc;
	mbstate_t mbs;
	PRIVATE unsigned char const data[] = { 0xe2, 0x99, 0xa0, 7, 8, 9 };
	mbstate_init(&mbs);
	EQ((size_t)-2, unicode_c8toc32(&wc, (char *)data, 0, &mbs)); /* Incomplete */

	mbstate_init(&mbs);
	EQ((size_t)-2, unicode_c8toc32(&wc, (char *)data, 1, &mbs)); /* Incomplete */

	mbstate_init(&mbs);
	EQ((size_t)-2, unicode_c8toc32(&wc, (char *)data, 2, &mbs)); /* Incomplete */

	mbstate_init(&mbs);
	EQ(3, unicode_c8toc32(&wc, (char *)data, 3, &mbs));
	EQ(0x2660, wc);

	mbstate_init(&mbs);
	EQ(3, unicode_c8toc32(&wc, (char *)data, 6, &mbs));
	EQ(0x2660, wc);
}


DECL_END

#endif /* !GUARD_LIBC_LIBC_UNICODE_CTEST */
