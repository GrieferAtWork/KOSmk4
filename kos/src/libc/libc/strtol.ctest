/* Copyright (c) 2019-2022 Griefer@Work                                       *
 *                                                                            *
 * This software is provided 'as-is', without any express or implied          *
 * warranty. In no event will the authors be held liable for any damages      *
 * arising from the use of this software.                                     *
 *                                                                            *
 * Permission is granted to anyone to use this software for any purpose,      *
 * including commercial applications, and to alter it and redistribute it     *
 * freely, subject to the following restrictions:                             *
 *                                                                            *
 * 1. The origin of this software must not be misrepresented; you must not    *
 *    claim that you wrote the original software. If you use this software    *
 *    in a product, an acknowledgement (see the following) in the product     *
 *    documentation is required:                                              *
 *    Portions Copyright (c) 2019-2022 Griefer@Work                           *
 * 2. Altered source versions must be plainly marked as such, and must not be *
 *    misrepresented as being the original software.                          *
 * 3. This notice may not be removed or altered from any source distribution. *
 */
#ifndef GUARD_LIBC_LIBC_STRTOL_CTEST
#define GUARD_LIBC_LIBC_STRTOL_CTEST 1
#undef NDEBUG
#define _KOS_SOURCE 1
#define _DOS_SOURCE 1

/**/
#include <hybrid/compiler.h>

#include <kos/types.h>
#include <system-test/ctest.h>

#include <assert.h>
#include <errno.h>
#include <limits.h>
#include <stdint.h>
#include <stdlib.h>
#include <string.h>

DECL_BEGIN

PRIVATE void do_test(int variant) {
	errno_t error;
	int64_t value;
	char const *str, *endp;
	errno = 0;
#define DO_STRTOI(str, endp, radix, p_error)                                                     \
	(variant == 0                                                                                \
	 ? (int64_t)strto32_r(str, endp, radix, p_error)                                             \
	 : variant == 1                                                                              \
	   ? (int64_t)strto64_r(str, endp, radix, p_error)                                           \
	   : variant == 2                                                                            \
	     ? (int64_t)strtou32_r(str, endp, radix, p_error)                                        \
	     : variant == 3                                                                          \
	       ? (int64_t)strtou64_r(str, endp, radix, p_error)                                      \
	       : variant == 4                                                                        \
	         ? ({ int64_t _v = (int64_t)strto32(str, endp, radix); *p_error = errno; _v; })      \
	         : variant == 5                                                                      \
	           ? ({ int64_t _v = (int64_t)strto64(str, endp, radix); *p_error = errno; _v; })    \
	           : variant == 6                                                                    \
	             ? ({ int64_t _v = (int64_t)strtou32(str, endp, radix); *p_error = errno; _v; }) \
	             : ({ int64_t _v = (int64_t)strtou64(str, endp, radix); *p_error = errno; _v; }))
#define DO_TEST(string, radix, ival, endp_offset)          \
	str   = string;                                        \
	value = DO_STRTOI(str, (char **)&endp, radix, &error); \
	EQ(ival, value);                                       \
	EQ(0, error);                                          \
	EQ(str + endp_offset, endp);

	DO_TEST("42", 0, 42, 2);
	DO_TEST("0x42", 0, 0x42, 4);
	DO_TEST("42", 16, 0x42, 2);
	DO_TEST("0x1s", 0, 0x1, 3);
	DO_TEST("0x1s", 16, 0, 1);
	DO_TEST("0xg", 0, 0, 1);
	DO_TEST("0xg", 16, 0, 1);
	DO_TEST("0bg", 0, 0, 1);
	DO_TEST("0bg", 2, 0, 1);
	DO_TEST("0b1g", 0, 1, 3);
	DO_TEST("0b1g", 2, 0, 1);
	DO_TEST("    42", 0, 42, 4 + 2);
	DO_TEST("    0x42", 0, 0x42, 4 + 4);
	DO_TEST("    42", 16, 0x42, 4 + 2);
	DO_TEST("    0x1s", 0, 0x1, 4 + 3);
	DO_TEST("    0x1s", 16, 0, 4 + 1);
	DO_TEST("    0xg", 0, 0, 4 + 1);
	DO_TEST("    0xg", 16, 0, 4 + 1);
	DO_TEST("    0bg", 0, 0, 4 + 1);
	DO_TEST("    0bg", 2, 0, 4 + 1);
	DO_TEST("    0b1g", 0, 1, 4 + 3);
	DO_TEST("    0b1g", 2, 0, 4 + 1);
#undef DO_TEST
#undef DO_STRTOI
}

DEFINE_TEST(strtol) {
	do_test(0);
	do_test(1);
	do_test(2);
	do_test(3);
	do_test(4);
	do_test(5);
	do_test(6);
	do_test(7);

#define ASSERT_CORRECT_INTxx_MIN(n, INTxx_MIN, INTxx_MIN_str, \
                                 len, no_endptr_should_fail)  \
	{                                                         \
		errno_t error;                                        \
		char const *s = INTxx_MIN_str;                        \
		char *endptr;                                         \
		int##n##_t val;                                       \
		val = strto##n##_r(s, &endptr, 0, &error);            \
		EQ(INTxx_MIN, val);                                   \
		EQ(0, error);                                         \
		EQ(endptr, s + len);                                  \
		val = strto##n##_r(s, NULL, 0, &error);               \
		EQ(INTxx_MIN, val);                                   \
		EQ(no_endptr_should_fail ? EINVAL : 0, error);        \
	}
#define ASSERT_ERROR_INTxx_MIN(n, INTxx_MIN_str, len) \
	{                                                 \
		errno_t error;                                \
		char const *s = INTxx_MIN_str;                \
		char *endptr;                                 \
		int##n##_t val;                               \
		val = strto##n##_r(s, &endptr, 0, &error);    \
		EQ(INT##n##_MIN, val);                        \
		EQ(ERANGE, error);                            \
		EQ(endptr, s + len);                          \
		val = strto##n##_r(s, NULL, 0, &error);       \
		EQ(INT##n##_MIN, val);                        \
		EQ(ERANGE, error);                            \
	}

	/* strtol(ltoa(LONG_MIN)) must work correctly */
	ASSERT_CORRECT_INTxx_MIN(64, INT64_MIN, "-9223372036854775808", 20, false);
	ASSERT_CORRECT_INTxx_MIN(64, INT64_MIN, "-9223372036854775808  ", 20, false);
	ASSERT_CORRECT_INTxx_MIN(64, INT64_MIN, "-9223372036854775808END", 20, true);
	ASSERT_CORRECT_INTxx_MIN(32, INT32_MIN, "-2147483648", 11, false);
	ASSERT_CORRECT_INTxx_MIN(32, INT32_MIN, "-2147483648  ", 11, false);
	ASSERT_CORRECT_INTxx_MIN(32, INT32_MIN, "-2147483648END", 11, true);

	/* strtol(ltoa(LONG_MIN))  must break if there are any extra
	 * numbers, even after a number-sequence equal to INTxx_MIN. */
	ASSERT_ERROR_INTxx_MIN(64, "-92233720368547758080", 21);
	ASSERT_ERROR_INTxx_MIN(64, "-92233720368547758081", 21);
	ASSERT_ERROR_INTxx_MIN(64, "-92233720368547758089", 21);
	ASSERT_ERROR_INTxx_MIN(64, "-92233720368547758089", 21);
	ASSERT_ERROR_INTxx_MIN(64, "-92233720368547758089  ", 21);
	ASSERT_ERROR_INTxx_MIN(64, "-92233720368547758089END", 21);
	ASSERT_ERROR_INTxx_MIN(64, "-9223372036854775808987654321", 29);
	ASSERT_ERROR_INTxx_MIN(64, "-9223372036854775808987654321  ", 29);
	ASSERT_ERROR_INTxx_MIN(64, "-9223372036854775808987654321END", 29);
	ASSERT_ERROR_INTxx_MIN(32, "-21474836480", 12);
	ASSERT_ERROR_INTxx_MIN(32, "-21474836481", 12);
	ASSERT_ERROR_INTxx_MIN(32, "-21474836489", 12);
	ASSERT_ERROR_INTxx_MIN(32, "-21474836489", 12);
	ASSERT_ERROR_INTxx_MIN(32, "-21474836489  ", 12);
	ASSERT_ERROR_INTxx_MIN(32, "-21474836489END", 12);
#undef ASSERT_CORRECT_INTxx_MIN
#undef ASSERT_ERROR_INTxx_MIN
}

DECL_END

#endif /* !GUARD_LIBC_LIBC_STRTOL_CTEST */
