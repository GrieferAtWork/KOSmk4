/* Copyright (c) 2019-2021 Griefer@Work                                       *
 *                                                                            *
 * This software is provided 'as-is', without any express or implied          *
 * warranty. In no event will the authors be held liable for any damages      *
 * arising from the use of this software.                                     *
 *                                                                            *
 * Permission is granted to anyone to use this software for any purpose,      *
 * including commercial applications, and to alter it and redistribute it     *
 * freely, subject to the following restrictions:                             *
 *                                                                            *
 * 1. The origin of this software must not be misrepresented; you must not    *
 *    claim that you wrote the original software. If you use this software    *
 *    in a product, an acknowledgement (see the following) in the product     *
 *    documentation is required:                                              *
 *    Portions Copyright (c) 2019-2021 Griefer@Work                           *
 * 2. Altered source versions must be plainly marked as such, and must not be *
 *    misrepresented as being the original software.                          *
 * 3. This notice may not be removed or altered from any source distribution. *
 */
#ifndef GUARD_LIBC_LIBC_CRT_CTEST
#define GUARD_LIBC_LIBC_CRT_CTEST 1

#define _KOS_SOURCE 1
#undef NDEBUG

#include <hybrid/compiler.h>

#include <kos/except.h>
#include <kos/types.h>
#include <system-test/ctest.h>

#include <assert.h>
#include <math.h>
#include <stdio.h>
#include <stdlib.h>

DECL_BEGIN

DEFINE_TEST(strto32_works_correctly) {
	char *p = (char *)"0,3fb";
	uint32_t a, b;
	a = strto32(p, &p, 16);
	assert(*p == ',');
	++p;
	b = strto32(p, &p, 16);
	assert(*p == '\0');
	assert(a == 0);
	assert(b == 0x3fb);
}


DEFINE_TEST(strtod_works_correctly) {
	double a, b;
	char *p = (char *)" 1.0, 1.5";
	ssize_t n;
	n = sscanf(p, "%lf ,%lf", &a, &b);
	assertf(n == 2, "n = %Id", n);
	assertf(fabs(a - 1.0) < 0.01, "a = %f", a);
	assertf(fabs(b - 1.5) < 0.01, "b = %f", b);

	a = strtod(p, &p);
	assertf(fabs(a - 1.0) < 0.01, "a = %f", a);
	assertf(*p == ',', "p = %q", p);
	++p;

	b = strtod(p, &p);
	assertf(fabs(b - 1.5) < 0.01, "b = %f", b);
	assertf(*p == 0, "p = %q", p);
}


DECL_END

#endif /* !GUARD_LIBC_LIBC_CRT_CTEST */
