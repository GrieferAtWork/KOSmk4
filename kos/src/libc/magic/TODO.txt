
Add support for (more) *_chk variants (using __builtin_object_size())

<a.out.h>              (GLibc!)
<argp.h>               (GLibc!)
<bsd/[...].h>          (all of those libbsd headers should be magic-generated and contain `%[insert:extern()]' decls!)
<conio.h>
<corecrt_wstdlib.h>
<cthreads.h>
<fmtmsg.h>             (GLibc!)
<fstab.h>              (GLibc!)
<fp.h>
<gnu-versions.h>       (GLibc!)
<gnu/libc-version.h>   (GLibc!)
<gshadow.h>            (GLibc!)
<iconv.h>              (GLibc!)
<langinfo.h>           (GLibc!)
<libintl.h>            (GLibc!)
<mbctype.h>
<mbstring.h>
<mcheck.h>             (GLibc!)
<mkdev.h>
<nan.h>
<nl_types.h>           (GLibc!)
<obstack.h>            (GLibc!)
<regexp.h>
<resolv.h>             (GLibc!)
<rpc/auth.h>
<rpc/auth_des.h>
<rpc/auth_unix.h>
<rpc/clnt.h>
<rpc/des_crypt.h>
<rpc/pmap_clnt.h>
<rpc/pmap_prot.h>
<rpc/pmap_rmt.h>
<rpc/rpc.h>
<rpc/rpc_des.h>
<rpc/rpc_msg.h>
<rpc/svc.h>
<rpc/svc_auth.h>
<rpc/types.h>
<rpc/xdr.h>
<stab.h>               (GLibc!)
<sys/bsdtypes.h>
<sys/capability.h>     (found in /usr/include/sys/capability.h; aka not in arch-headers!)
<sys/fanotify.h>
<sys/gmon.h>
<sys/gmon_out.h>       (Only some macros, and structs)
<sys/inotify.h>
<sys/kdaemon.h>
<sys/machine.h>
<sys/mtio.h>           (Only some macros, and structs. - Mainly interesting for ioctl() & the kernel)
<sys/personality.h>
<sys/prctl.h>
<sys/profil.h>
<sys/quota.h>
<sys/raw.h>            (Only some macros, and structs. - Mainly interesting for ioctl() & the kernel)
<sys/reg.h>
<sys/sdt.h>
<sys/soundcard.h>
<sys/sysctl.h>
<sys/vlimit.h>
<sys/vtimes.h>
<sysmacros.h>
<timeconv.h>
<thread_db.h>          (GLibc!)
<wordexp.h>            (GLibc!)

### Unlikely to ever be added
<_G_config.h>          (GLibc!)
<gconv.h>              (GLibc!)
<nss.h>                (GLibc!)
<printf.h>             (GLibc!)


Functions/Globals:
	- walkcontext()
	- int ungetchar(int ch)     (same as `ungetc(ch, stdin)')
	- int optreset
	- bsd_getopt()
	- setmode()
	- getmode()
	- humanize_number()
	- dehumanize_number()


TODO: `__CORRECT_ISO_CPP_MATH_H_PROTO' interferes with libstdc++'s autoconf detection...
TODO: libstdc++ doesn't detect `_GLIBCXX_HAVE_LINUX_FUTEX' properly
TODO: libstdc++ doesn't detect `_GLIBCXX_HAVE_MACHINE_ENDIAN_H' properly
TODO: libstdc++ doesn't detect `_GLIBCXX_HAVE_STRERROR_L' properly
TODO: libstdc++ doesn't detect `_GLIBCXX_HAVE_STRXFRM_L' properly
TODO: libstdc++ doesn't detect `_GLIBCXX_USE_SCHED_YIELD' properly
TODO: libstdc++ doesn't detect `_GLIBCXX_USE_NANOSLEEP' properly
TODO: libstdc++ doesn't detect `_GLIBCXX_USE_SENDFILE' properly
TODO: libstdc++ doesn't detect `_GLIBCXX_USE_CLOCK_GETTIME_SYSCALL' properly
TODO: libstdc++ doesn't detect `_GLIBCXX_USE_CLOCK_MONOTONIC' properly
TODO: libstdc++ doesn't detect `_GLIBCXX_USE_CLOCK_REALTIME' properly
TODO: Add support for `_GLIBCXX_HAVE___CXA_THREAD_ATEXIT'
TODO: Add support for `_GLIBCXX_HAVE___CXA_THREAD_ATEXIT_IMPL'


TODO: Expand generate_headers.dee and magic.dee to:
	- Wrap function declarations from auto/foo.c with #if defined(WANT_xxx
		- At the top of the file, a block
		  #ifdef WANT_ALL
		  #define WANT_xxx
		  #endif
		  should exist
		  api.h should then #define WANT_ALL if building the shared library
	- Add listings of recognized WANT_xxx options within seperate files that
	  are generated alongside auto source files
	- When building the static version of libc, read in the option files and
	  compile the master file once for every -DWANT_xxx option found therein,
	  generating a unique object file for every function
	- The result of all of this should be a fairly well-optimized static
	  version of libc (at least as far as automatically generated functions
	  go)
	- Alternatively, generate tiny, seperate source files for every libc-auto
	  function. Those files could then be compiled much faster than the larger
	  combined files, since it'd be possible to directly include only the
	  relevant function dependencies.
