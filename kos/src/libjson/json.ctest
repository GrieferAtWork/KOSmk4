/* Copyright (c) 2019-2020 Griefer@Work                                       *
 *                                                                            *
 * This software is provided 'as-is', without any express or implied          *
 * warranty. In no event will the authors be held liable for any damages      *
 * arising from the use of this software.                                     *
 *                                                                            *
 * Permission is granted to anyone to use this software for any purpose,      *
 * including commercial applications, and to alter it and redistribute it     *
 * freely, subject to the following restrictions:                             *
 *                                                                            *
 * 1. The origin of this software must not be misrepresented; you must not    *
 *    claim that you wrote the original software. If you use this software    *
 *    in a product, an acknowledgement (see the following) in the product     *
 *    documentation is required:                                              *
 *    Portions Copyright (c) 2019-2020 Griefer@Work                           *
 * 2. Altered source versions must be plainly marked as such, and must not be *
 *    misrepresented as being the original software.                          *
 * 3. This notice may not be removed or altered from any source distribution. *
 */
#ifndef GUARD_LIBJSON_JSON_CTEST
#define GUARD_LIBJSON_JSON_CTEST 1
#define _KOS_SOURCE 1
#undef NDEBUG

#include <hybrid/compiler.h>

#include <kos/types.h>
#include <system-test/ctest.h>

#include <assert.h>
#include <dlfcn.h>
#include <format-printer.h>
#include <string.h>

#include <libjson/generator.h>
#include <libjson/parser.h>
#include <libjson/writer.h>


DECL_BEGIN

struct my_struct {
	int   ms_alpha;
	int   ms_beta;
	char *ms_name;
	int   ms_values[8];
};

PRIVATE byte_t const my_struct_codec[] = {
	JGEN_BEGINOBJECT,
		JGEN_FIELD, 'a', 'l', 'p', 'h', 'a', 0, JGEN_INTO, JSON_OFFSETOF(struct my_struct, ms_alpha), JSON_TYPE_INT,
		JGEN_FIELD, 'b', 'e', 't', 'a',      0, JGEN_INTO, JSON_OFFSETOF(struct my_struct, ms_beta), JSON_TYPE_INT,
		JGEN_FIELD, 'n', 'a', 'm', 'e',      0, JGEN_INTO, JSON_OFFSETOF(struct my_struct, ms_name), JSON_TYPE_STRING_OR_NULL,
		JGEN_FIELD, 'v', 'a', 'l', 'u', 'e', 's', 0, JGEN_BEGINARRAY,
			JGEN_INDEX_REP(8, sizeof(int)), JGEN_INTO, JSON_OFFSETOF(struct my_struct, ms_values), JSON_TYPE_INT,
		JGEN_END,
	JGEN_END,
	JGEN_TERM
};

PRIVATE byte_t const my_struct_codec2[] = {
	JGEN_BEGINOBJECT,
		JGEN_FIELD, 'a', 'l', 'p', 'h', 'a', 0, JGEN_INTO, JSON_OFFSETOF(struct my_struct, ms_alpha), JSON_TYPE_INT,
		JGEN_FIELD, 'b', 'e', 't', 'a',      0, JGEN_INTO, JSON_OFFSETOF(struct my_struct, ms_beta), JSON_TYPE_INT,
		JGEN_FIELD, 'n', 'a', 'm', 'e',      0, JGEN_INTO, JSON_OFFSETOF(struct my_struct, ms_name), JSON_TYPE_STRING_OR_NULL,
		JGEN_FIELD, 'v', 'a', 'l', 'u', 'e', 's', 0, JGEN_BEGINARRAY,
			JGEN_INDEX(0), JGEN_INTO, JSON_OFFSETOF(struct my_struct, ms_values[0]), JSON_TYPE_INT,
			JGEN_INDEX(1), JGEN_INTO, JSON_OFFSETOF(struct my_struct, ms_values[1]), JSON_TYPE_INT,
			JGEN_INDEX(2), JGEN_INTO, JSON_OFFSETOF(struct my_struct, ms_values[2]), JSON_TYPE_INT,
			JGEN_INDEX(3), JGEN_INTO, JSON_OFFSETOF(struct my_struct, ms_values[3]), JSON_TYPE_INT,
			JGEN_INDEX(4), JGEN_INTO, JSON_OFFSETOF(struct my_struct, ms_values[4]), JSON_TYPE_INT,
			JGEN_INDEX(5), JGEN_INTO, JSON_OFFSETOF(struct my_struct, ms_values[5]), JSON_TYPE_INT,
			JGEN_INDEX(6), JGEN_INTO, JSON_OFFSETOF(struct my_struct, ms_values[6]), JSON_TYPE_INT,
			JGEN_INDEX(7), JGEN_INTO, JSON_OFFSETOF(struct my_struct, ms_values[7]), JSON_TYPE_INT,
		JGEN_END,
	JGEN_END,
	JGEN_TERM
};

PRIVATE PJSON_PARSER_INIT json_parser_init;
PRIVATE PJSON_DECODE json_decode;
PRIVATE PJSON_ENCODE json_encode;
PRIVATE PJSON_PARSER_ENTEROBJECT json_parser_enterobject;
PRIVATE PJSON_PARSER_ENTERARRAY json_parser_enterarray;
PRIVATE PJSON_PARSER_FINDKEY json_parser_findkey;
PRIVATE PJSON_PARSER_FINDINDEX json_parser_findindex;
PRIVATE PJSON_PARSER_GETNUMBER json_parser_getnumber;

PRIVATE void do_test_codec(byte_t const *codec) {
	char json_input[] =
	" /* leading comment */ {"
	"\"beta\":20, /* The value of *beta* */"
	"\"alpha\":10/* The value of *alpha**/,"
	"\"name\":\"This is\\n my /*name*/\","
	"\"values\"/*a*/:/*b*/[/*c*/1/*d*/,/*e*/2,4,8,16,32,64,128/*e*/]/*f*/"
	"}/*g*/";
	struct json_parser parser;
	int error;
	struct my_struct foo;

	/* Decode json input by use of the codec defined above, and
	 * store the results in an associated `struct my_struct' */
	json_parser_init(&parser, json_input, COMPILER_STREND(json_input));
	memset(&foo, 0xcc, sizeof(foo));
	error = json_decode(&parser, codec, &foo, NULL);
	assertf(error == JSON_ERROR_OK, "error == %d", error);
	assertf(foo.ms_alpha == 10, "foo.ms_alpha = %d", foo.ms_alpha);
	assertf(foo.ms_beta == 20, "foo.ms_beta = %d", foo.ms_beta);
	assertf(foo.ms_values[0] == 1, "foo.ms_values[0] = %d", foo.ms_values[0]);
	assertf(foo.ms_values[1] == 2, "foo.ms_values[1] = %d", foo.ms_values[1]);
	assertf(foo.ms_values[2] == 4, "foo.ms_values[2] = %d", foo.ms_values[2]);
	assertf(foo.ms_values[3] == 8, "foo.ms_values[3] = %d", foo.ms_values[3]);
	assertf(foo.ms_values[4] == 16, "foo.ms_values[4] = %d", foo.ms_values[4]);
	assertf(foo.ms_values[5] == 32, "foo.ms_values[5] = %d", foo.ms_values[5]);
	assertf(foo.ms_values[6] == 64, "foo.ms_values[6] = %d", foo.ms_values[6]);
	assertf(foo.ms_values[7] == 128, "foo.ms_values[7] = %d", foo.ms_values[7]);
	assertf(strcmp(foo.ms_name, "This is\n my /*name*/") == 0,
	        "foo.ms_name = %q", foo.ms_name);

	/* Also assert the opposite: converting a C-structure to json (using both compact and pretty formats) */
	{
		struct json_writer writer;
		PRIVATE char const foo_pretty_expected[] = "{\n"
		                                           "\t\"alpha\": 10,\n"
		                                           "\t\"beta\": 20,\n"
		                                           "\t\"name\": \"This is\\n my /*name*/\",\n"
		                                           "\t\"values\": [\n"
		                                           "\t\t1,\n"
		                                           "\t\t2,\n"
		                                           "\t\t4,\n"
		                                           "\t\t8,\n"
		                                           "\t\t16,\n"
		                                           "\t\t32,\n"
		                                           "\t\t64,\n"
		                                           "\t\t128\n"
		                                           "\t]\n"
		                                           "}";
		PRIVATE char const foo_compact_expected[] =
			"{\"alpha\":10,\"beta\":20,\"name\":\"This is\\n my /*name*/\",\"values\":[1,2,4,8,16,32,64,128]}";
		char foo_generated[512], *ptr;
		ptr = foo_generated;
		json_writer_init(&writer, &format_sprintf_printer, &ptr, JSON_WRITER_FORMAT_PRETTY);
		error = json_encode(&writer, codec, &foo, NULL);
		assertf(error == JSON_ERROR_OK, "error = %d", error);
		assertf(ptr == foo_generated + COMPILER_STRLEN(foo_pretty_expected) &&
		        memcmp(foo_generated, foo_pretty_expected, sizeof(foo_pretty_expected) - sizeof(char)) == 0,
		        "Expected: %$q\n"
		        "Parsed  : %$q\n",
		        COMPILER_STRLEN(foo_pretty_expected), foo_pretty_expected,
		        (size_t)(ptr - foo_generated), foo_generated);
		ptr = foo_generated;
		json_writer_init(&writer, &format_sprintf_printer, &ptr, JSON_WRITER_FORMAT_COMPACT);
		error = json_encode(&writer, codec, &foo, NULL);
		assertf(error == JSON_ERROR_OK, "error = %d", error);
		assertf(ptr == foo_generated + COMPILER_STRLEN(foo_compact_expected) &&
		        memcmp(foo_generated, foo_compact_expected, sizeof(foo_compact_expected) - sizeof(char)) == 0,
		        "Expected: %$q\n"
		        "Parsed  : %$q\n",
		        COMPILER_STRLEN(foo_compact_expected), foo_compact_expected,
		        (size_t)(ptr - foo_generated), foo_generated);
	}
}

DEFINE_TEST(json_codecs) {
	void *libjson;
	libjson = dlopen(LIBJSON_LIBRARY_NAME, RTLD_LOCAL);
	assertf(libjson, "dlerror(): %s", dlerror());
#define DLSYM(x) (*(void **)&x = dlsym(libjson, #x), assertf(x, "dlerror(): %s", dlerror()))
	DLSYM(json_parser_init);
	DLSYM(json_decode);
	DLSYM(json_encode);
	DLSYM(json_parser_enterobject);
	DLSYM(json_parser_enterarray);
	DLSYM(json_parser_findkey);
	DLSYM(json_parser_findindex);
	DLSYM(json_parser_getnumber);
#undef DLSYM

	do_test_codec(my_struct_codec);
	do_test_codec(my_struct_codec2);

	{
		int error;
		intptr_t value;
		struct json_parser parser;
		char const *input = "{\"bar\":\"baz\",\"foo\":[10,20,30]}";
		json_parser_init(&parser, input, strend(input));

		error = json_parser_enterobject(&parser);
		assertf(error == JSON_ERROR_OK, "error = %d", error);

		error = json_parser_findkey(&parser, "foo", 3);
		assertf(error == JSON_ERROR_OK, "error = %d", error);

		error = json_parser_enterarray(&parser);
		assertf(error == JSON_ERROR_OK, "error = %d", error);

		error = json_parser_findindex(&parser, 1);
		assertf(error == JSON_ERROR_OK, "error = %d", error);

		memset(&value, 0xcc, sizeof(value));
		error = json_parser_getnumber(&parser, &value);
		assertf(error == JSON_ERROR_OK, "error = %d", error);

		assertf(value == 20, "value = %#Ix", value);
	}

	dlclose(libjson);
}


DECL_END

#endif /* !GUARD_LIBJSON_JSON_CTEST */
