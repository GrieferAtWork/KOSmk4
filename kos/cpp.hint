// Compiler
#define alignas(x)
#define _Alignas(x)
#define __extension__
#define attribute(x)
#define __attribute(x)
#define __attribute__(x)
#define __declspec(...)
#define __volatile volatile
#define __volatile__ volatile
#define explicit
#define constexpr
#define __const const
#define __const__ const
#define __label__
#define typeof decltype
#define __typeof decltype
#define __typeof__ decltype
#define complex
#define _Complex
#define __complex
#define __complex__
#define _Atomic
#define __thread
#define __auto_type auto
#define inline
#define __inline
#define __inline__
#define noreturn
#define _Noreturn
#define thread_local
#define _Thread_local
#define __flash
#define __flash1
#define __flash2
#define __flash3
#define __flash4
#define __flash5
#define __memx
#define __far
#define __ea
#define __seg_fs
#define __seg_gs
#define __signed signed
#define __signed__ signed
#define __unsigned unsigned
#define __unsigned__ unsigned
#define __restrict restrict
#define __restrict__ restrict
#define __restrict_arr restrict
#define asm(...)
#define __asm(...)
#define __asm__(...)
#define __w64
#define __fastcall
#define __stdcall
#define __cdecl
#define __thiscall
#define __clrcall
#define __ms_abi
#define __sysv_abi
#define register



// <__stdinc.h> + <hybrid/compiler.h>
#define DECL_BEGIN extern "C"{
#define __DECL_BEGIN extern "C"{
#define __SYSDECL_BEGIN extern "C"{
#define DECL_END }
#define __DECL_END }
#define __SYSDECL_END }

#define __pragma_GCC_diagnostic_push
#define __pragma_GCC_diagnostic_pop
#define __pragma_GCC_diagnostic_ignored(name)
#define __pragma_GCC_diagnostic_push_ignored(name)
#define __pragma_GCC_diagnostic_pop_ignored(name)
#define __pragma_MSVC_diagnostic_ignored
#define __pragma_MSVC_diagnostic_push_ignored
#define __pragma_MSVC_diagnostic_pop_ignored(ids)

#define __BOOL       bool
#define __LONGLONG   long long
#define __ULONGLONG  unsigned long long
#define __LONGDOUBLE long double

#define NULL 0
#define __NULLPTR 0

#define XBLOCK
#define __XBLOCK
#define XRETURN
#define __XRETURN

#define __register
#define __P(x) x
#define __builtin_va_list va_list
#define DFL(x) =x
#define __DFL(x) =x
#define COMPILER_FLEXIBLE_ARRAY(T,n) T n[]
#define __COMPILER_FLEXIBLE_ARRAY(T,n) T n[]
#define ASMNAME(x)
#define __COMPILER_ASMNAME(x)
#define UNUSED(...) __VA_ARGS__
#define __UNUSED(...) __VA_ARGS__
#define UNUSED2(...) __VA_ARGS__
#define __UNUSED2(...) __VA_ARGS__
#define static_assert(...)
#define _Static_assert(...)
#define STATIC_ASSERT(...)
#define __STATIC_ASSERT(...)
#define STATIC_ASSERT_MSG(...)
#define __STATIC_ASSERT_MSG(...)

#define DEFINE_PRIVATE_ALIAS(n,o) int n(){}
#define __DEFINE_PRIVATE_ALIAS(n,o) int n(){}
#define DEFINE_PUBLIC_ALIAS(n,o) int n(){}
#define __DEFINE_PUBLIC_ALIAS(n,o) int n(){}
#define DEFINE_INTERN_ALIAS(n,o) int n(){}
#define __DEFINE_INTERN_ALIAS(n,o) int n(){}
#define DEFINE_PRIVATE_WEAK_ALIAS(n,o) int n(){}
#define __DEFINE_PRIVATE_WEAK_ALIAS(n,o) int n(){}
#define DEFINE_PUBLIC_WEAK_ALIAS(n,o) int n(){}
#define __DEFINE_PUBLIC_WEAK_ALIAS(n,o) int n(){}
#define DEFINE_INTERN_WEAK_ALIAS(n,o) int n(){}
#define __DEFINE_INTERN_WEAK_ALIAS(n,o) int n(){}

#define __COMPILER_SREDIRECT(decl,attr,T,name,asmname) extern T name;
#define __COMPILER_SREDIRECT2(decl,attr,Tdecl,name,asmname) extern Tdecl;
#define __COMPILER_REDIRECT(decl,attr,Treturn,nothrow,cc,name,param,asmname,args)                                        Treturn name param;
#define __COMPILER_REDIRECT_VOID(decl,attr,nothrow,cc,name,param,asmname,args)                                              void name param;
#define __COMPILER_VREDIRECT(decl,attr,Treturn,nothrow,cc,name,param,asmname,args,before_va_start,varcount,vartypes)     Treturn name param;
#define __COMPILER_VREDIRECT_VOID(decl,attr,nothrow,cc,name,param,asmname,args,before_va_start,varcount,vartypes)           void name param;
#define __COMPILER_VFREDIRECT(decl,attr,Treturn,nothrow,cc,name,paramf,asmnamef,vparamf,vasmnamef,args,before_va_start)  Treturn name paramf;
#define __COMPILER_VFREDIRECT_VOID(decl,attr,nothrow,cc,name,paramf,asmnamef,vparamf,vasmnamef,args,before_va_start)        void name paramf;
#define __COMPILER_XREDIRECT(decl,attr,Treturn,nothrow,cc,name,param,asmname,code)                                       Treturn name param;
#define __COMPILER_XREDIRECT_VOID(decl,attr,nothrow,cc,name,param,asmname,code)                                             void name param;
#define __COMPILER_EIDECLARE(attr,Treturn,nothrow,cc,name,param,...)                                                     Treturn name param;
#define __COMPILER_EIREDIRECT(attr,Treturn,nothrow,cc,name,param,asmname,...)                                            Treturn name param;
#define __COMPILER_CREDIRECT(decl,attr,Treturn,nothrow,cc,name,param,asmname,args)                                       Treturn name param;
#define __COMPILER_CREDIRECT_VOID(decl,attr,nothrow,cc,name,param,asmname,args)                                             void name param;
#define __COMPILER_CVREDIRECT(decl,attr,Treturn,nothrow,cc,name,param,asmname,args,before_va_start,varcount,vartypes)    Treturn name param;
#define __COMPILER_CVREDIRECT_VOID(decl,attr,nothrow,cc,name,param,asmname,args,before_va_start,varcount,vartypes)          void name param;
#define __COMPILER_CVFREDIRECT(decl,attr,Treturn,nothrow,cc,name,paramf,asmnamef,vparamf,vasmnamef,args,before_va_start) Treturn name paramf;
#define __COMPILER_CVFREDIRECT_VOID(decl,attr,nothrow,cc,name,paramf,asmnamef,vparamf,vasmnamef,args,before_va_start)       void name paramf;
#define __COMPILER_CXREDIRECT(decl,attr,Treturn,nothrow,cc,name,param,asmname,code)                                      Treturn name param;
#define __COMPILER_CXREDIRECT_VOID(decl,attr,nothrow,cc,name,param,asmname,code)                                            void name param;
#define __COMPILER_CEIDECLARE(attr,Treturn,nothrow,cc,name,param,...)                                                    Treturn name param;
#define __COMPILER_CEIREDIRECT(attr,Treturn,nothrow,cc,name,param,asmname,...)                                           Treturn name param;
#define REDIRECT(decl,attr,Treturn,nothrow,cc,name,param,asmname,args)                                                   Treturn name param;
#define REDIRECT_VOID(decl,attr,nothrow,cc,name,param,asmname,args)                                                         void name param;
#define VREDIRECT(decl,attr,Treturn,nothrow,cc,name,param,asmname,args,before_va_start,varcount,vartypes)                Treturn name param;
#define VREDIRECT_VOID(decl,attr,nothrow,cc,name,param,asmname,args,before_va_start,varcount,vartypes)                      void name param;
#define VFREDIRECT(decl,attr,Treturn,nothrow,cc,name,paramf,asmnamef,vparamf,vasmnamef,args,before_va_start)             Treturn name paramf;
#define VFREDIRECT_VOID(decl,attr,nothrow,cc,name,paramf,asmnamef,vparamf,vasmnamef,args,before_va_start)                   void name paramf;
#define XREDIRECT(decl,attr,Treturn,nothrow,cc,name,param,asmname,code)                                                  Treturn name param;
#define XREDIRECT_VOID(decl,attr,nothrow,cc,name,param,asmname,code)                                                        void name param;
#define EIDECLARE(attr,Treturn,nothrow,cc,name,param,...)                                                                Treturn name param;
#define EIREDIRECT(attr,Treturn,nothrow,cc,name,param,asmname,...)                                                       Treturn name param;

#define __NAMESPACE_GLB_SYM                ::
#define __NAMESPACE_STD_BEGIN              namespace std{
#define __NAMESPACE_STD_END                }
#define __NAMESPACE_STD_SYM                ::std::
#define __NAMESPACE_STD_USING(x)           using ::std::x;
#define __NAMESPACE_GLB_USING(x)           using ::x;
#define __NAMESPACE_GLB_USING_TYPE(x)      using ::x;
#define __NAMESPACE_GLB_USING_OR_IMPL(x,i) using ::x;

#define __NAMESPACE_INT_BEGIN namespace __intern{
#define __NAMESPACE_INT_END   }
#define __NAMESPACE_INT_SYM   ::__intern::
#define __NAMESPACE_INT_LSYM  __intern::

#define __STATIC_IF(x) if(x)
#define __STATIC_ELSE(x) else
#define __IF0 if(0)
#define __IF1 if(1)
#define __WHILE0 while(0)
#define __WHILE1 while(1)
#define likely
#define unlikely
#define __likely
#define __unlikely
#define likely_untraced
#define unlikely_untraced
#define __likely_untraced
#define __unlikely_untraced
#define untraced
#define __untraced

#define IMPDEF extern
#define __IMPDEF extern
#define EXPDEF
#define __EXPDEF
#define FUNDEF
#define __PUBDEF
#define DATDEF extern
#define __DATDEF extern
#define PUBLIC
#define __PUBLIC
#define INTERN
#define __INTERN
#define PUBLIC_CONST
#define __PUBLIC_CONST
#define INTERN_CONST
#define __INTERN_CONST
#define INTERN_COMDAT
#define __INTERN_COMDAT
#define INTDEF extern
#define __INTDEF extern
#define PRIVATE static
#define __PRIVATE static
#define FORCELOCAL
#define __FORCELOCAL
#define EXTERN_INLINE
#define __EXTERN_INLINE
#define EXTERN_FORCEINLINE
#define __EXTERN_FORCEINLINE
#define LOCAL
#define __LOCAL
#define __LOCAL_REDIRECT

#define NONNULL(...)
#define NONNULL_T(...)
#define ATTR_NONNULL(...)
#define ATTR_NONNULL_T(...)
#define __ATTR_NONNULL(...)
#define __ATTR_NONNULL_T(...)
#define NONNULL_CXX(...)
#define ATTR_NONNULL_CXX(...)
#define __ATTR_NONNULL_CXX(...)
#define WUNUSED
#define WUNUSED_T
#define ATTR_WUNUSED
#define ATTR_WUNUSED_T
#define __ATTR_WUNUSED
#define __ATTR_WUNUSED_T

#define NOTHROW
#define NOTHROW_T
#define __NOTHROW
#define __NOTHROW_T
#define NOTHROW_NCX
#define NOTHROW_NCX_T
#define __NOTHROW_NCX
#define __NOTHROW_NCX_T
#define NOTHROW_CB
#define NOTHROW_CB_T
#define __NOTHROW_CB
#define __NOTHROW_CB_T
#define NOTHROW_CB_NCX
#define NOTHROW_CB_NCX_T
#define __NOTHROW_CB_NCX
#define __NOTHROW_CB_NCX_T
#define __NOTHROW_KRN
#define NOTHROW_RPC
#define NOTHROW_RPC_T
#define __NOTHROW_RPC
#define __NOTHROW_RPC_T
#define NOTHROW_RPC_KOS
#define NOTHROW_RPC_KOS_T
#define __NOTHROW_RPC_KOS
#define __NOTHROW_RPC_KOS_T
#define NOTHROW_RPC_NOKOS
#define NOTHROW_RPC_NOKOS_T
#define __NOTHROW_RPC_NOKOS
#define __NOTHROW_RPC_NOKOS_T
#define NOTHROW_RPC_PURE
#define NOTHROW_RPC_PURE_T
#define __NOTHROW_RPC_PURE
#define __NOTHROW_RPC_PURE_T
#define NOTHROW_KERNEL
#define NOTHROW_KERNEL_T
#define __NOTHROW_KERNEL
#define __NOTHROW_KERNEL_T
#define NOTHROW_USER
#define NOTHROW_USER_T
#define __NOTHROW_USER
#define __NOTHROW_USER_T
#define THROWING(...)
#define THROWING_T(...)
#define __THROWING(...)
#define __THROWING_T(...)

#define ASMCALL
#define __ASMCALL

#define __ATTR_W64
#define ATTR_NOINLINE
#define __ATTR_NOINLINE
#define ATTR_NORETURN
#define ATTR_NORETURN_T
#define __ATTR_NORETURN
#define __ATTR_NORETURN_T
#define ATTR_FASTCALL
#define __ATTR_FASTCALL
#define ATTR_STDCALL
#define __ATTR_STDCALL
#define ATTR_CDECL
#define __ATTR_CDECL
#define ATTR_SYSVABI
#define __ATTR_SYSVABI
#define ATTR_MSABI
#define __ATTR_MSABI
#define ATTR_PURE
#define ATTR_PURE_T
#define __ATTR_PURE
#define __ATTR_PURE_T
#define ATTR_CONST
#define ATTR_CONST_T
#define __ATTR_CONST
#define __ATTR_CONST_T
#define ATTR_LEAF
#define ATTR_LEAF_P
#define __ATTR_LEAF
#define __ATTR_LEAF_T
#define ATTR_FLATTEN
#define __ATTR_FLATTEN
#define ATTR_MALLOC
#define ATTR_MALLOC_T
#define __ATTR_MALLOC
#define __ATTR_MALLOC_T
#define ATTR_HOT
#define ATTR_HOT_T
#define __ATTR_HOT
#define __ATTR_HOT_T
#define ATTR_COLD
#define ATTR_COLD_T
#define __ATTR_COLD
#define __ATTR_COLD_T
#define ATTR_WEAK
#define __ATTR_WEAK
#define ATTR_ALLOC_SIZE(x)
#define ATTR_ALLOC_SIZE_T(x)
#define __ATTR_ALLOC_SIZE(x)
#define __ATTR_ALLOC_SIZE_T(x)
#define ATTR_ASSUME_ALIGNED(x)
#define ATTR_ASSUME_ALIGNED_T(x)
#define __ATTR_ASSUME_ALIGNED(x)
#define __ATTR_ASSUME_ALIGNED_T(x)
#define ATTR_ALLOC_ALIGN(x)
#define ATTR_ALLOC_ALIGN_T(x)
#define __ATTR_ALLOC_ALIGN(x)
#define __ATTR_ALLOC_ALIGN_T(x)
#define ATTR_NOTHROW
#define ATTR_NOTHROW_T
#define __ATTR_NOTHROW
#define __ATTR_NOTHROW_T
#define ATTR_DLLIMPORT
#define __ATTR_DLLIMPORT
#define ATTR_DLLEXPORT
#define __ATTR_DLLEXPORT
#define ATTR_NOCLONE
#define __ATTR_NOCLONE
#define ATTR_USED
#define __ATTR_USED
#define ATTR_UNUSED
#define __ATTR_UNUSED
#define ATTR_SENTINEL
#define ATTR_SENTINEL_T
#define __ATTR_SENTINEL
#define __ATTR_SENTINEL_T
#define ATTR_SENTINEL_O(x)
#define ATTR_SENTINEL_O_T(x)
#define __ATTR_SENTINEL_O(x)
#define __ATTR_SENTINEL_O_T(x)
#define ATTR_THREAD
#define __ATTR_THREAD
#define ATTR_DEPRECATED(x)
#define ATTR_DEPRECATED_T(x)
#define __ATTR_DEPRECATED(x)
#define __ATTR_DEPRECATED_T(x)
#define ATTR_DEPRECATED_
#define ATTR_DEPRECATED_T_
#define __ATTR_DEPRECATED_
#define __ATTR_DEPRECATED_T_
#define ATTR_WARNING(x)
#define ATTR_WARNING_T(x)
#define __ATTR_WARNING(x)
#define __ATTR_WARNING_T(x)
#define ATTR_ERROR(x)
#define ATTR_ERROR_T(x)
#define __ATTR_ERROR(x)
#define __ATTR_ERROR_T(x)
#define ATTR_SECTION(x)
#define __ATTR_SECTION(x)
#define ATTR_RETNONNULL
#define ATTR_RETNONNULL_T
#define __ATTR_RETNONNULL
#define __ATTR_RETNONNULL_T
#define ATTR_ALIGNED(x)
#define __ATTR_ALIGNED(x)
#define ATTR_ALIGN(...) __VA_ARGS__
#define __ATTR_ALIGN(...) __VA_ARGS__
#define ATTR_ALIAS(x)
#define __ATTR_ALIAS(x)
#define ATTR_INLINE
#define __ATTR_INLINE
#define ATTR_FORCEINLINE
#define __ATTR_FORCEINLINE
#define ATTR_PACKED
#define __ATTR_PACKED
#define ATTR_RETURNS_TWICE
#define ATTR_RETURNS_TWICE_T
#define __ATTR_RETURNS_TWICE
#define __ATTR_RETURNS_TWICE_T
#define ATTR_EXTERNALLY_VISIBLE
#define __ATTR_EXTERNALLY_VISIBLE
#define ATTR_ARTIFICIAL
#define __ATTR_ARTIFICIAL
#define ATTR_FORMAT_ARG(x)
#define ATTR_FORMAT_ARG_T(x)
#define __ATTR_FORMAT_ARG(x)
#define __ATTR_FORMAT_ARG_T(x)
#define ATTR_FALLTHROUGH ;
#define __ATTR_FALLTHROUGH ;
#define ATTR_OPTIMIZE(x)
#define __ATTR_OPTIMIZE(x)
#define ATTR_TRANSPARENT_UNION
#define __ATTR_TRANSPARENT_UNION
#define ATTR_FORMAT_PRINTF(...)
#define ATTR_FORMAT_PRINTF_T(...)
#define __ATTR_FORMAT_PRINTF(...)
#define __ATTR_FORMAT_PRINTF_T(...)
#define ATTR_FORMAT_SCANF(...)
#define ATTR_FORMAT_SCANF_T(...)
#define __ATTR_FORMAT_SCANF(...)
#define __ATTR_FORMAT_SCANF_T(...)
#define ATTR_FORMAT_STRFMON(...)
#define ATTR_FORMAT_STRFMON_T(...)
#define __ATTR_FORMAT_STRFMON(...)
#define __ATTR_FORMAT_STRFMON_T(...)
#define ATTR_FORMAT_STRFTIME(...)
#define ATTR_FORMAT_STRFTIME_T(...)
#define __ATTR_FORMAT_STRFTIME(...)
#define __ATTR_FORMAT_STRFTIME_T(...)
#define ATTR_NOPLT
#define __ATTR_NOPLT
#define ATTR_SELECTANY
#define __ATTR_SELECTANY
#define ATTR_VISIBILITY(x)
#define __ATTR_VISIBILITY(x)
#define ATTR_ACCESS_NONE(x)
#define ATTR_ACCESS_NONE_T(x)
#define __ATTR_ACCESS_NONE(x)
#define __ATTR_ACCESS_NONE_T(x)
#define ATTR_INS(x,y)
#define ATTR_INS_T(x,y)
#define __ATTR_INS(x,y)
#define __ATTR_INS_T(x,y)
#define ATTR_OUTS(x,y)
#define ATTR_OUTS_T(x,y)
#define __ATTR_OUTS(x,y)
#define __ATTR_OUTS_T(x,y)
#define ATTR_INOUTS(x,y)
#define ATTR_INOUTS_T(x,y)
#define __ATTR_INOUTS(x,y)
#define __ATTR_INOUTS_T(x,y)
#define ATTR_IN_OPT(x)
#define ATTR_IN_OPT_T(x)
#define __ATTR_IN_OPT(x)
#define __ATTR_IN_OPT_T(x)
#define ATTR_OUT_OPT(x)
#define ATTR_OUT_OPT_T(x)
#define __ATTR_OUT_OPT(x)
#define __ATTR_OUT_OPT_T(x)
#define ATTR_INOUT_OPT(x)
#define ATTR_INOUT_OPT_T(x)
#define __ATTR_INOUT_OPT(x)
#define __ATTR_INOUT_OPT_T(x)
#define ATTR_IN(x)
#define ATTR_IN_T(x)
#define __ATTR_IN(x)
#define __ATTR_IN_T(x)
#define ATTR_OUT(x)
#define ATTR_OUT_T(x)
#define __ATTR_OUT(x)
#define __ATTR_OUT_T(x)
#define ATTR_INOUT(x)
#define ATTR_INOUT_T(x)
#define __ATTR_INOUT(x)
#define __ATTR_INOUT_T(x)
#define ATTR_FDARG(x)
#define ATTR_FDARG_T(x)
#define __ATTR_FDARG(x)
#define __ATTR_FDARG_T(x)
#define ATTR_FDREAD(x)
#define ATTR_FDREAD_T(x)
#define __ATTR_FDREAD(x)
#define __ATTR_FDREAD_T(x)
#define ATTR_FDWRITE(x)
#define ATTR_FDWRITE_T(x)
#define __ATTR_FDWRITE(x)
#define __ATTR_FDWRITE_T(x)



// <__stdcxx.h>
#define __CXX_DEDUCE_TYPENAME typename
#define __CXX_FORCEINLINE
#define __CXX_CLASSMEMBER
#define __CXX_INLINE_CONSTEXPR
#define __CXX_DEFAULT_CTOR(T) T()
#define __CXX_DEFAULT_DTOR(T) ~T()
#define __CXX_DEFAULT_COPY(T,...) T(T const&)=default
#define __CXX_DEFAULT_CTOR_NOEXCEPT(T) T()
#define __CXX_DEFAULT_DTOR_NOEXCEPT(T) ~T()
#define __CXX_DEFAULT_COPY_NOEXCEPT(T,...) T(T const&)=default
#define __CXX_STATIC_CONST(T,decl) static T decl
#define __CXX_DELETE_CTOR(T) T()
#define __CXX_DELETE_DTOR(T) ~T()
#define __CXX_DELETE_COPY(T) T(T const&)
#define __CXX_DELETE_COPY_ASSIGN(T) T&operator=(T const&)
#define __CXX_DELETE_VOLATILE_COPY_ASSIGN(T) T&operator=(T const&)volatile
#define __CXXDECL_BEGIN extern "C++"{
#define __CXXDECL_END }
#define __CXX_THROWS(...)
#define __CXX_NOEXCEPT
#define __CXX_NOEXCEPT_IF(expr)
#define __CXX_NOEXCEPT_IS(expr)
#define __CXX_NOEXCEPT_IFNX(expr)
#define __CXX11_CONSTEXPR
#define __CXX11_CONSTEXPR_OR_CONST
#define __CXX14_CONSTEXPR
#define __CXX14_CONSTEXPR_OR_CONST
#define __CXX17_CONSTEXPR
#define __CXX17_CONSTEXPR_OR_CONST



// <hybrid/typecore.h>
#define INT8_C(c) c
#define __INT8_C(c) c
#define INT16_C(c) c
#define __INT16_C(c) c
#define INT32_C(c) c
#define __INT32_C(c) c
#define UINT8_C(c) c
#define __UINT8_C(c) c
#define UINT16_C(c) c
#define __UINT16_C(c) c
#define UINT32_C(c) c
#define __UINT32_C(c) c
#define INT64_C(c) c
#define __INT64_C(c) c
#define UINT64_C(c) c
#define __UINT64_C(c) c
#define INT128_C(c) c
#define __INT128_C(c) c
#define UINT128_C(c) c
#define __UINT128_C(c) c
#define INTMAX_C(c) c
#define __INTMAX_C(c) c
#define UINTMAX_C(c) c
#define __UINTMAX_C(c) c
#define INTPTR_C(c) c
#define __INTPTR_C(c) c
#define UINTPTR_C(c) c
#define __UINTPTR_C(c) c
#define SIZE_C(c) c
#define __SIZE_C(c) c
#define SSIZE_C(c) c
#define __SSIZE_C(c) c
#define __SHIFT_TYPE__        shift_t
#define __INT8_TYPE__         int8_t
#define __UINT8_TYPE__        uint8_t
#define __INT16_TYPE__        int16_t
#define __UINT16_TYPE__       uint16_t
#define __INT32_TYPE__        int32_t
#define __UINT32_TYPE__       uint32_t
#define __INT64_TYPE__        int64_t
#define __UINT64_TYPE__       uint64_t
#define __SIZE_TYPE__         size_t
#define __PTRDIFF_TYPE__      ptrdiff_t
#define __SSIZE_TYPE__        ssize_t
#define __INTPTR_TYPE__       intptr_t
#define __UINTPTR_TYPE__      uintptr_t
#define __BYTE_TYPE__         byte_t
#define __REGISTER_TYPE__     register_t
#define __SREGISTER_TYPE__    sregister_t
#define __TYPEFOR_INTIB1      int8_t
#define __TYPEFOR_UINTIB1     uint8_t
#define __TYPEFOR_INTIB2      int16_t
#define __TYPEFOR_UINTIB2     uint16_t
#define __TYPEFOR_INTIB4      int32_t
#define __TYPEFOR_UINTIB4     uint32_t
#define __TYPEFOR_INTIB8      int64_t
#define __TYPEFOR_UINTIB8     uint64_t
#define __CHAR8_TYPE__        char
#define __INT_LEAST8_TYPE__   int_least8_t
#define __UINT_LEAST8_TYPE__  uint_least8_t
#define __INT_LEAST16_TYPE__  int_least16_t
#define __UINT_LEAST16_TYPE__ uint_least16_t
#define __INT_LEAST32_TYPE__  int_least32_t
#define __UINT_LEAST32_TYPE__ uint_least32_t
#define __INT_LEAST64_TYPE__  int_least64_t
#define __UINT_LEAST64_TYPE__ uint_least64_t
#define __INT_FAST8_TYPE__    int_fast8_t
#define __UINT_FAST8_TYPE__   uint_fast8_t
#define __INT_FAST16_TYPE__   int_fast16_t
#define __UINT_FAST16_TYPE__  uint_fast16_t
#define __INT_FAST32_TYPE__   int_fast32_t
#define __UINT_FAST32_TYPE__  uint_fast32_t
#define __INT_FAST64_TYPE__   int_fast64_t
#define __UINT_FAST64_TYPE__  uint_fast64_t
#define __INTMAX_TYPE__       intmax_t
#define __UINTMAX_TYPE__      uintmax_t
#define __INTPTR_HALF_TYPE__  intptr_half_t
#define __UINTPTR_HALF_TYPE__ uintptr_half_t
#define __LONGPTR_TYPE__      longptr_t
#define __ULONGPTR_TYPE__     ulongptr_t
#define __SBYTE_TYPE__        sbyte_t
#define __WCHAR_TYPE__        wchar_t
#define __CHAR16_TYPE__       char16_t
#define __CHAR32_TYPE__       char32_t
#define __WCHAR16_TYPE__      char16_t
#define __WCHAR32_TYPE__      char32_t
#define __WINT_TYPE__         wint_t
#define __SIG_ATOMIC_TYPE__   sig_atomic_t
#define __INTSIZE_TYPE__      size_t
#define __INTSSIZE_TYPE__     ssize_t
#define __LONGSIZE_TYPE__     size_t
#define __LONGSSIZE_TYPE__    ssize_t
#define __LONG32_TYPE__       long32_t
#define __ULONG32_TYPE__      ulong32_t
#define __LONG64_TYPE__       long64_t
#define __ULONG64_TYPE__      ulong64_t



// <hybrid/pointer.h>
#define __HYBRID_FUNCPTR32(return,cc,name,args) return (cc*name)args
#define __HYBRID_FUNCPTR64(return,cc,name,args) return (cc*name)args
#define FUNCPTR32(return,cc,name,args) return (cc*name)args
#define FUNCPTR64(return,cc,name,args) return (cc*name)args
#define __HYBRID_PTR32(T) T*
#define __HYBRID_PTR64(T) T*
#define PTR32(T) T*
#define PTR64(T) T*



// <hybrid/bitset.h>
#define __hybrid_bitset_decl(x,n) x[n]
#define __hybrid_bitset_foreach(x,y,z) for(;;)
#define __hybrid_bitset_nforeach(x,y,z,a) for(;;)
#define __hybrid_bitset_nforeach_r(x,y,z,a) for(;;)
#define bitset_decl(x,n) x[n]
#define bitset_foreach(x,y,z) for(;;)
#define bitset_nforeach(x,y,z,a) for(;;)
#define bitset_nforeach_r(x,y,z,a) for(;;)



// <hybrid/__assembly.h>
#define PRIVATE_FUNCTION(sym)      ;int sym(){}
#define INTERN_FUNCTION(sym)       ;int sym(){}
#define PUBLIC_FUNCTION(sym)       ;int sym(){}
#define PRIVATE_WEAK_FUNCTION(sym) ;int sym(){}
#define INTERN_WEAK_FUNCTION(sym)  ;int sym(){}
#define PUBLIC_WEAK_FUNCTION(sym)  ;int sym(){}
#define PRIVATE_OBJECT(sym)        ;int sym;
#define INTERN_OBJECT(sym)         ;int sym;
#define PUBLIC_OBJECT(sym)         ;int sym;
#define PRIVATE_WEAK_OBJECT(sym)   ;int sym;
#define INTERN_WEAK_OBJECT(sym)    ;int sym;
#define PUBLIC_WEAK_OBJECT(sym)    ;int sym;
#define __ASM_BEGIN
#define __ASM_END
#define __ASM_ARG(x)
#define __ASM_L(...)



// <hybrid/__altint.h>
#define __HYBRID_ALTINT(UID,allow_int_ops,...) __VA_ARGS__
#define __HYBRID_ALTINT_UID(UID)
#define __HYBRID_ALTINT_COMPAT(Ta,Tb)
#define __HYBRID_ALTINT_TYPEDEF(Told,Tnew,allow_int_ops) typedef Told Tnew



// <hybrid/int128.h>
#define __HYBRID_PRIVATE_DEFINE_INT128_GETSET_WORD(a,b,T,S,...)\
	static T a(S var,unsigned int i);static void b(S*pvar,unsigned int i,T v);
#define __HYBRID_INT128_DEFINE_BINARY_CXX_OPERATOR(op,name) \
	template<class ValType>__hybrid_uint128_t&operator op##=(__hybrid_uint128_t&self,ValType v){}\
	template<class ValType>__hybrid_int128_t&operator op##=(__hybrid_int128_t&self,ValType v){}\
	template<class ValType>__hybrid_uint128_t&operator op##=(__hybrid_uint128_t&self,ValType v){}\
	template<class ValType>__hybrid_int128_t&operator op##=(__hybrid_int128_t&self,ValType v){}\
	template<class ValType>__hybrid_uint128_t operator op(__hybrid_uint128_t const&self,ValType __v){}\
	template<class ValType>__hybrid_int128_t operator op(__hybrid_int128_t const&self,ValType __v){}\
	template<class ValType>__hybrid_uint128_t operator op(__hybrid_uint128_t const&self,ValType __v){}\
	template<class ValType>__hybrid_int128_t operator op(__hybrid_int128_t const&self,ValType __v){}\
	__hybrid_uint128_t&operator op##=(__hybrid_uint128_t&self,__hybrid_uint128_t const&v){}\
	__hybrid_uint128_t&operator op##=(__hybrid_uint128_t&self,__hybrid_int128_t const&v){}\
	__hybrid_int128_t&operator op##=(__hybrid_int128_t&self,__hybrid_uint128_t const&v){}\
	__hybrid_int128_t&operator op##=(__hybrid_int128_t&self,__hybrid_int128_t const&v){}\
	__hybrid_uint128_t operator op(__hybrid_uint128_t const&self,__hybrid_uint128_t const&v){}\
	__hybrid_uint128_t operator op(__hybrid_uint128_t const&self,__hybrid_int128_t const&v){}\
	__hybrid_int128_t operator op(__hybrid_int128_t const&self,__hybrid_uint128_t const&v){}\
	__hybrid_int128_t operator op(__hybrid_int128_t const&self,__hybrid_int128_t const&v){}
#define __HYBRID_INT128_DEFINE_COMPARE_CXX_OPERATOR(op,np,name) \
	template<class ValType>bool operator op(__hybrid_uint128_t const&self,ValType v){}\
	template<class ValType>bool operator np(__hybrid_uint128_t const&self,ValType v){}\
	template<class ValType>bool operator op(__hybrid_int128_t const&self,ValType v){}\
	template<class ValType>bool operator np(__hybrid_int128_t const&self,ValType v){}\
	template<class ValType>bool operator op(__hybrid_uint128_t const&self,ValType v){}\
	template<class ValType>bool operator np(__hybrid_uint128_t const&self,ValType v){}\
	template<class ValType>bool operator op(__hybrid_int128_t const&self,ValType v){}\
	template<class ValType>bool operator np(__hybrid_int128_t const&self,ValType v){}\
	bool operator op(__hybrid_int128_t const&self,__hybrid_int128_t const&v){}\
	bool operator op(__hybrid_int128_t const&self,__hybrid_uint128_t const&v){}\
	bool operator np(__hybrid_int128_t const&self,__hybrid_int128_t const&v){}\
	bool operator np(__hybrid_int128_t const&self,__hybrid_uint128_t const&v){}\
	bool operator op(__hybrid_uint128_t const&self,__hybrid_int128_t const&v){}\
	bool operator op(__hybrid_uint128_t const&self,__hybrid_uint128_t const&v){}\
	bool operator np(__hybrid_uint128_t const&self,__hybrid_int128_t const&v){}\
	bool operator np(__hybrid_uint128_t const&self,__hybrid_uint128_t const&v){}



// <hybrid/sequence/[...].h>
#define __HYBRID_Q_STRUCT struct
#define __HYBRID_Q_CLASS class
#define LIST_HEAD(n,t) struct n{struct t*lh_first;}
#define LIST_HEAD_P(T) struct{T*lh_first;}
#define LIST_ENTRY(t) struct{struct t*le_next,**le_prev;}
#define LIST_ENTRY_P(T) struct{T*le_next,**le_prev;}
#define __PRIVATE_FOREACH_STDFILENO(...) for(;;)
#define LIST_FOREACH(...) for(;;)
#define LIST_FOREACH_P(...) for(;;)
#define LIST_FOREACH_SAFE(...) for(;;)
#define LIST_FOREACH_SAFE_P(...) for(;;)
#define LIST_FOREACH_FROM(...) for(;;)
#define LIST_FOREACH_FROM_P(...) for(;;)
#define LIST_FOREACH_FROM_SAFE(...) for(;;)
#define LIST_FOREACH_FROM_SAFE_P(...) for(;;)
#define LIST_P_FOREACH(...) for(;;)
#define LIST_P_FOREACH_P(...) for(;;)

#define SLIST_HEAD(n,t) struct n{struct t*slh_first;}
#define SLIST_HEAD_P(T) struct{T*slh_first;}
#define SLIST_ENTRY(t) struct{struct t*sle_next;}
#define SLIST_ENTRY_P(T) struct{T*sle_next;}
#define SLIST_FOREACH(...) for(;;)
#define SLIST_FOREACH_P(...) for(;;)
#define SLIST_FOREACH_SAFE(...) for(;;)
#define SLIST_FOREACH_SAFE_P(...) for(;;)
#define SLIST_FOREACH_FROM(...) for(;;)
#define SLIST_FOREACH_FROM_P(...) for(;;)
#define SLIST_FOREACH_FROM_SAFE(...) for(;;)
#define SLIST_FOREACH_FROM_SAFE_P(...) for(;;)
#define SLIST_FOREACH_PREVPTR(...) for(;;)
#define SLIST_FOREACH_PREVPTR_P(...) for(;;)
#define SLIST_P_FOREACH(...) for(;;)
#define SLIST_P_FOREACH_P(...) for(;;)

#define STAILQ_HEAD(n,t) struct n{struct t*stqh_first,**stqh_last;}
#define STAILQ_ENTRY(t) struct{struct t*stqe_next;}
#define STAILQ_HEAD_P(T) struct{T*stqh_first,**stqh_last;}
#define STAILQ_ENTRY_P(T) struct{T*stqe_next;}
#define STAILQ_FOREACH(...) for(;;)
#define STAILQ_FOREACH_P(...) for(;;)
#define STAILQ_FOREACH_SAFE(...) for(;;)
#define STAILQ_FOREACH_SAFE_P(...) for(;;)
#define STAILQ_FOREACH_FROM(...) for(;;)
#define STAILQ_FOREACH_FROM_P(...) for(;;)
#define STAILQ_FOREACH_FROM_SAFE(...) for(;;)
#define STAILQ_FOREACH_FROM_SAFE_P(...) for(;;)

#define SIMPLEQ_HEAD(n,t) struct n{struct t*sqh_first,**sqh_last;}
#define SIMPLEQ_ENTRY(t) struct{struct t*sqe_next;}
#define SIMPLEQ_HEAD_P(T) struct{T*sqh_first,**sqh_last;}
#define SIMPLEQ_ENTRY_P(T) struct{T*sqe_next;}
#define SIMPLEQ_FOREACH(...) for(;;)
#define SIMPLEQ_FOREACH_P(...) for(;;)
#define SIMPLEQ_FOREACH_SAFE(...) for(;;)
#define SIMPLEQ_FOREACH_SAFE_P(...) for(;;)
#define SIMPLEQ_FOREACH_FROM(...) for(;;)
#define SIMPLEQ_FOREACH_FROM_P(...) for(;;)
#define SIMPLEQ_FOREACH_FROM_SAFE(...) for(;;)
#define SIMPLEQ_FOREACH_FROM_SAFE_P(...) for(;;)

#define _TAILQ_HEAD(n,T,q) struct n{T q*tqh_first,*q*tqh_last;}
#define _TAILQ_ENTRY(T,q) struct{T q*tqe_next,*q*tqe_prev;}
#define TAILQ_HEAD(n,t) struct n{struct t*tqh_first,**tqh_last;}
#define TAILQ_HEAD_P(T) struct{T*tqh_first,**tqh_last;}
#define TAILQ_ENTRY(t) struct{struct t*tqe_next,**tqe_prev;}
#define TAILQ_ENTRY_P(T) struct{T*tqe_next,**tqe_prev;}
#define TAILQ_FOREACH(...) for(;;)
#define TAILQ_FOREACH_P(...) for(;;)
#define TAILQ_FOREACH_REVERSE(...) for(;;)
#define TAILQ_FOREACH_REVERSE_P(...) for(;;)
#define TAILQ_FOREACH_SAFE(...) for(;;)
#define TAILQ_FOREACH_SAFE_P(...) for(;;)
#define TAILQ_FOREACH_REVERSE_SAFE(...) for(;;)
#define TAILQ_FOREACH_REVERSE_SAFE_P(...) for(;;)
#define TAILQ_FOREACH_FROM(...) for(;;)
#define TAILQ_FOREACH_FROM_P(...) for(;;)
#define TAILQ_FOREACH_REVERSE_FROM(...) for(;;)
#define TAILQ_FOREACH_REVERSE_FROM_P(...) for(;;)
#define TAILQ_FOREACH_FROM_SAFE(...) for(;;)
#define TAILQ_FOREACH_FROM_SAFE_P(...) for(;;)
#define TAILQ_FOREACH_REVERSE_FROM_SAFE(...) for(;;)
#define TAILQ_FOREACH_REVERSE_FROM_SAFE_P(...) for(;;)

#define CIRCLEQ_HEAD(n,t) struct n{struct t*cqh_first,*cqh_last;}
#define CIRCLEQ_HEAD_P(T) struct{T*cqh_first,*cqh_last;}
#define CIRCLEQ_ENTRY(t) struct{struct t*cqe_next,*cqe_prev;}
#define CIRCLEQ_ENTRY_P(T) struct{T*cqe_next,*cqe_prev;}
#define CIRCLEQ_FOREACH(...) for(;;)
#define CIRCLEQ_FOREACH_P(...) for(;;)
#define CIRCLEQ_FOREACH_REVERSE(...) for(;;)
#define CIRCLEQ_FOREACH_REVERSE_P(...) for(;;)
#define CIRCLEQ_FOREACH_SAFE(...) for(;;)
#define CIRCLEQ_FOREACH_SAFE_P(...) for(;;)
#define CIRCLEQ_FOREACH_REVERSE_SAFE(...) for(;;)
#define CIRCLEQ_FOREACH_REVERSE_SAFE_P(...) for(;;)
#define CIRCLEQ_FOREACH_FROM(...) for(;;)
#define CIRCLEQ_FOREACH_FROM_P(...) for(;;)
#define CIRCLEQ_FOREACH_REVERSE_FROM(...) for(;;)
#define CIRCLEQ_FOREACH_REVERSE_FROM_P(...) for(;;)
#define CIRCLEQ_FOREACH_FROM_SAFE(...) for(;;)
#define CIRCLEQ_FOREACH_FROM_SAFE_P(...) for(;;)
#define CIRCLEQ_FOREACH_REVERSE_FROM_SAFE(...) for(;;)
#define CIRCLEQ_FOREACH_REVERSE_FROM_SAFE_P(...) for(;;)

#define RINGQ_ENTRY(t) struct{struct t*rqe_next,*rqe_prev;}
#define RINGQ_ENTRY_P(T) struct{T*rqe_next,*rqe_prev;}

#define DLIST_HEAD(n,t) struct n{struct t*dlh_first;}
#define DLIST_ENTRY(t) struct{struct t*dle_next,*dle_prev;}
#define DLIST_ENTRY_P(T) struct{T*dle_next,*dle_prev;}
#define DLIST_FOREACH(...) for(;;)
#define DLIST_FOREACH_P(...) for(;;)
#define DLIST_FOREACH_SAFE(...) for(;;)
#define DLIST_FOREACH_SAFE_P(...) for(;;)
#define DLIST_FOREACH_FROM(...) for(;;)
#define DLIST_FOREACH_FROM_P(...) for(;;)
#define DLIST_FOREACH_FROM_SAFE(...) for(;;)
#define DLIST_FOREACH_FROM_SAFE_P(...) for(;;)

#define LIST_TRYREMOVE_IF(...)
#define LIST_TRYREMOVE_IF_P(...)
#define LIST_REMOVEALL(...)
#define LIST_REMOVEALL_P(...)
#define LIST_TRYUNBIND_IF(...)
#define LIST_TRYUNBIND_IF_P(...)
#define LIST_UNBINDALL(...)
#define LIST_UNBINDALL_P(...)
#define DLIST_TRYREMOVE_IF(...)
#define DLIST_TRYREMOVE_IF_P(...)
#define DLIST_REMOVEALL(...)
#define DLIST_REMOVEALL_P(...)
#define SLIST_TRYREMOVE(...)
#define SLIST_TRYREMOVE_P(...)
#define SLIST_TRYREMOVE_IF(...)
#define SLIST_TRYREMOVE_IF_P(...)
#define SLIST_REMOVEALL(...)
#define SLIST_REMOVEALL_P(...)
#define SLIST_CONTAINS(...)
#define SLIST_CONTAINS_P(...)
#define SLIST_TRYREPLACE(...)
#define SLIST_TRYREPLACE_P(...)
#define SLIST_TRYREPLACE_R(...)
#define SLIST_TRYREPLACE_R_P(...)
#define STAILQ_TRYREMOVE(...)
#define STAILQ_TRYREMOVE_P(...)
#define STAILQ_TRYREMOVE_IF(...)
#define STAILQ_TRYREMOVE_IF_P(...)
#define STAILQ_REMOVEALL(...)
#define STAILQ_REMOVEALL_P(...)
#define STAILQ_CONTAINS(...)
#define STAILQ_CONTAINS_P(...)
#define STAILQ_TRYREPLACE(...)
#define STAILQ_TRYREPLACE_P(...)
#define STAILQ_TRYREPLACE_R(...)
#define STAILQ_TRYREPLACE_R_P(...)
#define SIMPLEQ_TRYREMOVE(...)
#define SIMPLEQ_TRYREMOVE_P(...)
#define SIMPLEQ_TRYREMOVE_IF(...)
#define SIMPLEQ_TRYREMOVE_IF_P(...)
#define SIMPLEQ_REMOVEALL(...)
#define SIMPLEQ_REMOVEALL_P(...)
#define SIMPLEQ_CONTAINS(...)
#define SIMPLEQ_CONTAINS_P(...)
#define SIMPLEQ_TRYREPLACE(...)
#define SIMPLEQ_TRYREPLACE_P(...)
#define SIMPLEQ_TRYREPLACE_R(...)
#define SIMPLEQ_TRYREPLACE_R_P(...)

#define RBTREE_NODE(T)                   struct{struct T*rb_par,*rb_lhs,*rb_rhs;}
#define RBTREE_NODE_P(T)                 struct{T*rb_par,*rb_lhs,*rb_rhs;}
#define RBTREE_NODE_WITH_KEY(T,Tkey)     struct{struct T*rb_par,*rb_lhs,*rb_rhs;Tkey rb_min,rb_max;}
#define RBTREE_NODE_WITH_KEY_P(T,Tkey)   struct{T*rb_par,*rb_lhs,*rb_rhs;Tkey rb_min,rb_max;}
#define LLRBTREE_NODE(T)                 struct{struct T*rb_lhs,*rb_rhs;}
#define LLRBTREE_NODE_P(T)               struct{T*rb_lhs,*rb_rhs;}
#define LLRBTREE_NODE_WITH_KEY(T,Tkey)   struct{struct T*rb_lhs,*rb_rhs;Tkey rb_min,rb_max;}
#define LLRBTREE_NODE_WITH_KEY_P(T,Tkey) struct{T*rb_lhs,*rb_rhs;Tkey rb_min,rb_max;}
#define RBTREE_ROOT(T)                   struct T*
#define LLRBTREE_ROOT(T)                 struct T*

#define RBTREE_DECL
#define RBTREE_IMPL
#define RBTREE_NOTHROW
#define RBTREE_NOTHROW_U
#define RBTREE_CC
#define RBTREE(x) rbtree_##x
#define RBTREE_SLOT__ARGS
#define RBTREE_SLOT__PARAMS
#define RBTREE_T struct my_node
#define RBTREE_Tkey int
#define RBTREE_DEFINE_FUNCTION(decl,attr,returnType,nothrow,cc,name,params,args) decl returnType name params



// <hybrid/[...].h>
#define __CDECL_OR_DEFAULT
#define __HYBRID_LIBATOMIC_DECL
#define __HYBRID_LIBATOMIC_CC
#define ____IMPL_DO_FFS(...) {}
#define ____IMPL_DO_CLZ(...) {}
#define ____IMPL_DO_CTZ(...) {}
#define ____IMPL_DO_POPCOUNT(...) {}
#define ____IMPL_DO_PARITY(...) {}
#define ____IMPL_DO_CLRSB(...) {}
#define ____IMPL_DO_PDEP(...) {}
#define ____IMPL_DO_PEXT(...) {}
#define BSEARCH(...) for(;;)
#define BSEARCH_RANGE(...) for(;;)
#define BITSET(num_bits) struct{unsigned int _bs_bits[42];}
#define ATOMIC_ONCE_RUN(self,...) __VA_ARGS__



// <__crt.h>
#define __KOS_FIXED_CONST const

#define __NAMESPACE_FAST_BEGIN              namespace __optimized_imp{
#define __NAMESPACE_FAST_END                }
#define __NAMESPACE_FAST_SYM                ::__optimized_imp::
#define __NAMESPACE_FAST_USING(x)           using ::__optimized_imp::x;
#define __NAMESPACE_FAST_USING_OR_IMPL(x,i) using ::__optimized_imp::x;
#define __LIBC_FAST_NAME(x)                 x

#define __NAMESPACE_LOCAL_BEGIN              namespace __local_imp{
#define __NAMESPACE_LOCAL_END                }
#define __NAMESPACE_LOCAL_SYM                ::__local_imp::
#define __NAMESPACE_LOCAL_USING(x)           using ::__local_imp::x;
#define __NAMESPACE_LOCAL_USING_OR_IMPL(x,i) using ::__local_imp::x;
#define __LIBC_LOCAL_NAME(x)                 __l_##x
#define __LOCAL_LIBC(name)
#define __LOCAL_LIBC_DATA(name)
#define __LOCAL_LIBC_CONST_DATA(name)

#define __LIBM_LOCAL_DECLARE_BEGIN           namespace __local_imp{
#define __LIBM_LOCAL_DECLARE_END             }
#define __LIBM_LOCAL_DECLARE(T,name,value)   T const __libm_##name;
#define __LIBM_LOCAL_DECLARE_ARRAY(T,name,n) T const __libm_##name[n]=
#define __LIBM_LOCAL_VALUE(name)             ::__local_imp::__libm_##name
#define __LIBM_LOCAL_FUNC(name)

#define __CASMNAME(x)
#define __CASMNAME_SAME(x)
#define __CASMNAME_KOS(x)
#define __CASMNAME_DOS(x)
#define __CASMNAME_KOS_SAME(x)
#define __CASMNAME_DOS_SAME(x)
#define __CSDECLARE(attr,T,name)               extern T name;
#define __CSREDIRECT(attr,T,name,asmname)      extern T name;
#define __CSDECLARE2(attr,Tdecl,name)          extern Tdecl;
#define __CSREDIRECT2(attr,Tdecl,name,asmname) extern Tdecl;
#define __CDECLARE(attr,Treturn,nothrow,name,param,args)                                                    Treturn name param;
#define __CDECLARE_OPT(attr,Treturn,nothrow,name,param,args)                                                Treturn name param;
#define __CDECLARE_VOID(attr,nothrow,name,param,args)                                                       void name param;
#define __CDECLARE_VOID_OPT(attr,nothrow,name,param,args)                                                   void name param;
#define __CREDIRECT(attr,Treturn,nothrow,name,param,asmname,args)                                           Treturn name param;
#define __CREDIRECT_VOID(attr,nothrow,name,param,asmname,args)                                              void name param;
#define __CVREDIRECT(attr,Treturn,nothrow,name,param,asmname,args,before_va_start,varcount,vartypes)        Treturn name param;
#define __CVREDIRECT_VOID(attr,nothrow,name,param,asmname,args,before_va_start,varcount,vartypes)           void name param;
#define __CVFREDIRECT(attr,Treturn,nothrow,name,paramf,asmnamef,vparamf,vasmnamef,args,before_va_start)     Treturn name paramf;
#define __CVFREDIRECT_VOID(attr,nothrow,name,paramf,asmnamef,vparamf,vasmnamef,args,before_va_start)        void name paramf;
#define __CXREDIRECT(attr,Treturn,nothrow,name,param,asmname,code)                                          Treturn name param;
#define __CXREDIRECT_VOID(attr,nothrow,name,param,asmname,code)                                             void name param;
#define __CREDIRECT_KOS(attr,Treturn,nothrow,name,param,asmname,args)                                       Treturn name param;
#define __CREDIRECT_DOS(attr,Treturn,nothrow,name,param,asmname,args)                                       Treturn name param;
#define __CREDIRECT_VOID_KOS(attr,nothrow,name,param,asmname,args)                                          void name param;
#define __CREDIRECT_VOID_DOS(attr,nothrow,name,param,asmname,args)                                          void name param;
#define __CVREDIRECT_KOS(attr,Treturn,nothrow,name,param,asmname,args,before_va_start,varcount,vartypes)    Treturn name param;
#define __CVREDIRECT_DOS(attr,Treturn,nothrow,name,param,asmname,args,before_va_start,varcount,vartypes)    Treturn name param;
#define __CVREDIRECT_VOID_KOS(attr,nothrow,name,param,asmname,args,before_va_start,varcount,vartypes)       void name param;
#define __CVREDIRECT_VOID_DOS(attr,nothrow,name,param,asmname,args,before_va_start,varcount,vartypes)       void name param;
#define __CVFREDIRECT_KOS(attr,Treturn,nothrow,name,paramf,asmnamef,vparamf,vasmnamef,args,before_va_start) Treturn name paramf;
#define __CVFREDIRECT_DOS(attr,Treturn,nothrow,name,paramf,asmnamef,vparamf,vasmnamef,args,before_va_start) Treturn name paramf;
#define __CVFREDIRECT_VOID_KOS(attr,nothrow,name,paramf,asmnamef,vparamf,vasmnamef,args,before_va_start)    void name paramf;
#define __CVFREDIRECT_VOID_DOS(attr,nothrow,name,paramf,asmnamef,vparamf,vasmnamef,args,before_va_start)    void name paramf;
#define __CXREDIRECT_KOS(attr,Treturn,nothrow,name,param,asmname,code)                                      Treturn name param;
#define __CXREDIRECT_DOS(attr,Treturn,nothrow,name,param,asmname,code)                                      Treturn name param;
#define __CXREDIRECT_VOID_KOS(attr,nothrow,name,param,asmname,code)                                         void name param;
#define __CXREDIRECT_VOID_DOS(attr,nothrow,name,param,asmname,code)                                         void name param;
#define __CEIDECLARE(attr,Treturn,nothrow,name,param,...)                                                   Treturn name param;
#define __CEIREDIRECT(attr,Treturn,nothrow,name,param,asmname,...)                                          Treturn name param;
#define __CEIDECLARE_DOS(attr,Treturn,nothrow,name,param,...)                                               Treturn name param;
#define __CEIDECLARE_KOS(attr,Treturn,nothrow,name,param,...)                                               Treturn name param;
#define __CEIREDIRECT_DOS(attr,Treturn,nothrow,name,param,asmname,...)                                      Treturn name param;
#define __CEIREDIRECT_KOS(attr,Treturn,nothrow,name,param,asmname,...)                                      Treturn name param;

#define __CASMNAME_GCCNCX(x)
#define __CASMNAME_SAME_GCCNCX(x)
#define __CASMNAME_KOS_GCCNCX(x)
#define __CASMNAME_DOS_GCCNCX(x)
#define __CASMNAME_KOS_SAME_GCCNCX(x)
#define __CASMNAME_DOS_SAME_GCCNCX(x)
#define __CDECLARE_GCCNCX(attr,Treturn,nothrow,name,param,args)                                                    Treturn name param;
#define __CDECLARE_GCCNCX_OPT(attr,Treturn,nothrow,name,param,args)                                                Treturn name param;
#define __CDECLARE_VOID_GCCNCX(attr,nothrow,name,param,args)                                                       void name param;
#define __CDECLARE_VOID_GCCNCX_OPT(attr,nothrow,name,param,args)                                                   void name param;
#define __CREDIRECT_GCCNCX(attr,Treturn,nothrow,name,param,asmname,args)                                           Treturn name param;
#define __CREDIRECT_VOID_GCCNCX(attr,nothrow,name,param,asmname,args)                                              void name param;
#define __CVREDIRECT_GCCNCX(attr,Treturn,nothrow,name,param,asmname,args,before_va_start,varcount,vartypes)        Treturn name param;
#define __CVREDIRECT_VOID_GCCNCX(attr,nothrow,name,param,asmname,args,before_va_start,varcount,vartypes)           void name param;
#define __CVFREDIRECT_GCCNCX(attr,Treturn,nothrow,name,paramf,asmnamef,vparamf,vasmnamef,args,before_va_start)     Treturn name paramf;
#define __CVFREDIRECT_VOID_GCCNCX(attr,nothrow,name,paramf,asmnamef,vparamf,vasmnamef,args,before_va_start)        void name paramf;
#define __CXREDIRECT_GCCNCX(attr,Treturn,nothrow,name,param,asmname,code)                                          Treturn name param;
#define __CXREDIRECT_VOID_GCCNCX(attr,nothrow,name,param,asmname,code)                                             void name param;
#define __CREDIRECT_KOS_GCCNCX(attr,Treturn,nothrow,name,param,asmname,args)                                       Treturn name param;
#define __CREDIRECT_DOS_GCCNCX(attr,Treturn,nothrow,name,param,asmname,args)                                       Treturn name param;
#define __CREDIRECT_VOID_KOS_GCCNCX(attr,nothrow,name,param,asmname,args)                                          void name param;
#define __CREDIRECT_VOID_DOS_GCCNCX(attr,nothrow,name,param,asmname,args)                                          void name param;
#define __CVREDIRECT_KOS_GCCNCX(attr,Treturn,nothrow,name,param,asmname,args,before_va_start,varcount,vartypes)    Treturn name param;
#define __CVREDIRECT_DOS_GCCNCX(attr,Treturn,nothrow,name,param,asmname,args,before_va_start,varcount,vartypes)    Treturn name param;
#define __CVREDIRECT_VOID_KOS_GCCNCX(attr,nothrow,name,param,asmname,args,before_va_start,varcount,vartypes)       void name param;
#define __CVREDIRECT_VOID_DOS_GCCNCX(attr,nothrow,name,param,asmname,args,before_va_start,varcount,vartypes)       void name param;
#define __CVFREDIRECT_KOS_GCCNCX(attr,Treturn,nothrow,name,paramf,asmnamef,vparamf,vasmnamef,args,before_va_start) Treturn name paramf;
#define __CVFREDIRECT_DOS_GCCNCX(attr,Treturn,nothrow,name,paramf,asmnamef,vparamf,vasmnamef,args,before_va_start) Treturn name paramf;
#define __CVFREDIRECT_VOID_KOS_GCCNCX(attr,nothrow,name,paramf,asmnamef,vparamf,vasmnamef,args,before_va_start)    void name paramf;
#define __CVFREDIRECT_VOID_DOS_GCCNCX(attr,nothrow,name,paramf,asmnamef,vparamf,vasmnamef,args,before_va_start)    void name paramf;
#define __CXREDIRECT_KOS_GCCNCX(attr,Treturn,nothrow,name,param,asmname,code)                                      Treturn name param;
#define __CXREDIRECT_DOS_GCCNCX(attr,Treturn,nothrow,name,param,asmname,code)                                      Treturn name param;
#define __CXREDIRECT_VOID_KOS_GCCNCX(attr,nothrow,name,param,asmname,code)                                         void name param;
#define __CXREDIRECT_VOID_DOS_GCCNCX(attr,nothrow,name,param,asmname,code)                                         void name param;
#define __CEIDECLARE_GCCNCX(attr,Treturn,nothrow,name,param,...)                                                   Treturn name param;
#define __CEIREDIRECT_GCCNCX(attr,Treturn,nothrow,name,param,asmname,...)                                          Treturn name param;
#define __CEIDECLARE_DOS_GCCNCX(attr,Treturn,nothrow,name,param,...)                                               Treturn name param;
#define __CEIDECLARE_KOS_GCCNCX(attr,Treturn,nothrow,name,param,...)                                               Treturn name param;
#define __CEIREDIRECT_DOS_GCCNCX(attr,Treturn,nothrow,name,param,asmname,...)                                      Treturn name param;
#define __CEIREDIRECT_KOS_GCCNCX(attr,Treturn,nothrow,name,param,asmname,...)                                      Treturn name param;

#define KCALL
#define __KCALL
#define FCALL
#define __FCALL
#define VCALL
#define LIBCCALL
#define __LIBCCALL
#define LIBKCALL
#define __LIBKCALL
#define LIBDCALL
#define __LIBDCALL
#define VLIBCCALL
#define __VLIBCCALL
#define VLIBKCALL
#define __VLIBKCALL
#define VLIBDCALL
#define __VLIBDCALL
#define __LIBC
#define CC
#define FCC
#define __CC
#define __FCC
#define VCC
#define __VCC
#define FORMATPRINTER_CC
#define __FORMATPRINTER_CC
#define WFORMATPRINTER_CC
#define __WFORMATPRINTER_CC
#define C16FORMATPRINTER_CC
#define __C16FORMATPRINTER_CC
#define C32FORMATPRINTER_CC
#define __C32FORMATPRINTER_CC

#define __ATTR_MALL_DEFAULT_ALIGNED
#define ATTR_MALL_DEFAULT_ALIGNED
#define __ATTR_MALL_PAGEALIGNED
#define ATTR_MALL_PAGEALIGNED
#define __ATTR_LIBC_PRINTF(a,b)
#define ATTR_LIBC_PRINTF(a,b)
#define __ATTR_LIBC_PRINTF_P(a,b)
#define ATTR_LIBC_PRINTF_P(a,b)
#define __ATTR_LIBC_SCANF(a,b)
#define ATTR_LIBC_SCANF(a,b)
#define __ATTR_LIBC_STRFMON(a,b)
#define ATTR_LIBC_STRFMON(a,b)
#define __ATTR_LIBC_STRFTIME(a,b)
#define ATTR_LIBC_STRFTIME(a,b)
#define __ATTR_LIBC_WPRINTF(a,b)
#define ATTR_LIBC_WPRINTF(a,b)
#define __ATTR_LIBC_WPRINTF_P(a,b)
#define ATTR_LIBC_WPRINTF_P(a,b)
#define __ATTR_LIBC_WSCANF(a,b)
#define ATTR_LIBC_WSCANF(a,b)
#define __ATTR_LIBC_WCSFTIME(a,b)
#define ATTR_LIBC_WCSFTIME(a,b)
#define __ATTR_LIBC_C16PRINTF(a,b)
#define ATTR_LIBC_C16PRINTF(a,b)
#define __ATTR_LIBC_C16PRINTF_P(a,b)
#define ATTR_LIBC_C16PRINTF_P(a,b)
#define __ATTR_LIBC_C16SCANF(a,b)
#define ATTR_LIBC_C16SCANF(a,b)
#define __ATTR_LIBC_C16FTIME(a,b)
#define ATTR_LIBC_C16FTIME(a,b)
#define __ATTR_LIBC_C32PRINTF(a,b)
#define ATTR_LIBC_C32PRINTF(a,b)
#define __ATTR_LIBC_C32PRINTF_P(a,b)
#define ATTR_LIBC_C32PRINTF_P(a,b)
#define __ATTR_LIBC_C32SCANF(a,b)
#define ATTR_LIBC_C32SCANF(a,b)
#define __ATTR_LIBC_C32FTIME(a,b)
#define ATTR_LIBC_C32FTIME(a,b)
#define __ATTR_OPTIMIZE_SIZE
#define ATTR_OPTIMIZE_SIZE

#define __STDC_INT_AS_SSIZE_T   ssize_t
#define __STDC_INT_AS_SIZE_T    size_t
#define __STDC_LONG_AS_SIZE_T   size_t
#define __STDC_INT32_AS_SSIZE_T ssize_t
#define __STDC_INT32_AS_SIZE_T  size_t
#define __STDC_UINT_AS_SIZE_T   size_t
#define __STDC_UINT32_AS_SIZE_T size_t
#define __STDC_INT_AS_UINT_T    unsigned int
#define __TARGV   char *const argv[]
#define __TENVP   char *const envp[]
#define __TWARGV  wchar_t *const argv[]
#define __TWENVP  wchar_t *const envp[]
#define __T16ARGV char16_t *const argv[]
#define __T16ENVP char16_t *const envp[]
#define __T32ARGV char32_t *const argv[]
#define __T32ENVP char32_t *const envp[]
#define __FILE    FILE



// <kos/anno.h>
#define PHYS
#define __PHYS
#define VIRT
#define __VIRT
#define NCX
#define __NCX
#define KERNEL
#define __KERNEL
#define UNCHECKED
#define __UNCHECKED
#define WEAK
#define __WEAK
#define REF
#define __REF
#define REF_IF(x)
#define __REF_IF(x)
#define FREE
#define __FREE
#define NOBLOCK
#define __NOBLOCK
#define NOBLOCK_IF(x)
#define __NOBLOCK_IF(x)
#define BLOCKING
#define __BLOCKING
#define BLOCKING_IF(x)
#define __BLOCKING_IF(x)
#define NOPREEMPT
#define __NOPREEMPT
#define ABNORMAL_RETURN
#define __ABNORMAL_RETURN
#define PAGEDIR_PAGEALIGNED
#define THROWS(...)
#define __THROWS(...)
#define THROWS_INDIRECT(...)
#define __THROWS_INDIRECT(...)



// <stddef.h>
#define typeof_field(...) int


// <libxxx/api.h>
#define LIBANSITTY_CC
#define LIBANSITTY_DECL
#define LIBBIOS86_CC
#define LIBBIOS86_DECL
#define LIBBUFFER_CC
#define LIBBUFFER_DECL
#define LIBCMDLINE_CC
#define LIBCMDLINE_DECL
#define LIBCPUSTATE_CC
#define LIBCPUSTATE_DECL
#define LIBDEBUGINFO_CC
#define LIBDEBUGINFO_DECL
#define LIBDEMANGLE_CC
#define LIBDEMANGLE_DECL
#define LIBDEMANGLE_VCC
#define LIBDISASM_CC
#define LIBDISASM_DECL
#define LIBDL_CC
#define LIBDL_DECL
#define LIBDL_VCC
#define LIBEMU86_CC
#define LIBEMU86_DECL
#define LIBEMU86_IMPL
#define LIBICONV_CC
#define LIBICONV_DECL
#define LIBINSTRLEN_CC
#define LIBINSTRLEN_DECL
#define LIBJSON_CC
#define LIBJSON_DECL
#define LIBKEYMAP_CC
#define LIBKEYMAP_DECL
#define LIBM_CC
#define LIBM_DECL
#define LIBM_VCC
#define LIBPCIACCESS_CC
#define LIBPCIACCESS_DECL
#define LIBPHYS_CC
#define LIBPHYS_DECL
#define LIBREGDUMP_CC
#define LIBREGDUMP_DECL
#define LIBREGEX_CC
#define LIBREGEX_DECL
#define LIBSCTRACE_CC
#define LIBSCTRACE_DECL
#define LIBSERVICE_CC
#define LIBSERVICE_DECL
#define LIBSVGADRV_CC
#define LIBSVGADRV_DECL
#define LIBTERM_CC
#define LIBTERM_DECL
#define LIBUNWIND_CC
#define LIBUNWIND_DECL
#define LIBVIDEO_GFX_FCC
#define LIBVIDEO_GFX_DECL
#define LIBVIDEO_GFX_CC
#define LIBVIDEO_GFX_DECL
#define LIBVIDEO_DRIVER_CC
#define LIBVIDEO_DRIVER_DECL
#define LIBVIDEO_COMPOSITOR_CC
#define LIBVIDEO_COMPOSITOR_DECL
#define LIBVIOCORE_CC
#define LIBVIOCORE_DECL
#define LIBVIO_CC
#define LIBVIO_DECL
#define LIBVM86_CC
#define LIBVM86_DECL
#define LIBZLIB_CC
#define LIBZLIB_DECL
#define DLFCN_CC
#define __DLFCN_CC
#define DLFCN_VCC
#define __DLFCN_VCC
#define __DLFCN_DLTLSADDR_CC
#define __DLFCN_DLTLSADDR2_CC
#define DI_DEBUGINFO_CU_PARSER_EACHATTR(a,b) for(;;)
#define ANSITTY_INTERNAL(x) x
#define DEFINE_TEST(x) static void test_##x(void)
#define PCI_FOREACH(...) for(;;)
#define PCI_FOREACH_CLASS(...) for(;;)
#define PCI_FOREACH_DEVICE_CLASS(...) for(;;)
#define __NRFEAT_SYSCALL_TABLE_FOREACH(cb) cb(0) cb(1)



// <sys/bitstring.h>
#define bit_decl(x,n) x[n]
#define bit_foreach(x,y,z) for(;;)



// <kos/exec/idata.h>
#define DEFINE_PUBLIC_IFUNC(n,r) int n(){}
#define DEFINE_PUBLIC_IDATA(n,r,s) int n(){}
#define DEFINE_PRIVATE_SYMBOL(n,v,s) ;int n(){};
#define DEFINE_PUBLIC_SYMBOL(n,v,s) ;int n(){};
#define DEFINE_INTERN_SYMBOL(n,v,s) ;int n(){};
#define DEFINE_PRIVATE_WEAK_SYMBOL(n,v,s) ;int n(){};
#define DEFINE_PUBLIC_WEAK_SYMBOL(n,v,s) ;int n(){};
#define DEFINE_INTERN_WEAK_SYMBOL(n,v,s) ;int n(){};



// <kos/aref.h>
#define ARREF(name,type) struct name{struct type*arr_obj;uintptr_t arr_cnt;}
#define AXREF(name,type) struct name{struct type*axr_obj;uintptr_t axr_cnt;}
#define AWREF(name,type) struct name{struct type*awr_obj;uintptr_t awr_cnt;}



// <kos/lockop.h>
#define Tobpostlockop(T)            struct obpostlockop
#define Toblockop(T)                struct oblockop
#define Toblockop_slist(T)          struct oblockop_slist
#define Tobpostlockop_slist(T)      struct obpostlockop_slist
#define Tobpostlockop_callback_t(T) obpostlockop_callback_t
#define Toblockop_callback_t(T)     oblockop_callback_t



// <kos/refcnt.h>
#define __REFCNT_CC
#define __REFCNT_NOTHROW
#define __REFCNT_DESTROY_NOTHROW
#define REFCNT_METHODS(T) int
#define REFCNT_METHODS_P(i) int
#define REFCNT_METHODS_BASE(T) int
#define REFCNT_METHODS_BASE_P(i) int
#define WEAKREFCNT_METHODS(T) int
#define WEAKREFCNT_METHODS_P(i) int
#define WEAKREFCNT_METHODS_BASE(T) int
#define WEAKREFCNT_METHODS_BASE_P(i) int
#define __REFCNT_METHODS(T) int
#define __REFCNT_METHODS_P(i) int
#define __REFCNT_METHODS_BASE(T) int
#define __REFCNT_METHODS_BASE_P(i) int
#define __WEAKREFCNT_METHODS(T) int
#define __WEAKREFCNT_METHODS_P(i) int
#define __WEAKREFCNT_METHODS_BASE(T) int
#define __WEAKREFCNT_METHODS_BASE_P(i) int
#define __DEFINE_REFCNT_FUNCTIONS(...)
#define __DEFINE_REFCNT_FUNCTIONS_P(...)
#define __DEFINE_REFCNT_FUNCTIONS_X(...)
#define __DEFINE_WEAKREFCNT_FUNCTIONS(...)
#define __DEFINE_WEAKREFCNT_FUNCTIONS_P(...)
#define __DEFINE_WEAKREFCNT_FUNCTIONS_X(...)
#define __DEFINE_NONATOMIC_REFCNT_FUNCTIONS(...)
#define __DEFINE_NONATOMIC_REFCNT_FUNCTIONS_P(...)
#define __DEFINE_NONATOMIC_REFCNT_FUNCTIONS_X(...)
#define __DEFINE_NONATOMIC_WEAKREFCNT_FUNCTIONS(...)
#define __DEFINE_NONATOMIC_WEAKREFCNT_FUNCTIONS_P(...)
#define __DEFINE_NONATOMIC_WEAKREFCNT_FUNCTIONS_X(...)
#define DEFINE_REFCNT_FUNCTIONS(...)
#define DEFINE_REFCNT_FUNCTIONS_P(...)
#define DEFINE_WEAKREFCNT_FUNCTIONS(...)
#define DEFINE_WEAKREFCNT_FUNCTIONS_P(...)



// <kos/syscalls.h>
#define __CDECLARE_SC(attr,Treturn,name,param,args)  Treturn sys_##name param;
#define __CDECLARE_VOID_SC(attr,name,param,args)     void sys_##name param;
#define __CDECLARE_XSC(attr,Treturn,name,param,args) Treturn sys_X##name param;
#define __CDECLARE_VOID_XSC(attr,name,param,args)    void sys_X##name param;



// <kos/except.h>
#define TRY
#define __TRY
#define NESTED_TRY
#define __NESTED_TRY
#define UNNESTED_TRY
#define __UNNESTED_TRY
#define NOEXCEPT_START
#define __NOEXCEPT_START
#define NOEXCEPT_END
#define __NOEXCEPT_END
#define EXCEPT
#define __EXCEPT
#define RETHROW() throw
#define THROW(...) except_throw(0)
#define __CATCH(...)
#define CATCH(...)
#define RAII_FINALLY
#define __RAII_FINALLY



// <kos/exec/elf.h>
#define ELFW(x) ELF64_##x
#define ElfW(x) Elf64_##x
#define elfW(x) elf64_##x
#define COMPAT_ElfW(x) Elf32_##x
#define COMPAT_ELFW(x) ELF32_##x
#define COMPAT_elfW(x) elf32_##x
#define __ARCH_COMPAT(x) x##32
#define MY_ElfW(x) ELF64_##x
#define MY_ELFW(x) Elf64_##x



// <kos/bits/nopf.h>
#define __X86_NOPF_DEFFUN(n) void n(void);



// <bits/types.h>
#define __FS_TYPE(x)       x##_t
#define __FS_ALTTYPE(x)    x##_t
#define __FS_SIZEOF(x)     __SIZEOF_##x##_T__
#define __FS_ALTSIZEOF(x)  __SIZEOF_##x##_T__
#define __FS_ALIGNOF(x)    __ALIGNOF_##x##_T__
#define __FS_ALTALIGNOF(x) __ALIGNOF_##x##_T__
#define __TM_TYPE(x)       x##_t
#define __TM_ALTTYPE(x)    x##_t
#define __TM_SIZEOF(x)     __SIZEOF_##x##_T__
#define __TM_ALTSIZEOF(x)  __SIZEOF_##x##_T__
#define __TM_ALIGNOF(x)    __ALIGNOF_##x##_T__
#define __TM_ALTALIGNOF(x) __ALIGNOF_##x##_T__
#define __SOCKADDR_COMMON(x) sa_family_t x##family
#define __CRT_PRIVATE_SINT(sizeof)  int
#define __CRT_PRIVATE_UINT(sizeof)  unsigned
#define __CRT_PRIVATE_SLNG(sizeof)  long
#define __CRT_PRIVATE_ULNG(sizeof)  unsigned long
#define __TYPEFOR_INTIB(n)          int
#define __TYPEFOR_UINTIB(n)         unsigned
#define __s8  s8
#define __u8  u8
#define __s16 s16
#define __u16 u16
#define __s32 s32
#define __u32 u32
#define __s64 s64
#define __u64 u64
#define __int8_t           int8_t
#define __uint8_t          uint8_t
#define __int16_t          int16_t
#define __uint16_t         uint16_t
#define __int32_t          int32_t
#define __uint32_t         uint32_t
#define __int64_t          int64_t
#define __uint64_t         uint64_t
#define __size_t           size_t
#define __ptrdiff_t        ptrdiff_t
#define __PIO_OFFSET       pos_t
#define __PIO_OFFSET64     pos64_t
#define __ssize_t          ssize_t
#define __intptr_t         intptr_t
#define __uintptr_t        uintptr_t
#define __byte_t           byte_t
#define __register_t       register_t
#define __sregister_t      sregister_t
#define __quad_t           quad_t
#define __u_quad_t         u_quad_t
#define __syscall_slong_t  syscall_slong_t
#define __syscall_ulong_t  syscall_ulong_t
#define __errno_t          errno_t
#define __signo_t          signo_t
#define __oflag_t          oflag_t
#define __mode_t           mode_t
#define __atflag_t         atflag_t
#define __iomode_t         iomode_t
#define __fd_t             fd_t
#define __ufd_t            ufd_t
#define __major_t          major_t
#define __minor_t          minor_t
#define __dev_t            dev_t
#define __id_t             id_t
#define __pid_t            pid_t
#define __upid_t           upid_t
#define __key_t            key_t
#define __daddr_t          daddr_t
#define __caddr_t          caddr_t
#define __qaddr_t          qaddr_t
#define __off_t            off_t
#define __off32_t          off32_t
#define __off64_t          off64_t
#define __blkcnt_t         blkcnt_t
#define __blkcnt32_t       blkcnt32_t
#define __blkcnt64_t       blkcnt64_t
#define __fsblkcnt_t       fsblkcnt_t
#define __fsblkcnt32_t     fsblkcnt32_t
#define __fsblkcnt64_t     fsblkcnt64_t
#define __fsfilcnt_t       fsfilcnt_t
#define __fsfilcnt32_t     fsfilcnt32_t
#define __fsfilcnt64_t     fsfilcnt64_t
#define __ino_t            ino_t
#define __ino32_t          ino32_t
#define __ino64_t          ino64_t
#define __pos_t            pos_t
#define __pos32_t          pos32_t
#define __pos64_t          pos64_t
#define __loff_t           loff_t
#define __lpos_t           lpos_t
#define __socklen_t        socklen_t
#define __ssocklen_t       ssocklen_t
#define __rlim_t           rlim_t
#define __rlim32_t         rlim32_t
#define __rlim64_t         rlim64_t
#define __blksize_t        blksize_t
#define __nlink_t          nlink_t
#define __fsid_t           fsid_t
#define __time_t           time_t
#define __time32_t         time32_t
#define __time64_t         time64_t
#define __clock_t          clock_t
#define __suseconds_t      suseconds_t
#define __clockid_t        clockid_t
#define __gid_t            gid_t
#define __uid_t            uid_t
#define __ioctl_t          ioctl_t
#define __fcntl_t          fcntl_t
#define __useconds_t       useconds_t
#define __timer_t          timer_t
#define __fsword_t         fsword_t
#define __locale_t         locale_t
#define __sighandler_t     sighandler_t
#define __sa_family_t      sa_family_t
#define __port_t           port_t



// <bits/[...].h>
#define __WAIT_STATUS      union wait *
#define __mbstate          mbstate_t
#define __wctype_t         wctype_t
#define __wctrans_t        wctrans_t
#define __shift_t          shift_t
#define __except_handler_t except_handler_t
#define __EXCEPT_HANDLER_CC
#define __EXCEPT_REGISTER_STATE_TYPE except_register_state_t
#define __except_code_t    except_code_t
#define __except_class_t   except_class_t
#define __except_subclass_t except_subclass_t
#define __postlockop_callback_t postlockop_callback_t
#define __obpostlockop_callback_t obpostlockop_callback_t
#define __lockop_callback_t lockop_callback_t
#define __oblockop_callback_t oblockop_callback_t
#define __rtm_status_t     rtm_status_t
#define __shared_lock_timespec struct timespec const *
#define __shared_rwlock_timespec struct timespec const *
#define __shared_recursive_lock_tid_t __hybrid_tid_t
#define __shared_recursive_rwlock_tid_t __hybrid_tid_t
#define __USERKERN_PAD_PID(x)
#define __USERKERN_PAD_UID(x)
#define __USERKERN_PAD_GID(x)
#define __uuid_t           uuid_t
#define __sigset_struct    sigset_t
#define __timespec         timespec
#define __timespec32       timespec32
#define __timespec64       timespec64
#define timespecx64        timespec64
#define __timespecx64      timespec64
#define timespecx32_64     timespec64
#define __timespecx32_64   timespec64
#define __timespec_alt     timespec64
#define __itimerspec       itimerspec
#define __itimerspec32     itimerspec32
#define __itimerspec64     itimerspec64
#define itimerspecx64      itimerspec64
#define __itimerspecx64    itimerspec64
#define itimerspecx32_64   itimerspec64
#define __itimerspecx32_64 itimerspec64
#define __itimerspec_alt   itimerspec64
#define __timeval          timeval
#define __timeval32        timeval32
#define __timeval64        timeval64
#define timevalx64         timeval64
#define __timevalx64       timeval64
#define timevalx32_64      timeval64
#define __timevalx32_64    timeval64
#define __timeval_alt      timeval64
#define __itimerval        itimerval
#define __itimerval32      itimerval32
#define __itimerval64      itimerval64
#define itimervalx64       itimerval64
#define __itimervalx64     itimerval64
#define itimervalx32_64    itimerval64
#define __itimervalx32_64  itimerval64
#define __itimerval_alt    itimerval64
#define __mqd_t            mqd_t
#define __stat             stat
#define __stat32           stat32
#define __stat64           stat64
#define __cpu_set_struct   cpu_set_t
#define __dirent           dirent
#define __dirent32         dirent32
#define __dirent64         dirent64
#define __flock            flock
#define __flock32          flock32
#define __flock64          flock64
#define flockx64           flock64
#define __flockx64         flock64
#define flockx32_64        flock64
#define __flockx32_64      flock64
#define __flock_alt        flock64
#define __rlimit           rlimit
#define __rlimit32         rlimit32
#define __rlimit64         rlimit64
#define rlimitx64          rlimit64
#define __rlimitx64        rlimit64
#define rlimitx32_64       rlimit64
#define __rlimitx32_64     rlimit64
#define __rlimit_alt       rlimit64
#define __rusage           rusage
#define __rusage32         rusage32
#define __rusage64         rusage64
#define rusagex64          rusage64
#define __rusagex64        rusage64
#define rusagex32_64       rusage64
#define __rusagex32_64     rusage64
#define __rusage_alt       rusage64
#define __sigaction_sa_sigaction_t sigaction_sa_sigaction_t
#define __sigaction_sa_restorer_t sigaction_sa_restorer_t
#define __sigaction_sa_handler_t sighandler_t
#define __sighandler_t     sighandler_t
#define __pthread_attr     pthread_attr_t
#define __siginfo_struct   siginfo_t
#define __statfs           statfs
#define __statfs32         statfs32
#define __statfs64         statfs64
#define statfsx64          statfs64
#define __statfsx64        statfs64
#define statfsx32_64       statfs64
#define __statfsx32_64     statfs64
#define __statfs_alt       statfs64
#define __statvfs          statvfs
#define __statvfs32        statvfs32
#define __statvfs64        statvfs64
#define __timeb            timeb
#define __timeb32          timeb32
#define __timeb64          timeb64
#define timebx64           timeb64
#define __timebx64         timeb64
#define timebx32_64        timeb64
#define __timebx32_64      timeb64
#define __timeb_alt        timeb64
#define __timex            timex
#define __timex32          timex32
#define __timex64          timex64
#define __utimbuf          utimbuf
#define __utimbuf32        utimbuf32
#define __utimbuf64        utimbuf64
#define utimbufx64         utimbuf64
#define __utimbufx64       utimbuf64
#define utimbufx32_64      utimbuf64
#define __utimbufx32_64    utimbuf64
#define __utimbuf_alt      utimbuf64
#define __aiocb            aiocb
#define __aiocb32          aiocb32
#define __aiocb64          aiocb64
#define __div_struct       div_t
#define __ldiv_struct      ldiv_t
#define __lldiv_struct     lldiv_t
#define __fexcept_t        fexcept_t
#define __fenv_struct      fenv_t
#define __pformatprinter   pformatprinter
#define __pformatgetc      pformatgetc
#define __pformatungetc    pformatungetc
#define __pwformatprinter  pwformatprinter
#define __pc16formatprinter pc16formatprinter
#define __pc32formatprinter pc32formatprinter
#define _ftsent            ftsent
#define __ftsent           ftsent
#define _ftsent32          ftsent32
#define __ftsent32         ftsent32
#define _ftsent64          ftsent64
#define __ftsent64         ftsent64
#define __fts              fts
#define __fts32            fts32
#define __fts64            fts64
#define __FTW              FTW
#define __glob_struct      glob_t
#define __glob_struct32    glob32_t
#define __glob_struct64    glob64_t
#define __IO_FILE          FILE
#define __locale_struct    locale_t
#define __ntptimeval       ntptimeval
#define __ntptimeval32     ntptimeval32
#define __ntptimeval64     ntptimeval64
#define __posix_spawnattr  posix_spawnattr_t
#define __posix_spawn_file_actions posix_spawn_file_actions_t
#define __pthread_key_t    pthread_key_t
#define __pthread_once_t   pthread_once_t
#define __pthread_t        pthread_t
#define __pthread_attr     pthread_attr_t
#define __pthread_attr_s   pthread_attr_t
#define __pthread_attr_t   pthread_attr_t
#define __pthread_mutexattr pthread_mutexattr_t
#define __pthread_mutexattr_s pthread_mutexattr_t
#define __pthread_mutexattr_t pthread_mutexattr_t
#define __pthread_mutex    pthread_mutex_t
#define __pthread_mutex_s  pthread_mutex_t
#define __pthread_mutex_t  pthread_mutex_t
#define __pthread_condattr pthread_condattr_t
#define __pthread_condattr_s pthread_condattr_t
#define __pthread_condattr_t pthread_condattr_t
#define __pthread_cond     pthread_cond_t
#define __pthread_cond_s   pthread_cond_t
#define __pthread_cond_t   pthread_cond_t
#define __pthread_rwlockattr pthread_rwlockattr_t
#define __pthread_rwlockattr_s pthread_rwlockattr_t
#define __pthread_rwlockattr_t pthread_rwlockattr_t
#define __pthread_rwlock   pthread_rwlock_t
#define __pthread_rwlock_s pthread_rwlock_t
#define __pthread_rwlock_t pthread_rwlock_t
#define __pthread_barrierattr pthread_barrierattr_t
#define __pthread_barrierattr_s pthread_barrierattr_t
#define __pthread_barrierattr_t pthread_barrierattr_t
#define __pthread_barrier  pthread_barrier_t
#define __pthread_barrier_s pthread_barrier_t
#define __pthread_barrier_t pthread_barrier_t
#define __reg_syntax_t     reg_syntax_t
#define __regoff_t         regoff_t
#define __re_registers     re_registers
#define __regmatch         regmatch_t
#define __sem_t            sem_t
#define __fpos_t           pos_t
#define __fpos32_t         pos32_t
#define __fpos64_t         pos64_t
#define __tss_t            tss_t
#define __thrd_t           thrd_t
#define __once_flag        once_flag
#define __mtx_t            mtx_t
#define __cnd_t            cnd_t
#define __wordexp_struct   wordexp_t
#define __fd_mask          fd_mask
#define __fd_set_struct    fd_set
#define __EXCEPT_UNWIND_CC
#define __EXCEPT_THROW_CC
#define __EXCEPT_THROWN_CC
#define __EXCEPT_NESTING_BEGIN_CC
#define __EXCEPT_NESTING_END_CC
#define PRPC_EXEC_CALLBACK_CC
#define __LOCKOP_CC
#define LOCKOP_CC



// <ieee854.h>
#define __IEEE754_FLOAT_TYPE__ float
#define __IEEE754_DOUBLE_TYPE__ double
#define __IEEE854_LONG_DOUBLE_TYPE__ long double



// Misc...
#define __restrict_111080



// <kos/[...].h> + <kernel/[...].h>
#define _os_heap_gfparg(v) ,int v
#define _os_heap_gfppar(v) ,v
#define os_heap_gfparg_(v) int v,
#define os_heap_gfppar_(v) v,
#define os_heap_gfparg(v) int v
#define os_heap_gfppar(v) v
#define os_heap_gfpvar(v) int v;

#define IOV_BUFFER_FOREACH(ent,self) for(;;)
#define IOV_BUFFER_FOREACH_N(ent,self) for(;;)
#define IOV_PHYSBUFFER_FOREACH(ent,self) for(;;)
#define IOV_PHYSBUFFER_FOREACH_N(ent,self) for(;;)

#define compat_funcptr(return,cc,name,args) return (cc *name)args
#define compat_ptr(T) T *

#define ATTR_FREETEXT
#define ATTR_FREERODATA
#define ATTR_FREEDATA
#define ATTR_FREEBSS
#define ATTR_FREETEXT_S(x)
#define ATTR_FREERODATA_S(x)
#define ATTR_FREEDATA_S(x)
#define ATTR_FREEBSS_S(x)
#define ATTR_HOTTEXT
#define ATTR_HOTRODATA
#define ATTR_HOTDATA
#define ATTR_HOTBSS
#define ATTR_HOTTEXT_S(x)
#define ATTR_HOTRODATA_S(x)
#define ATTR_HOTDATA_S(x)
#define ATTR_HOTBSS_S(x)
#define ATTR_READMOSTLY
#define ATTR_WRITEMOSTLY
#define ATTR_READMOSTLY_S(x)
#define ATTR_WRITEMOSTLY_S(x)
#define ATTR_COLDTEXT
#define ATTR_COLDRODATA
#define ATTR_COLDDATA
#define ATTR_COLDBSS
#define ATTR_COLDTEXT_S(x)
#define ATTR_COLDRODATA_S(x)
#define ATTR_COLDDATA_S(x)
#define ATTR_COLDBSS_S(x)
#define ATTR_TEXT
#define ATTR_RODATA
#define ATTR_DATA
#define ATTR_BSS
#define ATTR_TEXT_S(x)
#define ATTR_RODATA_S(x)
#define ATTR_DATA_S(x)
#define ATTR_BSS_S(x)
#define ATTR_PERCPU
#define ATTR_PERMMAN
#define ATTR_PERTASK
#define ATTR_DBGTEXT
#define ATTR_DBGRODATA
#define ATTR_DBGSTRINGS
#define ATTR_DBGDATA
#define ATTR_DBGBSS
#define ATTR_DBGTEXT_S(x)
#define ATTR_DBGRODATA_S(x)
#define ATTR_DBGDATA_S(x)
#define ATTR_DBGBSS_S(x)
#define ATTR_DBG_HOOK
#define FREESTR
#define DBGSTR
#define ATTR_MALL_UNTRACKED
#define DRIVER_CONST const
#define DRIVER_INIT
#define DRIVER_FINI
#define ATTR_KERNEL_PANIC_NORETURN
#define TEXTSECTION
#define STRINGSECTION
#define REPR_TEXTSECTION
#define REPR_RODATASECTION
#define REPR_STRINGSECTION
#define PRINT_TEXTSECTION
#define PRINT_STRINGSECTION
#define SECTION_DEBUG_TEXT(x)
#define SECTION_DEBUG_BSS(x)
#define SECTION_DEBUG_STRING(x)
#define UCHAR16_TEXT(x)
#define UCHAR32_TEXT(x)
#define UCHAR_TEXT
#define SECTION_EXCEPT_TEXT
#define SECTION_EXCEPT_DATA
#define SECTION_EXCEPT_BSS
#define SECTION_EXCEPT_RODATA
#define SECTION_EXCEPT_STRING

#define ATTR_BLOCKLIKE_GFP(x)
#define ATTR_BLOCKLIKE_CC(x)

#define CALLBACK_LIST(p) callback_list< p >

#define DEFINE_SYSCALL0(return_type,name)                                     return_type sys_##name(void)
#define DEFINE_SYSCALL1(return_type,name,T0,N0)                               return_type sys_##name(T0 N0)
#define DEFINE_SYSCALL2(return_type,name,T0,N0,T1,N1)                         return_type sys_##name(T0 N0,T1 N1)
#define DEFINE_SYSCALL3(return_type,name,T0,N0,T1,N1,T2,N2)                   return_type sys_##name(T0 N0,T1 N1,T2 N2)
#define DEFINE_SYSCALL4(return_type,name,T0,N0,T1,N1,T2,N2,T3,N3)             return_type sys_##name(T0 N0,T1 N1,T2 N2,T3 N3)
#define DEFINE_SYSCALL5(return_type,name,T0,N0,T1,N1,T2,N2,T3,N3,T4,N4)       return_type sys_##name(T0 N0,T1 N1,T2 N2,T3 N3,T4 N4)
#define DEFINE_SYSCALL6(return_type,name,T0,N0,T1,N1,T2,N2,T3,N3,T4,N4,T5,N5) return_type sys_##name(T0 N0,T1 N1,T2 N2,T3 N3,T4 N4,T5 N5)
#define DEFINE_COMPAT_SYSCALL0(return_type,name)                                     static return_type sys32_##name(void)
#define DEFINE_COMPAT_SYSCALL1(return_type,name,T0,N0)                               static return_type sys32_##name(T0 N0)
#define DEFINE_COMPAT_SYSCALL2(return_type,name,T0,N0,T1,N1)                         static return_type sys32_##name(T0 N0,T1 N1)
#define DEFINE_COMPAT_SYSCALL3(return_type,name,T0,N0,T1,N1,T2,N2)                   static return_type sys32_##name(T0 N0,T1 N1,T2 N2)
#define DEFINE_COMPAT_SYSCALL4(return_type,name,T0,N0,T1,N1,T2,N2,T3,N3)             static return_type sys32_##name(T0 N0,T1 N1,T2 N2,T3 N3)
#define DEFINE_COMPAT_SYSCALL5(return_type,name,T0,N0,T1,N1,T2,N2,T3,N3,T4,N4)       static return_type sys32_##name(T0 N0,T1 N1,T2 N2,T3 N3,T4 N4)
#define DEFINE_COMPAT_SYSCALL6(return_type,name,T0,N0,T1,N1,T2,N2,T3,N3,T4,N4,T5,N5) static return_type sys32_##name(T0 N0,T1 N1,T2 N2,T3 N3,T4 N4,T5 N5)
#define DEFINE_SYSCALL32_0(return_type,name)                                     static return_type sys32_##name(void)
#define DEFINE_SYSCALL32_1(return_type,name,T0,N0)                               static return_type sys32_##name(T0 N0)
#define DEFINE_SYSCALL32_2(return_type,name,T0,N0,T1,N1)                         static return_type sys32_##name(T0 N0,T1 N1)
#define DEFINE_SYSCALL32_3(return_type,name,T0,N0,T1,N1,T2,N2)                   static return_type sys32_##name(T0 N0,T1 N1,T2 N2)
#define DEFINE_SYSCALL32_4(return_type,name,T0,N0,T1,N1,T2,N2,T3,N3)             static return_type sys32_##name(T0 N0,T1 N1,T2 N2,T3 N3)
#define DEFINE_SYSCALL32_5(return_type,name,T0,N0,T1,N1,T2,N2,T3,N3,T4,N4)       static return_type sys32_##name(T0 N0,T1 N1,T2 N2,T3 N3,T4 N4)
#define DEFINE_SYSCALL32_6(return_type,name,T0,N0,T1,N1,T2,N2,T3,N3,T4,N4,T5,N5) static return_type sys32_##name(T0 N0,T1 N1,T2 N2,T3 N3,T4 N4,T5 N5)
#define DEFINE_SYSCALL64_0(return_type,name)                                     return_type sys_##name(void)
#define DEFINE_SYSCALL64_1(return_type,name,T0,N0)                               return_type sys_##name(T0 N0)
#define DEFINE_SYSCALL64_2(return_type,name,T0,N0,T1,N1)                         return_type sys_##name(T0 N0,T1 N1)
#define DEFINE_SYSCALL64_3(return_type,name,T0,N0,T1,N1,T2,N2)                   return_type sys_##name(T0 N0,T1 N1,T2 N2)
#define DEFINE_SYSCALL64_4(return_type,name,T0,N0,T1,N1,T2,N2,T3,N3)             return_type sys_##name(T0 N0,T1 N1,T2 N2,T3 N3)
#define DEFINE_SYSCALL64_5(return_type,name,T0,N0,T1,N1,T2,N2,T3,N3,T4,N4)       return_type sys_##name(T0 N0,T1 N1,T2 N2,T3 N3,T4 N4)
#define DEFINE_SYSCALL64_6(return_type,name,T0,N0,T1,N1,T2,N2,T3,N3,T4,N4,T5,N5) return_type sys_##name(T0 N0,T1 N1,T2 N2,T3 N3,T4 N4,T5 N5)

#define TASK_POLL_BEFORE_CONNECT(...)

#define DEFINE_HANDLE_REFCNT_FUNCTIONS(name,T) \
	refcnt_t handle_##name##_refcnt(T const *restrict self){}\
	void handle_##name##_incref(T *restrict self){}\
	void handle_##name##_decref(T *restrict self){}\
	bool handle_##name##_tryincref(T *restrict self){}\
	void *handle_##name##_weakgetref(T *restrict self){}\
	T *handle_##name##_weaklckref(void *restrict weakref_ptr){}\
	void handle_##name##_weakdecref(void *restrict self){}
#define DEFINE_HANDLE_REFCNT_FUNCTIONS_WITH_WEAKREF_SUPPORT(name,T) \
	refcnt_t handle_##name##_refcnt(T const *restrict self){}\
	void handle_##name##_incref(T *restrict self){}\
	void handle_##name##_decref(T *restrict self){}\
	bool handle_##name##_tryincref(T *restrict self){}\
	void *handle_##name##_weakgetref(T *restrict self){}\
	T *handle_##name##_weaklckref(void *restrict weakref_ptr){}\
	void handle_##name##_weakdecref(void *restrict self){}

#define DBG_CALL
#define DBG_COMMAND(name,...)            static intptr_t dbg_command_##name(size_t argc,char *argv[])
#define DBG_COMMAND_AUTO(name,...)       static intptr_t dbg_command_##name(size_t argc,char *argv[])
#define DBG_NAMED_COMMAND(name,...)      static intptr_t dbg_command_##name(size_t argc,char *argv[])
#define DBG_NAMED_COMMAND_AUTO(name,...) static intptr_t dbg_command_##name(size_t argc,char *argv[])
#define DBG_INIT(func)  void dbg_init_##func(void)
#define DBG_RESET(func) void dbg_reset_##func(void)
#define DBG_FINI(func)  void dbg_fini_##func(void)
#define DEFINE_DBG_BZERO(...)
#define DEFINE_DBG_BZERO_IF(...)
#define DEFINE_DBG_BZERO_VECTOR(...)
#define DEFINE_DBG_BZERO_OBJECT(...)
#define DBG_DEFHOOK_INIT(...)
#define DBG_DEFHOOK_RESET(...)
#define DBG_DEFHOOK_FINI(...)
#define DBG_DEFHOOK_COMMAND(...)
#define DBG_AUTOCOMPLETE(name,argc,argv,cb,arg,...) void autocomplete_##name(size_t argc,char *argv[],dbg_autocomplete_cb_t cb,void *arg)

#define SYSCALL_RETURN_TYPE_OF(...) int
#define SYSCALL_ARG_TYPE_OF(...) int
#define COMPAT_SYSCALL_RETURN_TYPE_OF(...) int
#define COMPAT_SYSCALL_ARG_TYPE_OF(...) int

#define PAGEDIR_P_BEGINUSE(...)
#define PAGEDIR_P_ENDUSE(...)
#define SLAB_FOREACH_SIZE(f,_) f(8,_)f(16,_)f(24,_)f(32,_)
#define FOREACH_thiscpu_threads(...) for(;;)
#define FOREACH_thiscpu_running(...) for(;;)
#define FOREACH_thiscpu_waiting(...) for(;;)
#define FOREACH_thiscpu_sched_pending(...) for(;;)
#define FOREACH_procgrp_memb(...) for(;;)
#define FOREACH_procctl_thrds(...) for(;;)
#define FOREACH_procctl_chlds(...) for(;;)

#define DEFINE_ABS_CALLBACK(...)
#define DEFINE_REL_CALLBACK(...)
#define DEFINE_CALLBACK(...)
#define DEFINE_PERTASK_FINI(f)

#define PAGEDIR_P_BEGINUSE(...)
#define PAGEDIR_P_ENDUSE(...)
#define PAGEDIR_P_BEGINUSE_KEEP_PR(...)
#define PAGEDIR_P_ENDUSE_KEEP_PR(...)

#define IF_HAVE_PHYS_IDENTITY(...) __VA_ARGS__
#define IF_PHYS_IDENTITY(a,b,...) do{__VA_ARGS__;}while(0)
#define IF_PHYS_IDENTITY_PAGE(a,...) do{__VA_ARGS__;}while(0)
#define PHYS_VARS byte_t *trampoline
#define HANDLE_FOREACH_TYPE(x) x(_,fdirent)x(_,filehandle)x(_,taskpid)x(_,epoll_controller)x(_,pipe_reader)x(_,pipe_writer)x(_,driver_state)x(_,mfutexfd)x(_,refcountable)x(_,timerfd)
#define HANDLE_FOREACH_CUSTOMTYPE(x) x(_,mfile)x(_,driver)x(_,socket)x(_,refcountable)

#define DEFINE_CMDLINE_FLAG_VAR(flagname,parname) bool flagname;
#define DEFINE_CMDLINE_PARAM_STRING_VAR(string_name,parname) char string_name[];
#define DEFINE_CMDLINE_PARAM_INT8_VAR(varname,parname,defl) int8_t varname;
#define DEFINE_CMDLINE_PARAM_INT16_VAR(varname,parname,defl) int16_t varname;
#define DEFINE_CMDLINE_PARAM_INT32_VAR(varname,parname,defl) int32_t varname;
#define DEFINE_CMDLINE_PARAM_INT64_VAR(varname,parname,defl) int64_t varname;
#define DEFINE_CMDLINE_PARAM_UINT8_VAR(varname,parname,defl) uint8_t varname;
#define DEFINE_CMDLINE_PARAM_UINT16_VAR(varname,parname,defl) uint16_t varname;
#define DEFINE_CMDLINE_PARAM_UINT32_VAR(varname,parname,defl) uint32_t varname;
#define DEFINE_CMDLINE_PARAM_UINT64_VAR(varname,parname,defl) uint64_t varname;
#define DEFINE_CMDLINE_PARAM_INT_VAR(varname,parname,defl) int varname;
#define DEFINE_CMDLINE_PARAM_UINT_VAR(varname,parname,defl) unsigned int varname;
#define DEFINE_CMDLINE_PARAM_INTPTR_VAR(varname,parname,defl) intptr_t varname;
#define DEFINE_CMDLINE_PARAM_UINTPTR_VAR(varname,parname,defl) uintptr_t varname;



// <parts/timeval-cxx-support.h> + <parts/timespec-cxx-support.h>
#define __TIMEVAL_CXX_DECL_BEGIN extern "C++"{
#define __TIMEVAL_CXX_DECL_END }
#define __TIMEVAL_CXX_SUPPORT(T,TV_SEC_TYPE,TV_USEC_TYPE) \
	void add_microseconds(TV_USEC_TYPE n);void sub_microseconds(TV_USEC_TYPE n);\
	void add_milliseconds(TV_USEC_TYPE n);void sub_milliseconds(TV_USEC_TYPE n);\
	T &operator+=(T const &other);T &operator-=(T const &other);\
	T &operator*=(unsigned int n);T &operator/=(unsigned int n);\
	T &operator%=(unsigned int n);T operator+(T const &other) const;\
	T operator-(T const &other) const;T operator*(unsigned int n) const;\
	T operator/(unsigned int n) const;T operator%(unsigned int n);\
	bool operator==(T const &other) const;bool operator!=(T const &other) const;\
	bool operator<(T const &other) const;bool operator<=(T const &other) const;\
	bool operator>(T const &other) const;bool operator>=(T const &other) const;
#define __TIMEVAL_CXX_SUPPORT2(T,TV_SEC_TYPE,TV_USEC_TYPE) \
	T operator*(unsigned int n,T const &tmv);
#define __TIMESPEC_CXX_DECL_BEGIN extern "C++"{
#define __TIMESPEC_CXX_DECL_END }
#define __TIMESPEC_CXX_SUPPORT(T,TV_SEC_TYPE,TV_NSEC_TYPE) \
	void add_nanoseconds(TV_NSEC_TYPE n);void sub_nanoseconds(TV_NSEC_TYPE n);\
	void add_microseconds(TV_USEC_TYPE n);void sub_microseconds(TV_USEC_TYPE n);\
	void add_milliseconds(TV_USEC_TYPE n);void sub_milliseconds(TV_USEC_TYPE n);\
	T &operator+=(T const &other);T &operator-=(T const &other);\
	T &operator*=(unsigned int n);T &operator/=(unsigned int n);\
	T &operator%=(unsigned int n);T operator+(T const &other) const;\
	T operator-(T const &other) const;T operator*(unsigned int n) const;\
	T operator/(unsigned int n) const;T operator%(unsigned int n);\
	bool operator==(T const &other) const;bool operator!=(T const &other) const;\
	bool operator<(T const &other) const;bool operator<=(T const &other) const;\
	bool operator>(T const &other) const;bool operator>=(T const &other) const;
#define __TIMESPEC_CXX_SUPPORT2(T,TV_SEC_TYPE,TV_NSEC_TYPE) \
	T operator*(unsigned int n,T const &tmv);



// <sys/cdefs.h>
#define __BEGIN_DECLS
#define __END_DECLS
#define __PMT(x) x
#define __LEAF_ATTR
#define __THROW
#define __THROWNL
#define __NTH(fct) fct
#define __ptr_t  void *
#define __long_double_t long double
#define __BEGIN_NAMESPACE_STD namespace std{
#define __END_NAMESPACE_STD }
#define __USING_NAMESPACE_STD(x) using std::x;
#define __BEGIN_NAMESPACE_C99 namespace __c99{
#define __END_NAMESPACE_C99 }
#define __USING_NAMESPACE_C99(x) using __c99::x;
#define __warndecl(name,msg)  void(name)(void)
#define __errordecl(name,msg) void(name)(void)
#define __warnattr(msg)
#define __flexarr []
#define __predict_true
#define __predict_false
#define __REDIRECT(name,proto,alias) name proto
#define __REDIRECT_NTH(name,proto,alias) name proto
#define __REDIRECT_NTHNL(name,proto,alias) name proto
#define __attribute_malloc__
#define __attribute_alloc_size__
#define __attribute_pure__
#define __attribute_const__
#define __attribute_used__
#define __attribute_noinline__
#define __attribute_deprecated__
#define __nonnull
#define __attribute_warn_unused_result__
#define __attribute_format_strfmon__
#define __always_inline
#define __attribute_artificial__
#define __glibc_unlikely(x) x
#define __glibc_likely(x) x
#define __wur
#define __attribute_format_arg__(x)
#define __extern_inline
#define __extern_always_inline
#define __fortify_function
#define __LDBL_REDIR1(name,proto,alias)       name proto
#define __LDBL_REDIR(name,proto)               name proto
#define __LDBL_REDIR1_NTH(name,proto,alias)   name proto
#define __LDBL_REDIR_NTH(name,proto)           name proto
#define __LDBL_REDIR1_DECL(name,alias)         decltype(name) name;
#define __LDBL_REDIR_DECL(name)                 decltype(name) name;
#define __REDIRECT_LDBL(name,proto,alias)     name proto;
#define __REDIRECT_NTH_LDBL(name,proto,alias) name proto;
#define __weak_symbol
#define __used
#define __section(x)
#define __alloc_size(x)
#define __alloc_size2(n,x)
#define __alloc_align(x)
#define	__generic(expr,t,yes,no) no
#define __malloc_like
#define __result_use_check
#define __returns_twice
#define __dead2
#define __pure
#define __pure2
#define __noinline
#define __null_sentinel
#define __exported
#define __hidden
#define __packed
#define __aligned(x)
#define __unused
#define __printflike(x,y)
#define __scanflike(x,y)
#define __strfmonlike(x,y)
#define __strftimelike(x,y)
#define __printf0like(x,y)
#define __format_arg(x)
#define __bounded__(x,y,z)
#define __RCSID(x)
#define __FBSDID(x)
#define __RCSID_SOURCE(x)
#define __SCCSID(x)
#define __COPYRIGHT(x)



// <math.h> + <pthread.h>
#define __DECL_SIMD_cos
#define __DECL_SIMD_cosf
#define __DECL_SIMD_cosl
#define __DECL_SIMD_sin
#define __DECL_SIMD_sinf
#define __DECL_SIMD_sinl
#define __DECL_SIMD_sincos
#define __DECL_SIMD_sincosf
#define __DECL_SIMD_sincosl
#define __DECL_SIMD_log
#define __DECL_SIMD_logf
#define __DECL_SIMD_logl
#define __DECL_SIMD_exp
#define __DECL_SIMD_expf
#define __DECL_SIMD_expl
#define __DECL_SIMD_pow
#define __DECL_SIMD_powf
#define __DECL_SIMD_powl
#define __cleanup_fct_attribute



// Glibc++
#define _GLIBCXX_PURE
#define _GLIBCXX_CONST
#define _GLIBCXX_NORETURN
#define _GLIBCXX_NOTHROW
#define _GLIBCXX_VISIBILITY(x)
#define _GLIBCXX_DEPRECATED
#define _GLIBCXX17_DEPRECATED
#define _GLIBCXX_ABI_TAG_CXX11
#define _GLIBCXX_NODISCARD
#define _GLIBCXX_CONSTEXPR
#define _GLIBCXX_USE_CONSTEXPR
#define _GLIBCXX14_CONSTEXPR
#define _GLIBCXX17_CONSTEXPR
#define _GLIBCXX20_CONSTEXPR
#define _GLIBCXX17_INLINE
#define _GLIBCXX_NOEXCEPT
#define _GLIBCXX_NOEXCEPT_IF(x)
#define _GLIBCXX_USE_NOEXCEPT
#define _GLIBCXX_THROW(x)
#define _GLIBCXX_NAMESPACE_CXX11       __cxx11::
#define _GLIBCXX_BEGIN_NAMESPACE_CXX11 namespace __cxx11{
#define _GLIBCXX_END_NAMESPACE_CXX11   }
#define _GLIBCXX_DEFAULT_ABI_TAG
#define _GLIBCXX_BEGIN_NAMESPACE_VERSION
#define _GLIBCXX_END_NAMESPACE_VERSION
#define _GLIBCXX_STD_C std
#define _GLIBCXX_BEGIN_NAMESPACE_CONTAINER
#define _GLIBCXX_END_NAMESPACE_CONTAINER
#define _GLIBCXX_STD_A std
#define _GLIBCXX_BEGIN_NAMESPACE_ALGO
#define _GLIBCXX_END_NAMESPACE_ALGO
#define _GLIBCXX_NAMESPACE_LDBL
#define _GLIBCXX_BEGIN_NAMESPACE_LDBL
#define _GLIBCXX_END_NAMESPACE_LDBL
#define _GLIBCXX_NAMESPACE_LDBL_OR_CXX11 _GLIBCXX_NAMESPACE_CXX11
#define _GLIBCXX_BEGIN_NAMESPACE_LDBL_OR_CXX11 _GLIBCXX_BEGIN_NAMESPACE_CXX11
#define _GLIBCXX_END_NAMESPACE_LDBL_OR_CXX11 _GLIBCXX_END_NAMESPACE_CXX11
#define _GLIBCXX_BEGIN_EXTERN_C
#define _GLIBCXX_END_EXTERN_C
#define _GLIBCXX_TXN_SAFE
#define _GLIBCXX_TXN_SAFE_DYN
#define _GLIBCXX_ALWAYS_INLINE
#define _GLIBCXX_NOEXCEPT_PARM
#define _GLIBCXX_NOEXCEPT_QUAL
#define __try if(1)
#define __catch(...) if(0)
#define __glibcxx_function_requires(...)
#define __glibcxx_class_requires(...)
#define __glibcxx_class_requires2(...)
#define __glibcxx_class_requires3(...)
#define __glibcxx_class_requires4(...)
#define __gthrw2(...)
#define __gthrw_(x) x
#define __gthrw(...)
#define _GLIBCXX_GTHRW(x) int __glibcxx_##x(pthread_rwlock_t *rwlock);
#define _GLIBCXX_DEFINE_BINARY_PREDICATE_OP_CONSTRAINT(_,N) template<class _First,class _Second>struct N{void __constraints(){}bool __constraints_(){}_First __a;_Second __b;}
#define _GLIBCXX_DEFINE_BINARY_OPERATOR_CONSTRAINT(_,N) template<class _Ret,class _First,class _Second>struct N{void __constraints(){}_Ret __constraints_(){}_First __a;_Second __b;}



// <nt/[...].h>
#define __C89_NAMELESS
#define DUMMYUNIONNAME
#define DUMMYUNIONNAME2
#define DUMMYSTRUCTNAME
#define DUMMYSTRUCTNAME2
#define RESTRICTED_POINTER
#define UNALIGNED
#define far
#define near
#define pascal
#define cdecl
#define CDECL
#define CALLBACK
#define WINAPI
#define WINAPIV
#define APIENTRY
#define APIPRIVATE
#define PASCAL
#define WINAPI_INLINE
#define WINBASEAPI
#define FAR
#define NEAR
#define FASTCALL
#define NTAPI
#define DECLSPEC_NORETURN
#define CONST const
#define VOID void
#define __MINGW_TYPEDEF_AW(x) typedef x##A x;
#define __MINGW_NAME_AW(x) x##A
#define DECLARE_HANDLE(HMODULE) typedef void *HMODULE



// libc
#define DEFINE_PRIVATE_ALIAS_P(n,o,attr,Treturn,nothrow,cc,param,args) Treturn n param{}
#define DEFINE_PUBLIC_ALIAS_P(n,o,attr,Treturn,nothrow,cc,param,args) Treturn n param{}
#define DEFINE_INTERN_ALIAS_P(n,o,attr,Treturn,nothrow,cc,param,args) Treturn n param{}
#define DEFINE_PRIVATE_WEAK_ALIAS_P(n,o,attr,Treturn,nothrow,cc,param,args) Treturn n param{}
#define DEFINE_PUBLIC_WEAK_ALIAS_P(n,o,attr,Treturn,nothrow,cc,param,args) Treturn n param{}
#define DEFINE_INTERN_WEAK_ALIAS_P(n,o,attr,Treturn,nothrow,cc,param,args) Treturn n param{}
#define DEFINE_PRIVATE_ALIAS_P_VOID(n,o,attr,nothrow,cc,param,args) Treturn n param{}
#define DEFINE_PUBLIC_ALIAS_P_VOID(n,o,attr,nothrow,cc,param,args) Treturn n param{}
#define DEFINE_INTERN_ALIAS_P_VOID(n,o,attr,nothrow,cc,param,args) Treturn n param{}
#define DEFINE_PRIVATE_WEAK_ALIAS_P_VOID(n,o,attr,nothrow,cc,param,args) Treturn n param{}
#define DEFINE_PUBLIC_WEAK_ALIAS_P_VOID(n,o,attr,nothrow,cc,param,args) Treturn n param{}
#define DEFINE_INTERN_WEAK_ALIAS_P_VOID(n,o,attr,nothrow,cc,param,args) Treturn n param{}




// Misc 3rd party libraries
#define NCURSES_API
#define NCURSES_IMPEXP
#define NCURSES_SP_NAME(x) x##_sp
#define NCURSES_EXPORT(x) x
#define NCURSES_EXPORT_VAR(x) x
#define NCURSES_PUBLIC_VAR(x) _nc_##x
#define NCURSES_WRAPPED_VAR(t,x) t _nc_##x(void)
#define NCURSES_CONST const
#define NCURSES_SBOOL char
#define NCURSES_CPP_TRY
#define NCURSES_CPP_CATCH(e) if(0)
#define NCURSES_FIELD_INTERNALS
#define FORM_EXPORT(T) T
#define FORM_EXPORT_VAR(T) T
#define MENU_EXPORT(T) T
#define MENU_EXPORT_VAR(T) T
#define PANEL_EXPORT(T) T
#define PANEL_EXPORT_VAR(T) T
#define THROW2(...)
#define UNDEF(x) CUR_##x
#define BZ_EXTERN
#define BZ_API(f) f
#define PIXMAN_API
#define _Xconst const
#define _XFUNCPROTOBEGIN
#define _XFUNCPROTOEND
#define _X_SENTINEL(x)
#define _X_EXPORT
#define _X_HIDDEN
#define _X_INTERNAL
#define _X_DEPRECATED
#define _X_NORETURN
#define _X_ATTRIBUTE_PRINTF(x,y)
#define _X_NONNULL(...)
#define _X_UNUSED
#define _X_INLINE
#define _X_RESTRICT_KYWD restrict
#define B32
#define B16
#define DRM_PRINTFLIKE(f,a)
#define FT_BEGIN_HEADER extern "C"{
#define FT_END_HEADER }
#define FT_LOCAL(x) x
#define FT_LOCAL_DEF(x) x
#define FT_LOCAL_ARRAY(x) const x
#define FT_LOCAL_ARRAY_DEF(x) const x
#define FT_BASE(x) x
#define FT_BASE_DEF(x) x
#define FT_EXPORT(x) x
#define FT_EXPORT_DEF(x) x
#define FT_EXPORT_VAR(x) x
#define FT_CALLBACK_DEF(x) x
#define FT_BASE_CALLBACK(x) x
#define FT_BASE_CALLBACK_DEF(x) x
#define FT_CALLBACK_TABLE
#define FT_CALLBACK_TABLE_DEF
#define FT_ENC_TAG(x,...) x
#define FT_IMAGE_TAG(x,...) x
#define FT_DEPRECATED_ATTRIBUTE
#define PNG_CONST const
#define PNGARG(x) x
#define PNGAPI
#define PNGCAPI
#define PNGCBAPI
#define PNG_DLL_EXPORT
#define PNG_DLL_IMPORT
#define PNG_IMPEXP
#define PNG_EMPTY
#define PNG_FUNCTION(x,y,z,w) x y z
#define PNG_EXPORT_TYPE(t) t
#define PNG_EXPORTA(v,x,y,z,w) x y z
#define PNG_EXPORT(v,x,y,z) x y z
#define PNG_CALLBACK(x,y,z) x y z
#define PNG_USE_RESULT
#define PNG_NORETURN
#define PNG_ALLOCATED
#define PNG_DEPRECATED
#define PNG_PRIVATE
#define PNG_RESTRICT restrict
#define PNG_FP_EXPORT(v,x,y,z) x y z;
#define PNG_FIXED_EXPORT(v,x,y,z) x y z;
#define PNG_REMOVED(v,x,y,z,a)
#define OF(x) x
#define Z_ARG(x) x
#define z_const const
#define z_longlong long long
#define FAR
#define ZEXTERN
#define ZEXPORT
#define ZEXPORTVA
#define XMLCALL
#define XMLIMPORT
#define XML_ATTR_MALLOC
#define XML_ATTR_ALLOC_SIZE(x)
#define XMLPARSEAPI(type) type
#define PyAPI_FUNC(RTYPE) RTYPE
#define PyAPI_DATA(RTYPE) RTYPE
#define PyMODINIT_FUNC void
#define DL_IMPORT(RTYPE) RTYPE
#define DL_EXPORT(RTYPE) RTYPE
#define Py_DEPRECATED(VERSION_UNUSED)
#define Py_LOCAL(type) type
#define Py_LOCAL_INLINE(type) type
#define Py_PROTO(x) x
#define Py_FPROTO(x) x
#define _PyObject_HEAD_EXTRA
#define _PyObject_EXTRA_INIT
#define PyObject_HEAD Py_ssize_t ob_refcnt;struct _typeobject *ob_type;
#define PyObject_VAR_HEAD Py_ssize_t ob_refcnt;struct _typeobject *ob_type;Py_ssize_t ob_size;
#define _PyTZINFO_HEAD Py_ssize_t ob_refcnt;struct _typeobject *ob_type;long hashcode;char hastzinfo;
#define _PyDateTime_TIMEHEAD Py_ssize_t ob_refcnt;struct _typeobject *ob_type;long hashcode;char hastzinfo;unsigned char data[6];
#define _PyDateTime_DATETIMEHEAD Py_ssize_t ob_refcnt;struct _typeobject *ob_type;long hashcode;char hastzinfo;unsigned char data[10];
#define Py_FORMAT_PARSETUPLE(func,p1,p2)
#define Py_ALIGNED(x)
#define Py_GCC_ATTRIBUTE(x)
#define Py_LL(x) x##LL
#define Py_ULL(x) x##ULL
#define __owur
#define ossl_bio__attr__(x)
#define OPENSSL_EXPORT
#define OPENSSL_EXTERN
#define OPENSSL_IMPLEMENT_GLOBAL(t,n,v) t _shadow_##n=v;
#define OPENSSL_DECLARE_GLOBAL(t,n) t _shadow_##n
#define OPENSSL_GLOBAL_REF(n) _shadow_##n
#define ossl_inline
#define ossl_noreturn
#define ossl_unused
#define STACK_OF(type) struct stack_st_##type
#define LHASH_OF(type) struct lhash_st_##type
#define SKM_DEFINE_STACK_OF(t1,t2,t3)
#define DEFINE_SPECIAL_STACK_OF(t1,t2)
#define DEFINE_STACK_OF(t)
#define DEFINE_SPECIAL_STACK_OF_CONST(t1,t2)
#define DEFINE_STACK_OF_CONST(t)
#define DECLARE_DEPRECATED(f) f;
#define DEPRECATEDIN_1_2_0(f) f;
#define DEPRECATEDIN_1_1_0(f) f;
#define DEPRECATEDIN_1_0_0(f) f;
#define DEPRECATEDIN_0_9_8(f) f;
#define PIXMAN_BEGIN_DECLS
#define PIXMAN_END_DECLS
#define __REPB_PREFIX(x) x
#define __COMPILER_ATOMIC(T) T
#define GCC_PRINTFLIKE(fmt,var)
#define GCC_SCANFLIKE(fmt,var)
#define	GCC_NORETURN
#define	GCC_UNUSED
#define externalref
#define externaldef(psect)
#define _XtShell_h_Const const
#define DLMALLOC_EXPORT
#define FORCEINLINE
#define NOINLINE
#define FFI_API
#define FFI_EXTERN
#define JSON_EXPORT
#define JSON_C_CONST_FUNCTION(x) x
#define _FCFUNCPROTOBEGIN extern "C"{
#define _FCFUNCPROTOEND }
#define FcPublic
#define FC_ATTRIBUTE_SENTINEL(x)
#define LZMA_API_IMPORT
#define LZMA_API_CALL
#define LZMA_API(a) a
#define lzma_nothrow
#define lzma_attribute(a)
#define lzma_attr_pure
#define lzma_attr_const
#define lzma_attr_warn_unused_result
#define PCRE_EXP_DECL
#define PCRECPP_EXP_DECL
#define PCRECPP_EXP_DEFN
#define G_GNUC_EXTENSION
#define G_INLINE_FUNC
#define G_GNUC_PURE
#define G_GNUC_MALLOC
#define G_GNUC_NO_INLINE
#define G_GNUC_NULL_TERMINATED
#define G_GNUC_ALLOC_SIZE(x)
#define G_GNUC_ALLOC_SIZE2(x,y)
#define G_GNUC_PRINTF(x)
#define G_GNUC_SCANF(x,y)
#define G_GNUC_STRFTIME(x)
#define G_GNUC_FORMAT(x)
#define G_GNUC_NORETURN
#define G_GNUC_CONST
#define G_GNUC_UNUSED
#define G_GNUC_NO_INSTRUMENT
#define G_GNUC_FALLTHROUGH
#define G_GNUC_DEPRECATED
#define G_GNUC_DEPRECATED_FOR(f)
#define G_GNUC_BEGIN_IGNORE_DEPRECATIONS
#define G_GNUC_END_IGNORE_DEPRECATIONS
#define G_GNUC_MAY_ALIAS
#define G_GNUC_WARN_UNUSED_RESULT
#define G_ANALYZER_NORETURN
#define G_STATIC_ASSERT(x)
#define G_BEGIN_DECLS
#define G_END_DECLS
#define G_STMT_START
#define G_STMT_END
#define G_CONST_RETURN const
#define G_NORETURN
#define G_NORETURN_FUNCPTR
#define G_DEPRECATED
#define G_DEPRECATED_FOR
#define G_UNAVAILABLE(x,y)
#define G_LIKELY
#define G_UNLIKELY
#define _GLIB_EXTERN
#define GLIB_DEPRECATED
#define GLIB_DEPRECATED_FOR(f)
#define GLIB_UNAVAILABLE(x,y)
#define GLIB_UNAVAILABLE_STATIC_INLINE(x,y)
#define GLIB_DEPRECATED_MACRO
#define GLIB_DEPRECATED_MACRO_FOR(f)
#define GLIB_UNAVAILABLE_MACRO(x,y)
#define GLIB_DEPRECATED_ENUMERATOR
#define GLIB_DEPRECATED_ENUMERATOR_FOR(f)
#define GLIB_UNAVAILABLE_ENUMERATOR(x,y)
#define GLIB_DEPRECATED_TYPE
#define GLIB_DEPRECATED_TYPE_FOR(f)
#define GLIB_UNAVAILABLE_TYPE(x,y)
#define GLIB_AVAILABLE_ENUMERATOR_IN_2_26
#define GLIB_AVAILABLE_ENUMERATOR_IN_2_28
#define GLIB_AVAILABLE_ENUMERATOR_IN_2_30
#define GLIB_AVAILABLE_ENUMERATOR_IN_2_32
#define GLIB_AVAILABLE_ENUMERATOR_IN_2_34
#define GLIB_AVAILABLE_ENUMERATOR_IN_2_36
#define GLIB_AVAILABLE_ENUMERATOR_IN_2_38
#define GLIB_AVAILABLE_ENUMERATOR_IN_2_40
#define GLIB_AVAILABLE_ENUMERATOR_IN_2_42
#define GLIB_AVAILABLE_ENUMERATOR_IN_2_44
#define GLIB_AVAILABLE_ENUMERATOR_IN_2_46
#define GLIB_AVAILABLE_ENUMERATOR_IN_2_48
#define GLIB_AVAILABLE_ENUMERATOR_IN_2_50
#define GLIB_AVAILABLE_ENUMERATOR_IN_2_52
#define GLIB_AVAILABLE_ENUMERATOR_IN_2_54
#define GLIB_AVAILABLE_ENUMERATOR_IN_2_56
#define GLIB_AVAILABLE_ENUMERATOR_IN_2_58
#define GLIB_AVAILABLE_ENUMERATOR_IN_2_60
#define GLIB_AVAILABLE_ENUMERATOR_IN_2_62
#define GLIB_AVAILABLE_ENUMERATOR_IN_2_64
#define GLIB_AVAILABLE_ENUMERATOR_IN_2_66
#define GLIB_AVAILABLE_ENUMERATOR_IN_2_68
#define GLIB_AVAILABLE_ENUMERATOR_IN_2_70
#define GLIB_AVAILABLE_IN_2_26
#define GLIB_AVAILABLE_IN_2_28
#define GLIB_AVAILABLE_IN_2_30
#define GLIB_AVAILABLE_IN_2_32
#define GLIB_AVAILABLE_IN_2_34
#define GLIB_AVAILABLE_IN_2_36
#define GLIB_AVAILABLE_IN_2_38
#define GLIB_AVAILABLE_IN_2_40
#define GLIB_AVAILABLE_IN_2_42
#define GLIB_AVAILABLE_IN_2_44
#define GLIB_AVAILABLE_IN_2_46
#define GLIB_AVAILABLE_IN_2_48
#define GLIB_AVAILABLE_IN_2_50
#define GLIB_AVAILABLE_IN_2_52
#define GLIB_AVAILABLE_IN_2_54
#define GLIB_AVAILABLE_IN_2_56
#define GLIB_AVAILABLE_IN_2_58
#define GLIB_AVAILABLE_IN_2_60
#define GLIB_AVAILABLE_IN_2_62
#define GLIB_AVAILABLE_IN_2_64
#define GLIB_AVAILABLE_IN_2_66
#define GLIB_AVAILABLE_IN_2_68
#define GLIB_AVAILABLE_IN_2_70
#define GLIB_AVAILABLE_IN_ALL
#define GLIB_AVAILABLE_MACRO_IN_2_26
#define GLIB_AVAILABLE_MACRO_IN_2_28
#define GLIB_AVAILABLE_MACRO_IN_2_30
#define GLIB_AVAILABLE_MACRO_IN_2_32
#define GLIB_AVAILABLE_MACRO_IN_2_34
#define GLIB_AVAILABLE_MACRO_IN_2_36
#define GLIB_AVAILABLE_MACRO_IN_2_38
#define GLIB_AVAILABLE_MACRO_IN_2_40
#define GLIB_AVAILABLE_MACRO_IN_2_42
#define GLIB_AVAILABLE_MACRO_IN_2_44
#define GLIB_AVAILABLE_MACRO_IN_2_46
#define GLIB_AVAILABLE_MACRO_IN_2_48
#define GLIB_AVAILABLE_MACRO_IN_2_50
#define GLIB_AVAILABLE_MACRO_IN_2_52
#define GLIB_AVAILABLE_MACRO_IN_2_54
#define GLIB_AVAILABLE_MACRO_IN_2_56
#define GLIB_AVAILABLE_MACRO_IN_2_58
#define GLIB_AVAILABLE_MACRO_IN_2_60
#define GLIB_AVAILABLE_MACRO_IN_2_62
#define GLIB_AVAILABLE_MACRO_IN_2_64
#define GLIB_AVAILABLE_MACRO_IN_2_66
#define GLIB_AVAILABLE_MACRO_IN_2_68
#define GLIB_AVAILABLE_MACRO_IN_2_70
#define GLIB_AVAILABLE_STATIC_INLINE_IN_2_44
#define GLIB_AVAILABLE_STATIC_INLINE_IN_2_60
#define GLIB_AVAILABLE_STATIC_INLINE_IN_2_62
#define GLIB_AVAILABLE_STATIC_INLINE_IN_2_64
#define GLIB_AVAILABLE_STATIC_INLINE_IN_2_66
#define GLIB_AVAILABLE_STATIC_INLINE_IN_2_68
#define GLIB_AVAILABLE_STATIC_INLINE_IN_2_70
#define GLIB_AVAILABLE_TYPE_IN_2_26
#define GLIB_AVAILABLE_TYPE_IN_2_28
#define GLIB_AVAILABLE_TYPE_IN_2_30
#define GLIB_AVAILABLE_TYPE_IN_2_32
#define GLIB_AVAILABLE_TYPE_IN_2_34
#define GLIB_AVAILABLE_TYPE_IN_2_36
#define GLIB_AVAILABLE_TYPE_IN_2_38
#define GLIB_AVAILABLE_TYPE_IN_2_40
#define GLIB_AVAILABLE_TYPE_IN_2_42
#define GLIB_AVAILABLE_TYPE_IN_2_44
#define GLIB_AVAILABLE_TYPE_IN_2_46
#define GLIB_AVAILABLE_TYPE_IN_2_48
#define GLIB_AVAILABLE_TYPE_IN_2_50
#define GLIB_AVAILABLE_TYPE_IN_2_52
#define GLIB_AVAILABLE_TYPE_IN_2_54
#define GLIB_AVAILABLE_TYPE_IN_2_56
#define GLIB_AVAILABLE_TYPE_IN_2_58
#define GLIB_AVAILABLE_TYPE_IN_2_60
#define GLIB_AVAILABLE_TYPE_IN_2_62
#define GLIB_AVAILABLE_TYPE_IN_2_64
#define GLIB_AVAILABLE_TYPE_IN_2_66
#define GLIB_AVAILABLE_TYPE_IN_2_68
#define GLIB_AVAILABLE_TYPE_IN_2_70
#define GLIB_DEPRECATED_ENUMERATOR_IN_2_26
#define GLIB_DEPRECATED_ENUMERATOR_IN_2_26_FOR(f)
#define GLIB_DEPRECATED_ENUMERATOR_IN_2_28
#define GLIB_DEPRECATED_ENUMERATOR_IN_2_28_FOR(f)
#define GLIB_DEPRECATED_ENUMERATOR_IN_2_30
#define GLIB_DEPRECATED_ENUMERATOR_IN_2_30_FOR(f)
#define GLIB_DEPRECATED_ENUMERATOR_IN_2_32
#define GLIB_DEPRECATED_ENUMERATOR_IN_2_32
#define GLIB_DEPRECATED_ENUMERATOR_IN_2_32_FOR(f)
#define GLIB_DEPRECATED_ENUMERATOR_IN_2_32_FOR(f)
#define GLIB_DEPRECATED_ENUMERATOR_IN_2_34
#define GLIB_DEPRECATED_ENUMERATOR_IN_2_34_FOR(f)
#define GLIB_DEPRECATED_ENUMERATOR_IN_2_36
#define GLIB_DEPRECATED_ENUMERATOR_IN_2_36_FOR(f)
#define GLIB_DEPRECATED_ENUMERATOR_IN_2_38
#define GLIB_DEPRECATED_ENUMERATOR_IN_2_38_FOR(f)
#define GLIB_DEPRECATED_ENUMERATOR_IN_2_40
#define GLIB_DEPRECATED_ENUMERATOR_IN_2_40_FOR(f)
#define GLIB_DEPRECATED_ENUMERATOR_IN_2_42
#define GLIB_DEPRECATED_ENUMERATOR_IN_2_42_FOR(f)
#define GLIB_DEPRECATED_ENUMERATOR_IN_2_44
#define GLIB_DEPRECATED_ENUMERATOR_IN_2_44_FOR(f)
#define GLIB_DEPRECATED_ENUMERATOR_IN_2_46
#define GLIB_DEPRECATED_ENUMERATOR_IN_2_46_FOR(f)
#define GLIB_DEPRECATED_ENUMERATOR_IN_2_48
#define GLIB_DEPRECATED_ENUMERATOR_IN_2_48_FOR(f)
#define GLIB_DEPRECATED_ENUMERATOR_IN_2_50
#define GLIB_DEPRECATED_ENUMERATOR_IN_2_50_FOR(f)
#define GLIB_DEPRECATED_ENUMERATOR_IN_2_52
#define GLIB_DEPRECATED_ENUMERATOR_IN_2_52_FOR(f)
#define GLIB_DEPRECATED_ENUMERATOR_IN_2_54
#define GLIB_DEPRECATED_ENUMERATOR_IN_2_54_FOR(f)
#define GLIB_DEPRECATED_ENUMERATOR_IN_2_56
#define GLIB_DEPRECATED_ENUMERATOR_IN_2_56_FOR(f)
#define GLIB_DEPRECATED_ENUMERATOR_IN_2_58
#define GLIB_DEPRECATED_ENUMERATOR_IN_2_58_FOR(f)
#define GLIB_DEPRECATED_ENUMERATOR_IN_2_60
#define GLIB_DEPRECATED_ENUMERATOR_IN_2_60_FOR(f)
#define GLIB_DEPRECATED_ENUMERATOR_IN_2_62
#define GLIB_DEPRECATED_ENUMERATOR_IN_2_62_FOR(f)
#define GLIB_DEPRECATED_ENUMERATOR_IN_2_64
#define GLIB_DEPRECATED_ENUMERATOR_IN_2_64_FOR(f)
#define GLIB_DEPRECATED_ENUMERATOR_IN_2_66
#define GLIB_DEPRECATED_ENUMERATOR_IN_2_66_FOR(f)
#define GLIB_DEPRECATED_ENUMERATOR_IN_2_68
#define GLIB_DEPRECATED_ENUMERATOR_IN_2_68_FOR(f)
#define GLIB_DEPRECATED_ENUMERATOR_IN_2_70
#define GLIB_DEPRECATED_ENUMERATOR_IN_2_70_FOR(f)
#define GLIB_DEPRECATED_IN_2_26
#define GLIB_DEPRECATED_IN_2_26_FOR(f)
#define GLIB_DEPRECATED_IN_2_28
#define GLIB_DEPRECATED_IN_2_28_FOR(f)
#define GLIB_DEPRECATED_IN_2_30
#define GLIB_DEPRECATED_IN_2_30_FOR(f)
#define GLIB_DEPRECATED_IN_2_32
#define GLIB_DEPRECATED_IN_2_32_FOR(f)
#define GLIB_DEPRECATED_IN_2_34
#define GLIB_DEPRECATED_IN_2_34_FOR(f)
#define GLIB_DEPRECATED_IN_2_36
#define GLIB_DEPRECATED_IN_2_36_FOR(f)
#define GLIB_DEPRECATED_IN_2_38
#define GLIB_DEPRECATED_IN_2_38_FOR(f)
#define GLIB_DEPRECATED_IN_2_40
#define GLIB_DEPRECATED_IN_2_40_FOR(f)
#define GLIB_DEPRECATED_IN_2_42
#define GLIB_DEPRECATED_IN_2_42_FOR(f)
#define GLIB_DEPRECATED_IN_2_44
#define GLIB_DEPRECATED_IN_2_44_FOR(f)
#define GLIB_DEPRECATED_IN_2_46
#define GLIB_DEPRECATED_IN_2_46_FOR(f)
#define GLIB_DEPRECATED_IN_2_48
#define GLIB_DEPRECATED_IN_2_48_FOR(f)
#define GLIB_DEPRECATED_IN_2_50
#define GLIB_DEPRECATED_IN_2_50_FOR(f)
#define GLIB_DEPRECATED_IN_2_52
#define GLIB_DEPRECATED_IN_2_52_FOR(f)
#define GLIB_DEPRECATED_IN_2_54
#define GLIB_DEPRECATED_IN_2_54_FOR(f)
#define GLIB_DEPRECATED_IN_2_56
#define GLIB_DEPRECATED_IN_2_56_FOR(f)
#define GLIB_DEPRECATED_IN_2_58
#define GLIB_DEPRECATED_IN_2_58_FOR(f)
#define GLIB_DEPRECATED_IN_2_60
#define GLIB_DEPRECATED_IN_2_60_FOR(f)
#define GLIB_DEPRECATED_IN_2_62
#define GLIB_DEPRECATED_IN_2_62_FOR(f)
#define GLIB_DEPRECATED_IN_2_64
#define GLIB_DEPRECATED_IN_2_64_FOR(f)
#define GLIB_DEPRECATED_IN_2_66
#define GLIB_DEPRECATED_IN_2_66_FOR(f)
#define GLIB_DEPRECATED_IN_2_68
#define GLIB_DEPRECATED_IN_2_68_FOR(f)
#define GLIB_DEPRECATED_IN_2_70
#define GLIB_DEPRECATED_IN_2_70_FOR(f)
#define GLIB_DEPRECATED_MACRO_IN_2_26
#define GLIB_DEPRECATED_MACRO_IN_2_26_FOR(f)
#define GLIB_DEPRECATED_MACRO_IN_2_28
#define GLIB_DEPRECATED_MACRO_IN_2_28_FOR(f)
#define GLIB_DEPRECATED_MACRO_IN_2_30
#define GLIB_DEPRECATED_MACRO_IN_2_30_FOR(f)
#define GLIB_DEPRECATED_MACRO_IN_2_32
#define GLIB_DEPRECATED_MACRO_IN_2_32_FOR(f)
#define GLIB_DEPRECATED_MACRO_IN_2_34
#define GLIB_DEPRECATED_MACRO_IN_2_34_FOR(f)
#define GLIB_DEPRECATED_MACRO_IN_2_36
#define GLIB_DEPRECATED_MACRO_IN_2_36_FOR(f)
#define GLIB_DEPRECATED_MACRO_IN_2_38
#define GLIB_DEPRECATED_MACRO_IN_2_38_FOR(f)
#define GLIB_DEPRECATED_MACRO_IN_2_40
#define GLIB_DEPRECATED_MACRO_IN_2_40_FOR(f)
#define GLIB_DEPRECATED_MACRO_IN_2_42
#define GLIB_DEPRECATED_MACRO_IN_2_42_FOR(f)
#define GLIB_DEPRECATED_MACRO_IN_2_44
#define GLIB_DEPRECATED_MACRO_IN_2_44_FOR(f)
#define GLIB_DEPRECATED_MACRO_IN_2_46
#define GLIB_DEPRECATED_MACRO_IN_2_46_FOR(f)
#define GLIB_DEPRECATED_MACRO_IN_2_48
#define GLIB_DEPRECATED_MACRO_IN_2_48_FOR(f)
#define GLIB_DEPRECATED_MACRO_IN_2_50
#define GLIB_DEPRECATED_MACRO_IN_2_50_FOR(f)
#define GLIB_DEPRECATED_MACRO_IN_2_52
#define GLIB_DEPRECATED_MACRO_IN_2_52_FOR(f)
#define GLIB_DEPRECATED_MACRO_IN_2_54
#define GLIB_DEPRECATED_MACRO_IN_2_54_FOR(f)
#define GLIB_DEPRECATED_MACRO_IN_2_56
#define GLIB_DEPRECATED_MACRO_IN_2_56_FOR(f)
#define GLIB_DEPRECATED_MACRO_IN_2_58
#define GLIB_DEPRECATED_MACRO_IN_2_58_FOR(f)
#define GLIB_DEPRECATED_MACRO_IN_2_60
#define GLIB_DEPRECATED_MACRO_IN_2_60_FOR(f)
#define GLIB_DEPRECATED_MACRO_IN_2_62
#define GLIB_DEPRECATED_MACRO_IN_2_62_FOR(f)
#define GLIB_DEPRECATED_MACRO_IN_2_64
#define GLIB_DEPRECATED_MACRO_IN_2_64_FOR(f)
#define GLIB_DEPRECATED_MACRO_IN_2_66
#define GLIB_DEPRECATED_MACRO_IN_2_66_FOR(f)
#define GLIB_DEPRECATED_MACRO_IN_2_68
#define GLIB_DEPRECATED_MACRO_IN_2_68_FOR(f)
#define GLIB_DEPRECATED_MACRO_IN_2_70
#define GLIB_DEPRECATED_MACRO_IN_2_70_FOR(f)
#define GLIB_DEPRECATED_TYPE_IN_2_26
#define GLIB_DEPRECATED_TYPE_IN_2_26_FOR(f)
#define GLIB_DEPRECATED_TYPE_IN_2_28
#define GLIB_DEPRECATED_TYPE_IN_2_28_FOR(f)
#define GLIB_DEPRECATED_TYPE_IN_2_30
#define GLIB_DEPRECATED_TYPE_IN_2_30_FOR(f)
#define GLIB_DEPRECATED_TYPE_IN_2_32
#define GLIB_DEPRECATED_TYPE_IN_2_32
#define GLIB_DEPRECATED_TYPE_IN_2_32_FOR(f)
#define GLIB_DEPRECATED_TYPE_IN_2_32_FOR(f)
#define GLIB_DEPRECATED_TYPE_IN_2_34
#define GLIB_DEPRECATED_TYPE_IN_2_34_FOR(f)
#define GLIB_DEPRECATED_TYPE_IN_2_36
#define GLIB_DEPRECATED_TYPE_IN_2_36_FOR(f)
#define GLIB_DEPRECATED_TYPE_IN_2_38
#define GLIB_DEPRECATED_TYPE_IN_2_38_FOR(f)
#define GLIB_DEPRECATED_TYPE_IN_2_40
#define GLIB_DEPRECATED_TYPE_IN_2_40_FOR(f)
#define GLIB_DEPRECATED_TYPE_IN_2_42
#define GLIB_DEPRECATED_TYPE_IN_2_42_FOR(f)
#define GLIB_DEPRECATED_TYPE_IN_2_44
#define GLIB_DEPRECATED_TYPE_IN_2_44_FOR(f)
#define GLIB_DEPRECATED_TYPE_IN_2_46
#define GLIB_DEPRECATED_TYPE_IN_2_46_FOR(f)
#define GLIB_DEPRECATED_TYPE_IN_2_48
#define GLIB_DEPRECATED_TYPE_IN_2_48_FOR(f)
#define GLIB_DEPRECATED_TYPE_IN_2_50
#define GLIB_DEPRECATED_TYPE_IN_2_50_FOR(f)
#define GLIB_DEPRECATED_TYPE_IN_2_52
#define GLIB_DEPRECATED_TYPE_IN_2_52_FOR(f)
#define GLIB_DEPRECATED_TYPE_IN_2_54
#define GLIB_DEPRECATED_TYPE_IN_2_54_FOR(f)
#define GLIB_DEPRECATED_TYPE_IN_2_56
#define GLIB_DEPRECATED_TYPE_IN_2_56_FOR(f)
#define GLIB_DEPRECATED_TYPE_IN_2_58
#define GLIB_DEPRECATED_TYPE_IN_2_58_FOR(f)
#define GLIB_DEPRECATED_TYPE_IN_2_60
#define GLIB_DEPRECATED_TYPE_IN_2_60_FOR(f)
#define GLIB_DEPRECATED_TYPE_IN_2_62
#define GLIB_DEPRECATED_TYPE_IN_2_62_FOR(f)
#define GLIB_DEPRECATED_TYPE_IN_2_64
#define GLIB_DEPRECATED_TYPE_IN_2_64_FOR(f)
#define GLIB_DEPRECATED_TYPE_IN_2_66
#define GLIB_DEPRECATED_TYPE_IN_2_66_FOR(f)
#define GLIB_DEPRECATED_TYPE_IN_2_68
#define GLIB_DEPRECATED_TYPE_IN_2_68_FOR(f)
#define GLIB_DEPRECATED_TYPE_IN_2_70
#define GLIB_DEPRECATED_TYPE_IN_2_70_FOR(f)
#define G_DEFINE_AUTOPTR_CLEANUP_FUNC(a,b)
#define G_DECLARE_INTERFACE(...)
#define __GMP_DECLSPEC
#define __GMP_DECLSPEC_XX
#define __GMP_ATTRIBUTE_PURE
#define __GMP_EXTERN_INLINE
#define __GMP_NOTHROW
#define __GMPXX_NOEXCEPT
#define __MPFR_SENTINEL_ATTR
#define __MPFR_DECLSPEC
#define MPFR_DEPRECATED
#define MPFR_RETURNS_NONNULL
#define __MPC_DECLSPEC
#define PARAMS(p)p
#define INLINE
#define EXTERN(x)extern x
#define JPP(p)p
#define JMETHOD(T,n,p)T(*n)p



// Misc. local macros
#define DEFINE_DL_EXPORT_ALIAS DEFINE_PUBLIC_ALIAS
#define CASE(x) case x:
#define FUNC(x) x
#define FUNC0(x,...) x
#define FUNC2(x,...) x
#define SYM(x) x
#define KERNEL_SELECT(a,b) b
#define ERROR(err) goto err
#define ERRORF(err,...) goto err
#define DECL
#define IFELSERW(r,w) r
#define IFRD(...) __VA_ARGS__
#define IFWR(...)
#define IFELSE(a,b) a
#define TYPEOF_DEREF(T) int
#define LOCAL_IF_DECODE(x) x
#define LOCAL_IF_ZERO(x)
#define LOCAL_IF_DECODE_ELSE(a,b) a
#define LOCAL_IF_NX_ELSE(a,b) a
#define LOCAL_NOTHROW(x) x
#define LOCAL_FUNC(x)x
#define DEFINE_LIBRARY_OPEN(open_libname,...) void *open_libname(void);
#define BUILTIN_GLOBALS_ENUMERATE(cb) cb(__gxx_personality_v0) cb(__cxa_begin_catch) cb(__cxa_end_catch) cb(__cxa_rethrow) cb(_Unwind_Resume)
#define POINTER_SET_FOREACH(...) for(;;)
#define __PRIVATE_CXX_DEFINE_COMPARE_EXCHANGE(T) \
	bool compare_exchange_weak(T &exp,T val,memory_order succ,memory_order fail);bool compare_exchange_weak(T &exp,T val,memory_order succ,memory_order fail) volatile;\
	bool compare_exchange_weak(T &exp,T val,memory_order order=memory_order_seq_cst);bool compare_exchange_weak(T &exp,T val,memory_order order=memory_order_seq_cst) volatile;\
	bool compare_exchange_strong(T &exp,T val,memory_order succ,memory_order fail);bool compare_exchange_strong(T &exp,T val,memory_order succ,memory_order fail) volatile;\
	bool compare_exchange_strong(T &exp,T val,memory_order order=memory_order_seq_cst);bool compare_exchange_strong(T &exp,T val,memory_order order=memory_order_seq_cst) volatile;\
	bool cmpxch(T oldv,T newv,memory_order succ,memory_order fail);bool cmpxch(T oldv,T newv,memory_order succ,memory_order fail) volatile;\
	bool cmpxch(T oldv,T newv,memory_order order=memory_order_seq_cst);bool cmpxch(T oldv,T newv,memory_order order=memory_order_seq_cst) volatile;\
	T cmpxch_val(T oldv,T newv,memory_order succ,memory_order fail);T cmpxch_val(T oldv,T newv,memory_order succ,memory_order fail) volatile;\
	T cmpxch_val(T oldv,T newv,memory_order order=memory_order_seq_cst);T cmpxch_val(T oldv,T newv,memory_order order=memory_order_seq_cst) volatile;\
	bool cmpxch_weak(T oldv,T newv,memory_order succ,memory_order fail);bool cmpxch_weak(T oldv,T newv,memory_order succ,memory_order fail) volatile;\
	bool cmpxch_weak(T oldv,T newv,memory_order order=memory_order_seq_cst);bool cmpxch_weak(T oldv,T newv,memory_order order=memory_order_seq_cst) volatile;\
	T cmpxch_val_weak(T oldv,T newv,memory_order succ,memory_order fail);T cmpxch_val_weak(T oldv,T newv,memory_order succ,memory_order fail) volatile;\
	T cmpxch_val_weak(T oldv,T newv,memory_order order=memory_order_seq_cst);T cmpxch_val_weak(T oldv,T newv,memory_order order=memory_order_seq_cst) volatile;
#define __PRIVATE_CXX_ATOMIC_SPECIALIZE_INTEGRAL(T)
#define __USERKERN_PAD_PID(x)
#define __USERKERN_PAD_UID(x)
#define __USERKERN_PAD_GID(x)

#define phys_foreach_b(buf,buf_bytes,addr,num_bytes,...) for(;;){__VA_ARGS__;}
#define phys_foreach_w(buf,buf_words,addr,num_words,...) for(;;){__VA_ARGS__;}
#define phys_foreach_l(buf,buf_dwords,addr,num_dwords,...) for(;;){__VA_ARGS__;}
#define phys_foreach_q(buf,buf_qwords,addr,num_qwords,...) for(;;){__VA_ARGS__;}

#define DEFINE_LAZY_LIBDL_RELOCATION(s,t,n) t libc_get_##n(){}
#define DEFINE_LIBICONV_AUTORESOLVE_SYMBOL(n) int n(){}void*libc_resolve_libiconv_##n(){}
#define DEFINE_KERNEL32_RESOLVER(n) void*libd_resolve_##n(){}
#define DEFINE_KERNEL32_FORWARDER_FUNCTION(T,c,n,p,k,a) T DOS$##n p{}T libd_##n p{}
#define DEFINE_LIBC_SIGINFO_LIST(n,N,s) char const**libc_##n##_init(){}
#define DEFINE_NOREL_GLOBAL_META(T,n,s) T*libc_pdyn_##n=0;T*libc_bind_##n(){}
#define DECLARE_NOREL_GLOBAL_META(T,n) extern T*libc_pdyn_##n;T*libc_bind_##n()
#define DEFINE_DO_ATOMIC_CMPXCH(X,N) u##N do_atomic_cmpxch##X(struct icpustate**pstate,u##N *addr,u##N oldval,u##N newval,bool force_atomic){}
#define DEFINE_DO_ATOMIC_CMPXCH_OR_WRITE(X,N) bool do_atomic_cmpxch##X##_or_write(struct icpustate**pstate,u##N*addr,u##N oldval,u##N newval,bool force_atomic){}
#define FOREACH_PAGING_FUNCTION(c) c(pagedir_init);c(pagedir_fini);c(pagedir_prepareone);c(pagedir_prepare);c(pagedir_unprepareone);c(pagedir_unprepare);c(pagedir_maphintone);c(pagedir_maphint);c(pagedir_gethint);c(pagedir_mapone);c(pagedir_map);c(pagedir_push_mapone);c(pagedir_pop_mapone);c(pagedir_unmapone);c(pagedir_unmap);c(pagedir_denywriteone);c(pagedir_denywrite);c(pagedir_unmap_userspace);c(pagedir_unmap_userspace_nosync);c(pagedir_translate);c(pagedir_ismapped);c(pagedir_iswritable);c(pagedir_isuseraccessible);c(pagedir_isuserwritable);c(pagedir_haschanged);c(pagedir_unsetchanged);
#define DEFINE_PUBLIC_ALIAS_PAGING_P32(n) int n(){}
#define DEFINE_PUBLIC_ALIAS_PAGING_PAE(n) int n(){}
#define DEFINE_DISKRULE(devdiskrule_name,n,ino,symbol_byname,symbol_toname,h) struct blkdev*symbol_byname(struct devdiskruledir*self,struct flookup_info*info);ssize_t symbol_toname(struct devdiskruledir*self,pformatprinter printer,void*arg,struct blkdev*dev,uintptr_t variant);struct devdiskruledir _dir_##devdiskrule_name={};struct devdiskrule devdiskrule_name={}
#define DEFINE_PH_SLAB_MALLOC_FUNCTIONS(sz,_) void*ph_slab_malloc##sz(gfp_t flags);
#define DEFINE_PH_SLAB_MALLOC_FUNCTIONS_IMPL(sz,_) void*ph_slab_malloc##sz(gfp_t flags){}
#define DEFINE_PH_SLAB_KMALLOC_FUNCTIONS(sz,_) void*ph_slab_kmalloc##sz(gfp_t flags);void*ph_slab_kmalloc_nx##sz(gfp_t flags);
#define DEFINE_PH_SLAB_KMALLOC_FUNCTIONS_IMPL(sz,_) void*ph_slab_kmalloc##sz(gfp_t flags){}void*ph_slab_kmalloc_nx##sz(gfp_t flags){}
#define DEFINE_SLAB_ALLOCATOR_FUNCTIONS(sz,_) void*slab_malloc##sz(gfp_t flags);void*slab_kmalloc##sz(gfp_t flags);void*slab_kmalloc_nx##sz(gfp_t flags);
#define DEFINE_UNARY_VIO_OPERATOR(n,bwlqx,T,opcode) static T n(struct vioargs*args,vio_addr_t addr){}
#define DEFINE_BINARY_VIO_OPERATOR_VOID(n,bwlqx,T,opcode) static void n(struct vioargs*args,vio_addr_t addr,T arg0){}
#define DEFINE_BINARY_VIO_OPERATOR_ATOMIC(n,bwlqx,T,opcode) static T n(struct vioargs*args,vio_addr_t addr,T arg0,bool atomic){}
#define DEFINE_TRINARY_VIO_OPERATOR_ATOMIC(n,bwlqx,T,opcode) static T n(struct vioargs*args,vio_addr_t addr,T arg0,T arg1,bool atomic){}
#define DEFINE_FIELD_SYMBOL(n,BASE,OFFSET,SIZEOF,T,field) ;int n(){};
#define DEFINE_TIMESTRUCT_NOTE(n,T,note_time_value,a,b) ssize_t n(pformatprinter printer,void*arg,void const*pointer,unsigned int*pstatus){}
#define _FDIRENT_FIELDS_WITHOUT_NAME refcnt_t fd_refcnt;struct fdirent_ops const*fd_ops;ino_t fd_ino;uintptr_t fd_hash;u16 fd_namelen;unsigned char fd_type;
#define _FDIRENT_FIELDS _FDIRENT_FIELDS_WITHOUT_NAME char fd_name[];
#define DEFINE_XSYSCALL_EXPORT(n,_) int libc_##n(){}int n(){}
#define DEFINE_LIBICONV_SYMBOL_BINDING(T,n) T pdyn_##n=0;char const name_##n[]=#n;T libc_resolve_##n(){}
#define DEFINE_SUPPLEMENTAL_LIBICONV_LIBRARY_BINDING(n) typedef void(*_PSUPENCODE_INIT_##n)(struct iconv_encode*self,struct iconv_printer*input);typedef void(*_PSUPDECODE_INIT_##n)(struct iconv_decode*self,struct iconv_printer*input);_PSUPENCODE_INIT_##n pdyn_iconv_##n##_encode_init=0;_PSUPDECODE_INIT_##n pdyn_iconv_##n##_decode_init=0;void*pdyn_libiconv_##n=0;bool load_libiconv_##n(){}
#define DEFINE_CPUSTATE_GETTERS(get_struct_xcpustate,set_struct_xcpustate,libuw_unwind_getreg_xcpustate,b1,libuw_unwind_getreg_xcpustate_exclusive,libuw_unwind_setreg_xcpustate,b2,libuw_unwind_setreg_xcpustate_exclusive) unwind_errno_t libuw_unwind_getreg_xcpustate(get_struct_xcpustate self,unwind_regno_t dw_regno,void*dst){}unwind_errno_t libuw_unwind_setreg_xcpustate(set_struct_xcpustate self,unwind_regno_t dw_regno,void const*src){}unwind_errno_t libuw_unwind_getreg_xcpustate_exclusive(get_struct_xcpustate self,unwind_regno_t dw_regno,void*dst){}unwind_errno_t libuw_unwind_setreg_xcpustate_exclusive(set_struct_xcpustate self,unwind_regno_t dw_regno,void const*src){}
#define DEFINE_FORMAT_CONVERTER_WITH_BITFIELD_UNION_RGBA(n,d,union_type) video_pixel_t n##_color2pixel(struct video_surface const*surface,video_color_t color){}video_color_t n##_pixel2color(struct video_surface const*surface,video_pixel_t pixel){}
#define DEFINE_FORMAT_CONVERTER_WITH_BITFIELD_UNION_RGBX(n,d,union_type) video_pixel_t n##_color2pixel(struct video_surface const*surface,video_color_t color){}video_color_t n##_pixel2color(struct video_surface const*surface,video_pixel_t pixel){}
#define DEFINE_FORMAT_CONVERTER_WITH_BITFIELD_UNION_RGB(n,d,union_type)  video_pixel_t n##_color2pixel(struct video_surface const*surface,video_color_t color){}video_color_t n##_pixel2color(struct video_surface const*surface,video_pixel_t pixel){}
#define DEFINE_FORMAT_PIXEL_UNION(n,d,...) union pixel_##n{d data;struct __VA_ARGS__;};
#define DEFINE_FORMAT_CONVERTER_RGBA(n,d,...) DEFINE_FORMAT_PIXEL_UNION(n,d,__VA_ARGS__) DEFINE_FORMAT_CONVERTER_WITH_BITFIELD_UNION_RGBA(n,d,union pixel_##n)
#define DEFINE_FORMAT_CONVERTER_RGBX(n,d,...) DEFINE_FORMAT_PIXEL_UNION(n,d,__VA_ARGS__) DEFINE_FORMAT_CONVERTER_WITH_BITFIELD_UNION_RGBX(n,d,union pixel_##n)
#define DEFINE_FORMAT_CONVERTER_RGB(n,d,...)  DEFINE_FORMAT_PIXEL_UNION(n,d,__VA_ARGS__) DEFINE_FORMAT_CONVERTER_WITH_BITFIELD_UNION_RGB(n,d,union pixel_##n)
#define _ASYNC_WORKER_CXX_DECLARE(_,T)\
	async*async_worker_new(async_worker_ops const*ops,T*ob_pointer){}\
	bool register_async_worker(async_worker_ops const*ops,T*ob_pointer){}\
	bool unregister_async_worker(async_worker_ops const*ops,T*ob_pointer){}
#define __NRFEAT_SYSCALL_TABLE_FOREACH(c)c(0)c(1)
#define __NR32FEAT_SYSCALL_TABLE_FOREACH(c)c(0)c(1)
#define __NR64FEAT_SYSCALL_TABLE_FOREACH(c)c(0)c(1)
#define REGEX_DATA
#define REGEX_RODATA
#define REGEX_BSS
#define DEFINE_REGEX_BINDING(T,name) T pdyn_##name=0;char const name_##name[]=#name

#define USER_TRY
#define USER_EXCEPT(x)
#define TARGET(...)
#define XTARGET(...)
#define UM_ElfW ElfW

#define __KERNEL_SELECT(a,...) a
#define KERNEL_INTERRUPT_CALLBACK_CC
#define DEFINE_CTYPE(T,n) T n
#define DEFINE_CTYPE_TRIPLE(_,n) struct _basic_ctype ctype_##n={};struct _pointer_ctype ctype_##n##_ptr={};struct _pointer_ctype ctype_##n##_const_ptr={};struct _pointer_ctype ctype_##n##_compat_ptr={};struct _pointer_ctype ctype_##n##_const_compat_ptr={};
#define DEFINE_RAMGFX_GETSETPIXELn(n)\
	video_pixel_t libvideo_ramgfx__getpixel##n(struct video_gfx const*__restrict self,video_coord_t x,video_coord_t y){}\
	void libvideo_ramgfx__setpixel##n(struct video_gfx const*__restrict self,video_coord_t x,video_coord_t y,video_pixel_t pixel){}
#define GFX_FOREACH_DEDICATED_BLENDMODE(cb)cb(alpha,0)cb(alpha_premultiplied,0)cb(add,0)cb(add_premultiplied,0)cb(mod,0)cb(mul,0)
#define GFX_FOREACH_DEDICATED_BLENDMODE_FACTOR(cb)cb(alpha_factor,0)
#define DECLARE_libvideo_swgfx_generic__putcolor_FOO(name,...) void libvideo_swgfx_generic__putcolor_##name(struct video_gfx const*__restrict self,video_coord_t x,video_coord_t y,video_color_t color);
#define DEFINE_libvideo_swgfx_generic__putcolor_FOO(name,...) void libvideo_swgfx_generic__putcolor_##name(struct video_gfx const*__restrict self,video_coord_t x,video_coord_t y,video_color_t color){}
#define DECLARE_libvideo_ramgfx__putcolor_FOO(name,...) void libvideo_ramgfx__putcolor_##name(struct video_gfx const*__restrict self,video_coord_t x,video_coord_t y,video_color_t color);
#define DEFINE_libvideo_ramgfx__putcolor_FOO(name,...) void libvideo_ramgfx__putcolor_##name(struct video_gfx const*__restrict self,video_coord_t x,video_coord_t y,video_color_t color){}
#define DEFINE_vp_kd_treeN_find(N)void vp_kd_tree##N##_find(struct video_palette_cache const*node,video_color_t color,unsigned int chan_id,struct kd_tree_result*result){}
#define LOCAL_IF_IMATRIX(x)
#define LOCAL_ATTR
#define DEFINE_PIXEL2COLOR64_WRAPPER32(d,_,x)video_color64_t x(struct video_surface const*__restrict surface,video_pixel64_t pixel){}
#define DEFINE_COLOR2PIXEL64_WRAPPER32(d,_,x)video_pixel64_t x(struct video_surface const*__restrict surface,video_color64_t color){}
#define DEFINE_PIXEL64_WRAPPERS(d,x)video_color64_t x##_pixel2color64(struct video_surface const*__restrict surface,video_pixel64_t pixel){}video_pixel64_t x##_color2pixel64(struct video_surface const*__restrict surface,video_color64_t color){}
#define LOCAL_FUNC64(x) x##_64
#define DEFINE_GENERIC_linefill__with__setpixel(f,...)static void f(byte_t*__restrict line,video_coord_t x,video_pixel_t pixel,video_dim_t num_pixels){}
#define DEFINE_GENERIC_vertfill__with__setpixel(f,...)static void f(byte_t*__restrict line,video_coord_t x,size_t stride,video_pixel_t pixel,video_dim_t num_pixels){}
#define DEFINE_GENERIC_rectfill__with__linefill(f,...)static void f(byte_t*__restrict line,video_coord_t x,size_t stride,video_pixel_t pixel,video_dim_t size_x,video_dim_t size_y){}
#define DEFINE_GENERIC_rectcopy__with__getpixel__and__setpixel(f,...)static void f(byte_t*__restrict dst_line,video_coord_t dst_x,size_t dst_stride,byte_t const*__restrict src_line,video_coord_t src_x,size_t src_stride,video_dim_t size_x,video_dim_t size_y){}
#define DEFINE_GENERIC_linecopy__with__getpixel__and__setpixel(f,...)static void f(byte_t*__restrict dst_line,video_coord_t dst_x,byte_t const*__restrict src_line,video_coord_t src_x,video_dim_t size_x){}
#define DEFINE_GENERIC_rectmove__with__getpixel__and__setpixel(f,...)static void f(byte_t*__restrict dst_line,video_coord_t dst_x,byte_t const*__restrict src_line,video_coord_t src_x,size_t stride,video_dim_t size_x,video_dim_t size_y){}
#define DEFINE_GENERIC_setpixel3__with__setpixel(f,...)static void f(byte_t*__restrict line,video_coord_t x,video_pixel_t pixel){}
#define DEFINE_PIXEL64_IO_WRAPPERS(...)
#define DEFINE_PIXEL64_IO_WRAPPERS__WITH_PREFIX(...)
#define DEFINE_PIXEL64_IO_WRAPPERS__WITH_SUFFIX(...)
#define DECLARE_libvideo_swblitter3__blend_FOO(n,...) \
	video_color_t libvideo_swblitter3__blend_##n(struct video_blitter3 const*__restrict self,video_color_t dst,video_color_t src);
#define DEFINE_libvideo_swblitter3__blend_FOO(n,...) \
	video_color_t libvideo_swblitter3__blend_##n(struct video_blitter3 const*__restrict self,video_color_t dst,video_color_t src){}

#define DECLARE_libvideo_swgfx_generic__render_preblend_FOO(n,...)\
	void libvideo_swgfx_preblend__absline_llhh__##n(struct video_gfx const*__restrict self,video_coord_t dst_x,video_coord_t dst_y,video_dim_t size_x,video_dim_t size_y,video_color_t color);\
	void libvideo_swgfx_preblend__absline_lhhl__##n(struct video_gfx const*__restrict self,video_coord_t dst_x,video_coord_t dst_y,video_dim_t size_x,video_dim_t size_y,video_color_t color);\
	void libvideo_swgfx_preblend__absline_llhh_l__##n(struct video_gfx const*__restrict self,video_coord_t dst_x,video_coord_t dst_y,video_dim_t size_x,video_dim_t size_y,video_color_t color);\
	void libvideo_swgfx_preblend__absline_lhhl_l__##n(struct video_gfx const*__restrict self,video_coord_t dst_x,video_coord_t dst_y,video_dim_t size_x,video_dim_t size_y,video_color_t color);\
	void libvideo_swgfx_preblend__absline_h__##n(struct video_gfx const*__restrict self,video_coord_t dst_x,video_coord_t dst_y,video_dim_t length,video_color_t color);\
	void libvideo_swgfx_preblend__absline_v__##n(struct video_gfx const*__restrict self,video_coord_t dst_x,video_coord_t dst_y,video_dim_t length,video_color_t color);\
	void libvideo_swgfx_preblend__absfill__##n(struct video_gfx const*__restrict self,video_coord_t dst_x,video_coord_t dst_y,video_dim_t size_x,video_dim_t size_y,video_color_t color);\
	void libvideo_swgfx_preblend__absgradient__##n(struct video_gfx const*__restrict self,video_coord_t dst_x,video_coord_t dst_y,video_dim_t size_x,video_dim_t size_y,video_color_t const colors[2][2]);\
	void libvideo_swgfx_preblend__absgradient_h__##n(struct video_gfx const*__restrict self,video_coord_t dst_x,video_coord_t dst_y,video_dim_t size_x,video_dim_t size_y,video_color_t locolor,video_color_t hicolor);\
	void libvideo_swgfx_preblend__absgradient_v__##n(struct video_gfx const*__restrict self,video_coord_t dst_x,video_coord_t dst_y,video_dim_t size_x,video_dim_t size_y,video_color_t locolor,video_color_t hicolor);
#define DEFINE_libvideo_swgfx_generic__render_preblend_FOO(n,...)\
	void libvideo_swgfx_preblend__absline_llhh__##n(struct video_gfx const*__restrict self,video_coord_t dst_x,video_coord_t dst_y,video_dim_t size_x,video_dim_t size_y,video_color_t color){}\
	void libvideo_swgfx_preblend__absline_lhhl__##n(struct video_gfx const*__restrict self,video_coord_t dst_x,video_coord_t dst_y,video_dim_t size_x,video_dim_t size_y,video_color_t color){}\
	void libvideo_swgfx_preblend__absline_llhh_l__##n(struct video_gfx const*__restrict self,video_coord_t dst_x,video_coord_t dst_y,video_dim_t size_x,video_dim_t size_y,video_color_t color){}\
	void libvideo_swgfx_preblend__absline_lhhl_l__##n(struct video_gfx const*__restrict self,video_coord_t dst_x,video_coord_t dst_y,video_dim_t size_x,video_dim_t size_y,video_color_t color){}\
	void libvideo_swgfx_preblend__absline_h__##n(struct video_gfx const*__restrict self,video_coord_t dst_x,video_coord_t dst_y,video_dim_t length,video_color_t color){}\
	void libvideo_swgfx_preblend__absline_v__##n(struct video_gfx const*__restrict self,video_coord_t dst_x,video_coord_t dst_y,video_dim_t length,video_color_t color){}\
	void libvideo_swgfx_preblend__absfill__##n(struct video_gfx const*__restrict self,video_coord_t dst_x,video_coord_t dst_y,video_dim_t size_x,video_dim_t size_y,video_color_t color){}\
	void libvideo_swgfx_preblend__absgradient__##n(struct video_gfx const*__restrict self,video_coord_t dst_x,video_coord_t dst_y,video_dim_t size_x,video_dim_t size_y,video_color_t const colors[2][2]){}\
	void libvideo_swgfx_preblend__absgradient_h__##n(struct video_gfx const*__restrict self,video_coord_t dst_x,video_coord_t dst_y,video_dim_t size_x,video_dim_t size_y,video_color_t locolor,video_color_t hicolor){}\
	void libvideo_swgfx_preblend__absgradient_v__##n(struct video_gfx const*__restrict self,video_coord_t dst_x,video_coord_t dst_y,video_dim_t size_x,video_dim_t size_y,video_color_t locolor,video_color_t hicolor){}
#define GFX_FOREACH_DEDICATED_PREBLENDMODE(cb)cb(alpha,0,alpha_premultiplied,gfx_preblend_alpha)cb(alpha_factor,0,alpha_premultiplied,gfx_preblend_alpha_factor)cb(alpha_override,0,alpha_premultiplied,gfx_preblend_alpha_override)cb(add,0,add_premultiplied,gfx_preblend_add)
#define DEFINE_VIDEO_BUFFER_TYPE(name,...) struct video_buffer_ops name={};struct video_buffer_ops const*_##name(void){}
#define __VIDEO_CODEC_const const
