/* Copyright (c) 2019 Griefer@Work                                            *
 *                                                                            *
 * This software is provided 'as-is', without any express or implied          *
 * warranty. In no event will the authors be held liable for any damages      *
 * arising from the use of this software.                                     *
 *                                                                            *
 * Permission is granted to anyone to use this software for any purpose,      *
 * including commercial applications, and to alter it and redistribute it     *
 * freely, subject to the following restrictions:                             *
 *                                                                            *
 * 1. The origin of this software must not be misrepresented; you must not    *
 *    claim that you wrote the original software. If you use this software    *
 *    in a product, an acknowledgement in the product documentation would be  *
 *    appreciated but is not required.                                        *
 * 2. Altered source versions must be plainly marked as such, and must not be *
 *    misrepresented as being the original software.                          *
 * 3. This notice may not be removed or altered from any source distribution. *
 */
#ifndef _LIBUNWIND_CFI_X86_64_H
#define _LIBUNWIND_CFI_X86_64_H 1

#include "../api.h"
#include <hybrid/host.h>
#include <hybrid/typecore.h>

/* x86_64-specific CFI constants. */
#define CFI_X86_64_UNWIND_REGISTER_SIZE      8
#define CFI_X86_64_UNWIND_FPU_REGISTER_SIZE  16
#define CFI_X86_64_UNWIND_IS_FPU_REGISTER(regno)                                                  \
	(((regno) >= CFI_X86_64_UNWIND_REGISTER_XMM0 && (regno) <= CFI_X86_64_UNWIND_REGISTER_MM7) || \
	 ((regno) >= CFI_X86_64_UNWIND_REGISTER_XMM16 && (regno) <= CFI_X86_64_UNWIND_REGISTER_XMM31))
#define CFI_X86_64_REGISTER_SIZE(regno)       \
	(CFI_X86_64_UNWIND_IS_FPU_REGISTER(regno) \
	 ? CFI_X86_64_UNWIND_FPU_REGISTER_SIZE    \
	 : CFI_X86_64_UNWIND_REGISTER_SIZE)

#define CFI_X86_64_UNWIND_REGISTER_PC        CFI_X86_64_UNWIND_REGISTER_RIP /* The register containing the program counter. */
#define CFI_X86_64_UNWIND_REGISTER_SP        CFI_X86_64_UNWIND_REGISTER_RSP /* The register for the CFA. */
#define CFI_X86_64_UNWIND_REGISTER_EXCEPTION CFI_X86_64_UNWIND_REGISTER_RAX /* The register used to hold the current exception upon entry to an exception handler. */
#define CFI_X86_64_UNWIND_REGISTER_RAX    0
#define CFI_X86_64_UNWIND_REGISTER_RDX    1
#define CFI_X86_64_UNWIND_REGISTER_RCX    2
#define CFI_X86_64_UNWIND_REGISTER_RBX    3
#define CFI_X86_64_UNWIND_REGISTER_RSI    4
#define CFI_X86_64_UNWIND_REGISTER_RDI    5
#define CFI_X86_64_UNWIND_REGISTER_RBP    6
#define CFI_X86_64_UNWIND_REGISTER_RSP    7
#define CFI_X86_64_UNWIND_REGISTER_R8     8
#define CFI_X86_64_UNWIND_REGISTER_R9     9
#define CFI_X86_64_UNWIND_REGISTER_R10    10
#define CFI_X86_64_UNWIND_REGISTER_R11    11
#define CFI_X86_64_UNWIND_REGISTER_R12    12
#define CFI_X86_64_UNWIND_REGISTER_R13    13
#define CFI_X86_64_UNWIND_REGISTER_R14    14
#define CFI_X86_64_UNWIND_REGISTER_R15    15
#define CFI_X86_64_UNWIND_REGISTER_RIP    16
#define CFI_X86_64_UNWIND_REGISTER_XMM0   17
#define CFI_X86_64_UNWIND_REGISTER_XMM1   18
#define CFI_X86_64_UNWIND_REGISTER_XMM2   19
#define CFI_X86_64_UNWIND_REGISTER_XMM3   20
#define CFI_X86_64_UNWIND_REGISTER_XMM4   21
#define CFI_X86_64_UNWIND_REGISTER_XMM5   22
#define CFI_X86_64_UNWIND_REGISTER_XMM6   23
#define CFI_X86_64_UNWIND_REGISTER_XMM7   24
#define CFI_X86_64_UNWIND_REGISTER_XMM8   25
#define CFI_X86_64_UNWIND_REGISTER_XMM9   26
#define CFI_X86_64_UNWIND_REGISTER_XMM10  27
#define CFI_X86_64_UNWIND_REGISTER_XMM11  28
#define CFI_X86_64_UNWIND_REGISTER_XMM12  29
#define CFI_X86_64_UNWIND_REGISTER_XMM13  30
#define CFI_X86_64_UNWIND_REGISTER_XMM14  31
#define CFI_X86_64_UNWIND_REGISTER_XMM15  32
#define CFI_X86_64_UNWIND_REGISTER_ST0    33
#define CFI_X86_64_UNWIND_REGISTER_ST1    34
#define CFI_X86_64_UNWIND_REGISTER_ST2    35
#define CFI_X86_64_UNWIND_REGISTER_ST3    36
#define CFI_X86_64_UNWIND_REGISTER_ST4    37
#define CFI_X86_64_UNWIND_REGISTER_ST5    38
#define CFI_X86_64_UNWIND_REGISTER_ST6    39
#define CFI_X86_64_UNWIND_REGISTER_ST7    40
#define CFI_X86_64_UNWIND_REGISTER_MM0    41
#define CFI_X86_64_UNWIND_REGISTER_MM1    42
#define CFI_X86_64_UNWIND_REGISTER_MM2    43
#define CFI_X86_64_UNWIND_REGISTER_MM3    44
#define CFI_X86_64_UNWIND_REGISTER_MM4    45
#define CFI_X86_64_UNWIND_REGISTER_MM5    46
#define CFI_X86_64_UNWIND_REGISTER_MM6    47
#define CFI_X86_64_UNWIND_REGISTER_MM7    48
#define CFI_X86_64_UNWIND_REGISTER_RFLAGS 49
#define CFI_X86_64_UNWIND_REGISTER_ES     50
#define CFI_X86_64_UNWIND_REGISTER_CS     51
#define CFI_X86_64_UNWIND_REGISTER_SS     52
#define CFI_X86_64_UNWIND_REGISTER_DS     53
#define CFI_X86_64_UNWIND_REGISTER_FS     54
#define CFI_X86_64_UNWIND_REGISTER_GS     55
/*      CFI_X86_64_UNWIND_REGISTER_       56 */
/*      CFI_X86_64_UNWIND_REGISTER_       57 */
#define CFI_X86_64_UNWIND_REGISTER_FSBASE 58 /* gas knows this as `%fs.base' */
#define CFI_X86_64_UNWIND_REGISTER_GSBASE 59 /* gas knows this as `%fs.base' */
/*      CFI_X86_64_UNWIND_REGISTER_       60 */
/*      CFI_X86_64_UNWIND_REGISTER_       61 */
#define CFI_X86_64_UNWIND_REGISTER_TR     62
#define CFI_X86_64_UNWIND_REGISTER_LDTR   63
#define CFI_X86_64_UNWIND_REGISTER_MXCSR  64
#define CFI_X86_64_UNWIND_REGISTER_FCW    65
#define CFI_X86_64_UNWIND_REGISTER_FSW    66
#define CFI_X86_64_UNWIND_REGISTER_XMM16  67
#define CFI_X86_64_UNWIND_REGISTER_XMM17  68
#define CFI_X86_64_UNWIND_REGISTER_XMM18  69
#define CFI_X86_64_UNWIND_REGISTER_XMM19  70
#define CFI_X86_64_UNWIND_REGISTER_XMM20  71
#define CFI_X86_64_UNWIND_REGISTER_XMM21  72
#define CFI_X86_64_UNWIND_REGISTER_XMM22  73
#define CFI_X86_64_UNWIND_REGISTER_XMM23  74
#define CFI_X86_64_UNWIND_REGISTER_XMM24  75
#define CFI_X86_64_UNWIND_REGISTER_XMM25  76
#define CFI_X86_64_UNWIND_REGISTER_XMM26  77
#define CFI_X86_64_UNWIND_REGISTER_XMM27  78
#define CFI_X86_64_UNWIND_REGISTER_XMM28  79
#define CFI_X86_64_UNWIND_REGISTER_XMM29  80
#define CFI_X86_64_UNWIND_REGISTER_XMM30  81
#define CFI_X86_64_UNWIND_REGISTER_XMM31  82
/*      CFI_X86_64_UNWIND_REGISTER_       83 */
/*      CFI_X86_64_UNWIND_REGISTER_       ... */
/*      CFI_X86_64_UNWIND_REGISTER_       117 */
#define CFI_X86_64_UNWIND_REGISTER_K0     118
#define CFI_X86_64_UNWIND_REGISTER_K1     119
#define CFI_X86_64_UNWIND_REGISTER_K2     120
#define CFI_X86_64_UNWIND_REGISTER_K3     121
#define CFI_X86_64_UNWIND_REGISTER_K4     122
#define CFI_X86_64_UNWIND_REGISTER_K5     123
#define CFI_X86_64_UNWIND_REGISTER_K6     124
#define CFI_X86_64_UNWIND_REGISTER_K7     125
#define CFI_X86_64_UNWIND_REGISTER_COUNT  126



/* Register <--> Normal common/uncommon-register mapping */
#define CFI_X86_64_UNWIND_COMMON_REGISTER_RBX   0
#define CFI_X86_64_UNWIND_COMMON_REGISTER_RBP   1
#define CFI_X86_64_UNWIND_COMMON_REGISTER_R12   2
#define CFI_X86_64_UNWIND_COMMON_REGISTER_R13   3
#define CFI_X86_64_UNWIND_COMMON_REGISTER_R14   4
#define CFI_X86_64_UNWIND_COMMON_REGISTER_R15   5
#define CFI_X86_64_UNWIND_COMMON_REGISTER_RIP   6
#define CFI_X86_64_UNWIND_COMMON_REGISTER_COUNT 7

#define CFI_X86_64_UNWIND_UNCOMMON_REGISTER_SP     CFI_X86_64_UNWIND_UNCOMMON_REGISTER_RSP
#define CFI_X86_64_UNWIND_UNCOMMON_REGISTER_RAX    0
#define CFI_X86_64_UNWIND_UNCOMMON_REGISTER_RDX    1
#define CFI_X86_64_UNWIND_UNCOMMON_REGISTER_RCX    2
#define CFI_X86_64_UNWIND_UNCOMMON_REGISTER_RSI    3
#define CFI_X86_64_UNWIND_UNCOMMON_REGISTER_RDI    4
#define CFI_X86_64_UNWIND_UNCOMMON_REGISTER_RSP    5
#define CFI_X86_64_UNWIND_UNCOMMON_REGISTER_R8     6
#define CFI_X86_64_UNWIND_UNCOMMON_REGISTER_R9     7
#define CFI_X86_64_UNWIND_UNCOMMON_REGISTER_R10    8
#define CFI_X86_64_UNWIND_UNCOMMON_REGISTER_R11    9
#define CFI_X86_64_UNWIND_UNCOMMON_REGISTER_XMM0   10
#define CFI_X86_64_UNWIND_UNCOMMON_REGISTER_XMM1   11
#define CFI_X86_64_UNWIND_UNCOMMON_REGISTER_XMM2   12
#define CFI_X86_64_UNWIND_UNCOMMON_REGISTER_XMM3   13
#define CFI_X86_64_UNWIND_UNCOMMON_REGISTER_XMM4   14
#define CFI_X86_64_UNWIND_UNCOMMON_REGISTER_XMM5   15
#define CFI_X86_64_UNWIND_UNCOMMON_REGISTER_XMM6   16
#define CFI_X86_64_UNWIND_UNCOMMON_REGISTER_XMM7   17
#define CFI_X86_64_UNWIND_UNCOMMON_REGISTER_XMM8   18
#define CFI_X86_64_UNWIND_UNCOMMON_REGISTER_XMM9   19
#define CFI_X86_64_UNWIND_UNCOMMON_REGISTER_XMM10  20
#define CFI_X86_64_UNWIND_UNCOMMON_REGISTER_XMM11  21
#define CFI_X86_64_UNWIND_UNCOMMON_REGISTER_XMM12  22
#define CFI_X86_64_UNWIND_UNCOMMON_REGISTER_XMM13  23
#define CFI_X86_64_UNWIND_UNCOMMON_REGISTER_XMM14  24
#define CFI_X86_64_UNWIND_UNCOMMON_REGISTER_XMM15  25
#define CFI_X86_64_UNWIND_UNCOMMON_REGISTER_ST0    26
#define CFI_X86_64_UNWIND_UNCOMMON_REGISTER_ST1    27
#define CFI_X86_64_UNWIND_UNCOMMON_REGISTER_ST2    28
#define CFI_X86_64_UNWIND_UNCOMMON_REGISTER_ST3    29
#define CFI_X86_64_UNWIND_UNCOMMON_REGISTER_ST4    30
#define CFI_X86_64_UNWIND_UNCOMMON_REGISTER_ST5    31
#define CFI_X86_64_UNWIND_UNCOMMON_REGISTER_ST6    32
#define CFI_X86_64_UNWIND_UNCOMMON_REGISTER_ST7    33
#define CFI_X86_64_UNWIND_UNCOMMON_REGISTER_MM0    34
#define CFI_X86_64_UNWIND_UNCOMMON_REGISTER_MM1    35
#define CFI_X86_64_UNWIND_UNCOMMON_REGISTER_MM2    36
#define CFI_X86_64_UNWIND_UNCOMMON_REGISTER_MM3    37
#define CFI_X86_64_UNWIND_UNCOMMON_REGISTER_MM4    38
#define CFI_X86_64_UNWIND_UNCOMMON_REGISTER_MM5    39
#define CFI_X86_64_UNWIND_UNCOMMON_REGISTER_MM6    40
#define CFI_X86_64_UNWIND_UNCOMMON_REGISTER_MM7    41
#define CFI_X86_64_UNWIND_UNCOMMON_REGISTER_RFLAGS 42
#define CFI_X86_64_UNWIND_UNCOMMON_REGISTER_ES     43
#define CFI_X86_64_UNWIND_UNCOMMON_REGISTER_CS     44
#define CFI_X86_64_UNWIND_UNCOMMON_REGISTER_SS     45
#define CFI_X86_64_UNWIND_UNCOMMON_REGISTER_DS     46
#define CFI_X86_64_UNWIND_UNCOMMON_REGISTER_FS     47
#define CFI_X86_64_UNWIND_UNCOMMON_REGISTER_GS     48
#define CFI_X86_64_UNWIND_UNCOMMON_REGISTER_FSBASE 49
#define CFI_X86_64_UNWIND_UNCOMMON_REGISTER_GSBASE 50
#define CFI_X86_64_UNWIND_UNCOMMON_REGISTER_TR     51
#define CFI_X86_64_UNWIND_UNCOMMON_REGISTER_LDTR   52
#define CFI_X86_64_UNWIND_UNCOMMON_REGISTER_MXCSR  53
#define CFI_X86_64_UNWIND_UNCOMMON_REGISTER_FCW    54
#define CFI_X86_64_UNWIND_UNCOMMON_REGISTER_FSW    55
#define CFI_X86_64_UNWIND_UNCOMMON_REGISTER_COUNT  56
#define CFI_X86_64_UNWIND_UNCOMMON_REGISTER_XMM16  57
#define CFI_X86_64_UNWIND_UNCOMMON_REGISTER_XMM17  58
#define CFI_X86_64_UNWIND_UNCOMMON_REGISTER_XMM18  59
#define CFI_X86_64_UNWIND_UNCOMMON_REGISTER_XMM19  60
#define CFI_X86_64_UNWIND_UNCOMMON_REGISTER_XMM20  61
#define CFI_X86_64_UNWIND_UNCOMMON_REGISTER_XMM21  62
#define CFI_X86_64_UNWIND_UNCOMMON_REGISTER_XMM22  63
#define CFI_X86_64_UNWIND_UNCOMMON_REGISTER_XMM23  64
#define CFI_X86_64_UNWIND_UNCOMMON_REGISTER_XMM24  65
#define CFI_X86_64_UNWIND_UNCOMMON_REGISTER_XMM25  66
#define CFI_X86_64_UNWIND_UNCOMMON_REGISTER_XMM26  67
#define CFI_X86_64_UNWIND_UNCOMMON_REGISTER_XMM27  68
#define CFI_X86_64_UNWIND_UNCOMMON_REGISTER_XMM28  69
#define CFI_X86_64_UNWIND_UNCOMMON_REGISTER_XMM29  70
#define CFI_X86_64_UNWIND_UNCOMMON_REGISTER_XMM30  71
#define CFI_X86_64_UNWIND_UNCOMMON_REGISTER_XMM31  72
#define CFI_X86_64_UNWIND_UNCOMMON_REGISTER_K0     73
#define CFI_X86_64_UNWIND_UNCOMMON_REGISTER_K1     74
#define CFI_X86_64_UNWIND_UNCOMMON_REGISTER_K2     75
#define CFI_X86_64_UNWIND_UNCOMMON_REGISTER_K3     76
#define CFI_X86_64_UNWIND_UNCOMMON_REGISTER_K4     77
#define CFI_X86_64_UNWIND_UNCOMMON_REGISTER_K5     78
#define CFI_X86_64_UNWIND_UNCOMMON_REGISTER_K6     79
#define CFI_X86_64_UNWIND_UNCOMMON_REGISTER_K7     80
#define CFI_X86_64_UNWIND_UNCOMMON_REGISTER_COUNT  81

#ifdef __CC__

__LOCAL __ATTR_CONST __UINTPTR_HALF_TYPE__
__NOTHROW(cfi_x86_64_unwind_register_dw2common)(__UINTPTR_HALF_TYPE__ __dw_regno) {
	__UINTPTR_HALF_TYPE__ __result;
	switch (__dw_regno) {

	case CFI_X86_64_UNWIND_COMMON_REGISTER_RBX:
		__result = CFI_X86_64_UNWIND_REGISTER_RBX;
		break;

	case CFI_X86_64_UNWIND_COMMON_REGISTER_RBP:
		__result = CFI_X86_64_UNWIND_REGISTER_RBP;
		break;

	case CFI_X86_64_UNWIND_COMMON_REGISTER_R12:
		__result = CFI_X86_64_UNWIND_REGISTER_R12;
		break;

	case CFI_X86_64_UNWIND_COMMON_REGISTER_R13:
		__result = CFI_X86_64_UNWIND_REGISTER_R13;
		break;

	case CFI_X86_64_UNWIND_COMMON_REGISTER_R14:
		__result = CFI_X86_64_UNWIND_REGISTER_R14;
		break;

	case CFI_X86_64_UNWIND_COMMON_REGISTER_R15:
		__result = CFI_X86_64_UNWIND_REGISTER_R15;
		break;

	case CFI_X86_64_UNWIND_COMMON_REGISTER_RIP:
		__result = CFI_X86_64_UNWIND_REGISTER_RIP;
		break;

	default:
		__result = CFI_X86_64_UNWIND_REGISTER_COUNT;
		break;
	}
	return __result;
}

__LOCAL __ATTR_CONST __UINTPTR_HALF_TYPE__
__NOTHROW(cfi_x86_64_unwind_register_common2dw)(__UINTPTR_HALF_TYPE__ __com_regno) {
	__UINTPTR_HALF_TYPE__ __result;
	switch (__com_regno) {

	case CFI_X86_64_UNWIND_REGISTER_RBX:
		__result = CFI_X86_64_UNWIND_COMMON_REGISTER_RBX;
		break;

	case CFI_X86_64_UNWIND_REGISTER_RBP:
		__result = CFI_X86_64_UNWIND_COMMON_REGISTER_RBP;
		break;

	case CFI_X86_64_UNWIND_REGISTER_R12:
		__result = CFI_X86_64_UNWIND_COMMON_REGISTER_R12;
		break;

	case CFI_X86_64_UNWIND_REGISTER_R13:
		__result = CFI_X86_64_UNWIND_COMMON_REGISTER_R13;
		break;

	case CFI_X86_64_UNWIND_REGISTER_R14:
		__result = CFI_X86_64_UNWIND_COMMON_REGISTER_R14;
		break;

	case CFI_X86_64_UNWIND_REGISTER_R15:
		__result = CFI_X86_64_UNWIND_COMMON_REGISTER_R15;
		break;

	case CFI_X86_64_UNWIND_REGISTER_RIP:
		__result = CFI_X86_64_UNWIND_COMMON_REGISTER_RIP;
		break;

	default:
		__result = CFI_X86_64_UNWIND_COMMON_REGISTER_COUNT;
		break;
	}
	return __result;
}

__LOCAL __ATTR_CONST __UINTPTR_HALF_TYPE__
__NOTHROW(cfi_x86_64_unwind_register_dw2uncommon)(__UINTPTR_HALF_TYPE__ __dw_regno) {
	__UINTPTR_HALF_TYPE__ __result;
#if CFI_X86_64_UNWIND_REGISTER_RAX != 0
	if (__dw_regno >= CFI_X86_64_UNWIND_REGISTER_RAX &&
	    __dw_regno <= CFI_X86_64_UNWIND_REGISTER_RCX)
#else /* CFI_X86_64_UNWIND_REGISTER_RAX != 0 */
	if (__dw_regno <= CFI_X86_64_UNWIND_REGISTER_RCX)
#endif /* CFI_X86_64_UNWIND_REGISTER_RAX == 0 */
	{
		__result = CFI_X86_64_UNWIND_UNCOMMON_REGISTER_RAX + (__dw_regno - CFI_X86_64_UNWIND_REGISTER_RAX);
	} else if (__dw_regno >= CFI_X86_64_UNWIND_REGISTER_RSI &&
	           __dw_regno <= CFI_X86_64_UNWIND_REGISTER_RDI) {
		__result = CFI_X86_64_UNWIND_UNCOMMON_REGISTER_RSI + (__dw_regno - CFI_X86_64_UNWIND_REGISTER_RSI);
	} else if (__dw_regno >= CFI_X86_64_UNWIND_REGISTER_RSP &&
	           __dw_regno <= CFI_X86_64_UNWIND_REGISTER_R11) {
		__result = CFI_X86_64_UNWIND_UNCOMMON_REGISTER_RSP + (__dw_regno - CFI_X86_64_UNWIND_REGISTER_R11);
	} else if (__dw_regno >= CFI_X86_64_UNWIND_REGISTER_XMM0 &&
	           __dw_regno <= CFI_X86_64_UNWIND_REGISTER_GS) {
		__result = CFI_X86_64_UNWIND_UNCOMMON_REGISTER_XMM0 + (__dw_regno - CFI_X86_64_UNWIND_REGISTER_XMM0);
	} else if (__dw_regno >= CFI_X86_64_UNWIND_REGISTER_FSBASE &&
	           __dw_regno <= CFI_X86_64_UNWIND_REGISTER_GSBASE) {
		__result = CFI_X86_64_UNWIND_UNCOMMON_REGISTER_FSBASE + (__dw_regno - CFI_X86_64_UNWIND_REGISTER_FSBASE);
	} else if (__dw_regno >= CFI_X86_64_UNWIND_REGISTER_TR &&
	           __dw_regno <= CFI_X86_64_UNWIND_REGISTER_XMM31) {
		__result = CFI_X86_64_UNWIND_UNCOMMON_REGISTER_TR + (__dw_regno - CFI_X86_64_UNWIND_REGISTER_TR);
	} else if (__dw_regno >= CFI_X86_64_UNWIND_REGISTER_K0 &&
	           __dw_regno <= CFI_X86_64_UNWIND_REGISTER_K7) {
		__result = CFI_X86_64_UNWIND_UNCOMMON_REGISTER_K0 + (__dw_regno - CFI_X86_64_UNWIND_REGISTER_K0);
	} else {
		__result = CFI_X86_64_UNWIND_UNCOMMON_REGISTER_COUNT;
	}
	return __result;
}

__LOCAL __ATTR_CONST __UINTPTR_HALF_TYPE__
__NOTHROW(cfi_x86_64_unwind_register_uncommon2dw)(__UINTPTR_HALF_TYPE__ __uncom_regno) {
	__UINTPTR_HALF_TYPE__ __result;
#if CFI_X86_64_UNWIND_UNCOMMON_REGISTER_RAX != 0
	if (__uncom_regno >= CFI_X86_64_UNWIND_UNCOMMON_REGISTER_RAX &&
	    __uncom_regno <= CFI_X86_64_UNWIND_UNCOMMON_REGISTER_RCX)
#else /* CFI_X86_64_UNWIND_UNCOMMON_REGISTER_RAX != 0 */
	if (__uncom_regno <= CFI_X86_64_UNWIND_UNCOMMON_REGISTER_RCX)
#endif /* CFI_X86_64_UNWIND_UNCOMMON_REGISTER_RAX == 0 */
	{
		__result = CFI_X86_64_UNWIND_REGISTER_RAX + (__uncom_regno - CFI_X86_64_UNWIND_UNCOMMON_REGISTER_RAX);
	}
#if CFI_X86_64_UNWIND_UNCOMMON_REGISTER_RSI != CFI_X86_64_UNWIND_UNCOMMON_REGISTER_RCX + 1
	else if (__uncom_regno >= CFI_X86_64_UNWIND_UNCOMMON_REGISTER_RSI &&
	         __uncom_regno <= CFI_X86_64_UNWIND_UNCOMMON_REGISTER_RDI)
#else /* CFI_X86_64_UNWIND_UNCOMMON_REGISTER_RSI != CFI_X86_64_UNWIND_UNCOMMON_REGISTER_RCX + 1 */
	else if (__uncom_regno <= CFI_X86_64_UNWIND_UNCOMMON_REGISTER_RDI)
#endif /* CFI_X86_64_UNWIND_UNCOMMON_REGISTER_RSI == CFI_X86_64_UNWIND_UNCOMMON_REGISTER_RCX + 1 */
	{
		__result = CFI_X86_64_UNWIND_REGISTER_RSI + (__uncom_regno - CFI_X86_64_UNWIND_UNCOMMON_REGISTER_RSI);
	}
#if CFI_X86_64_UNWIND_UNCOMMON_REGISTER_RSP != CFI_X86_64_UNWIND_UNCOMMON_REGISTER_RDI + 1
	else if (__uncom_regno >= CFI_X86_64_UNWIND_UNCOMMON_REGISTER_RSP &&
	         __uncom_regno <= CFI_X86_64_UNWIND_UNCOMMON_REGISTER_R11)
#else /* CFI_X86_64_UNWIND_UNCOMMON_REGISTER_RSP != CFI_X86_64_UNWIND_UNCOMMON_REGISTER_RDI + 1 */
	else if (__uncom_regno <= CFI_X86_64_UNWIND_UNCOMMON_REGISTER_R11)
#endif /* CFI_X86_64_UNWIND_UNCOMMON_REGISTER_RSP == CFI_X86_64_UNWIND_UNCOMMON_REGISTER_RDI + 1 */
	{
		__result = CFI_X86_64_UNWIND_REGISTER_RSP + (__uncom_regno - CFI_X86_64_UNWIND_UNCOMMON_REGISTER_R11);
	}
#if CFI_X86_64_UNWIND_UNCOMMON_REGISTER_XMM0 != CFI_X86_64_UNWIND_UNCOMMON_REGISTER_R11 + 1
	else if (__uncom_regno >= CFI_X86_64_UNWIND_UNCOMMON_REGISTER_XMM0 &&
	         __uncom_regno <= CFI_X86_64_UNWIND_UNCOMMON_REGISTER_GS)
#else /* CFI_X86_64_UNWIND_UNCOMMON_REGISTER_XMM0 != CFI_X86_64_UNWIND_UNCOMMON_REGISTER_R11 + 1 */
	else if (__uncom_regno <= CFI_X86_64_UNWIND_UNCOMMON_REGISTER_GS)
#endif /* CFI_X86_64_UNWIND_UNCOMMON_REGISTER_XMM0 == CFI_X86_64_UNWIND_UNCOMMON_REGISTER_R11 + 1 */
	{
		__result = CFI_X86_64_UNWIND_REGISTER_XMM0 + (__uncom_regno - CFI_X86_64_UNWIND_UNCOMMON_REGISTER_XMM0);
	}
#if CFI_X86_64_UNWIND_UNCOMMON_REGISTER_FSBASE != CFI_X86_64_UNWIND_UNCOMMON_REGISTER_GS + 1
	else if (__uncom_regno >= CFI_X86_64_UNWIND_UNCOMMON_REGISTER_FSBASE &&
	         __uncom_regno <= CFI_X86_64_UNWIND_UNCOMMON_REGISTER_GSBASE)
#else /* CFI_X86_64_UNWIND_UNCOMMON_REGISTER_FSBASE != CFI_X86_64_UNWIND_UNCOMMON_REGISTER_GS + 1 */
	else if (__uncom_regno <= CFI_X86_64_UNWIND_UNCOMMON_REGISTER_GSBASE)
#endif /* CFI_X86_64_UNWIND_UNCOMMON_REGISTER_FSBASE == CFI_X86_64_UNWIND_UNCOMMON_REGISTER_GS + 1 */
	{
		__result = CFI_X86_64_UNWIND_REGISTER_FSBASE + (__uncom_regno - CFI_X86_64_UNWIND_UNCOMMON_REGISTER_FSBASE);
	}
#if CFI_X86_64_UNWIND_UNCOMMON_REGISTER_TR != CFI_X86_64_UNWIND_UNCOMMON_REGISTER_GSBASE + 1
	else if (__uncom_regno >= CFI_X86_64_UNWIND_UNCOMMON_REGISTER_TR &&
	         __uncom_regno <= CFI_X86_64_UNWIND_UNCOMMON_REGISTER_XMM31)
#else /* CFI_X86_64_UNWIND_UNCOMMON_REGISTER_TR != CFI_X86_64_UNWIND_UNCOMMON_REGISTER_GSBASE + 1 */
	else if (__uncom_regno <= CFI_X86_64_UNWIND_UNCOMMON_REGISTER_XMM31)
#endif /* CFI_X86_64_UNWIND_UNCOMMON_REGISTER_TR == CFI_X86_64_UNWIND_UNCOMMON_REGISTER_GSBASE + 1 */
	{
		__result = CFI_X86_64_UNWIND_REGISTER_TR + (__uncom_regno - CFI_X86_64_UNWIND_UNCOMMON_REGISTER_TR);
	}
#if CFI_X86_64_UNWIND_UNCOMMON_REGISTER_K0 != CFI_X86_64_UNWIND_UNCOMMON_REGISTER_XMM31 + 1
	else if (__uncom_regno >= CFI_X86_64_UNWIND_UNCOMMON_REGISTER_K0 &&
	         __uncom_regno <= CFI_X86_64_UNWIND_UNCOMMON_REGISTER_K7)
#else /* CFI_X86_64_UNWIND_UNCOMMON_REGISTER_K0 != CFI_X86_64_UNWIND_UNCOMMON_REGISTER_XMM31 + 1 */
	else if (__uncom_regno <= CFI_X86_64_UNWIND_UNCOMMON_REGISTER_K7)
#endif /* CFI_X86_64_UNWIND_UNCOMMON_REGISTER_K0 == CFI_X86_64_UNWIND_UNCOMMON_REGISTER_XMM31 + 1 */
	{
		__result = CFI_X86_64_UNWIND_REGISTER_K0 + (__uncom_regno - CFI_X86_64_UNWIND_UNCOMMON_REGISTER_K0);
	} else {
		__result = CFI_X86_64_UNWIND_REGISTER_COUNT;
	}
	return __result;
}

#endif /* __CC__ */





/* Register <--> Sigframe common/uncommon-register mapping */
#define CFI_X86_64_UNWIND_SIGFRAME_COMMON_REGISTER_SP     CFI_X86_64_UNWIND_SIGFRAME_COMMON_REGISTER_RSP
#define CFI_X86_64_UNWIND_SIGFRAME_COMMON_REGISTER_RAX    0
#define CFI_X86_64_UNWIND_SIGFRAME_COMMON_REGISTER_RDX    1
#define CFI_X86_64_UNWIND_SIGFRAME_COMMON_REGISTER_RCX    2
#define CFI_X86_64_UNWIND_SIGFRAME_COMMON_REGISTER_RBX    3
#define CFI_X86_64_UNWIND_SIGFRAME_COMMON_REGISTER_RSI    4
#define CFI_X86_64_UNWIND_SIGFRAME_COMMON_REGISTER_RDI    5
#define CFI_X86_64_UNWIND_SIGFRAME_COMMON_REGISTER_RBP    6
#define CFI_X86_64_UNWIND_SIGFRAME_COMMON_REGISTER_RSP    7
#define CFI_X86_64_UNWIND_SIGFRAME_COMMON_REGISTER_R8     8
#define CFI_X86_64_UNWIND_SIGFRAME_COMMON_REGISTER_R9     9
#define CFI_X86_64_UNWIND_SIGFRAME_COMMON_REGISTER_R10    10
#define CFI_X86_64_UNWIND_SIGFRAME_COMMON_REGISTER_R11    11
#define CFI_X86_64_UNWIND_SIGFRAME_COMMON_REGISTER_R12    12
#define CFI_X86_64_UNWIND_SIGFRAME_COMMON_REGISTER_R13    13
#define CFI_X86_64_UNWIND_SIGFRAME_COMMON_REGISTER_R14    14
#define CFI_X86_64_UNWIND_SIGFRAME_COMMON_REGISTER_R15    15
#define CFI_X86_64_UNWIND_SIGFRAME_COMMON_REGISTER_RIP    16
#define CFI_X86_64_UNWIND_SIGFRAME_COMMON_REGISTER_RFLAGS 17
#define CFI_X86_64_UNWIND_SIGFRAME_COMMON_REGISTER_ES     18
#define CFI_X86_64_UNWIND_SIGFRAME_COMMON_REGISTER_CS     19
#define CFI_X86_64_UNWIND_SIGFRAME_COMMON_REGISTER_SS     20
#define CFI_X86_64_UNWIND_SIGFRAME_COMMON_REGISTER_DS     21
#define CFI_X86_64_UNWIND_SIGFRAME_COMMON_REGISTER_FS     22
#define CFI_X86_64_UNWIND_SIGFRAME_COMMON_REGISTER_GS     23
#define CFI_X86_64_UNWIND_SIGFRAME_COMMON_REGISTER_FSBASE 24 /* gas knows this as `%fs.base' */
#define CFI_X86_64_UNWIND_SIGFRAME_COMMON_REGISTER_GSBASE 25 /* gas knows this as `%fs.base' */
#define CFI_X86_64_UNWIND_SIGFRAME_COMMON_REGISTER_COUNT  26

#define CFI_X86_64_UNWIND_SIGFRAME_UNCOMMON_REGISTER_XMM0   0
#define CFI_X86_64_UNWIND_SIGFRAME_UNCOMMON_REGISTER_XMM1   1
#define CFI_X86_64_UNWIND_SIGFRAME_UNCOMMON_REGISTER_XMM2   2
#define CFI_X86_64_UNWIND_SIGFRAME_UNCOMMON_REGISTER_XMM3   3
#define CFI_X86_64_UNWIND_SIGFRAME_UNCOMMON_REGISTER_XMM4   4
#define CFI_X86_64_UNWIND_SIGFRAME_UNCOMMON_REGISTER_XMM5   5
#define CFI_X86_64_UNWIND_SIGFRAME_UNCOMMON_REGISTER_XMM6   6
#define CFI_X86_64_UNWIND_SIGFRAME_UNCOMMON_REGISTER_XMM7   7
#define CFI_X86_64_UNWIND_SIGFRAME_UNCOMMON_REGISTER_XMM8   8
#define CFI_X86_64_UNWIND_SIGFRAME_UNCOMMON_REGISTER_XMM9   9
#define CFI_X86_64_UNWIND_SIGFRAME_UNCOMMON_REGISTER_XMM10  10
#define CFI_X86_64_UNWIND_SIGFRAME_UNCOMMON_REGISTER_XMM11  11
#define CFI_X86_64_UNWIND_SIGFRAME_UNCOMMON_REGISTER_XMM12  12
#define CFI_X86_64_UNWIND_SIGFRAME_UNCOMMON_REGISTER_XMM13  13
#define CFI_X86_64_UNWIND_SIGFRAME_UNCOMMON_REGISTER_XMM14  14
#define CFI_X86_64_UNWIND_SIGFRAME_UNCOMMON_REGISTER_XMM15  15
#define CFI_X86_64_UNWIND_SIGFRAME_UNCOMMON_REGISTER_ST0    16
#define CFI_X86_64_UNWIND_SIGFRAME_UNCOMMON_REGISTER_ST1    17
#define CFI_X86_64_UNWIND_SIGFRAME_UNCOMMON_REGISTER_ST2    18
#define CFI_X86_64_UNWIND_SIGFRAME_UNCOMMON_REGISTER_ST3    19
#define CFI_X86_64_UNWIND_SIGFRAME_UNCOMMON_REGISTER_ST4    20
#define CFI_X86_64_UNWIND_SIGFRAME_UNCOMMON_REGISTER_ST5    21
#define CFI_X86_64_UNWIND_SIGFRAME_UNCOMMON_REGISTER_ST6    22
#define CFI_X86_64_UNWIND_SIGFRAME_UNCOMMON_REGISTER_ST7    23
#define CFI_X86_64_UNWIND_SIGFRAME_UNCOMMON_REGISTER_MM0    24
#define CFI_X86_64_UNWIND_SIGFRAME_UNCOMMON_REGISTER_MM1    25
#define CFI_X86_64_UNWIND_SIGFRAME_UNCOMMON_REGISTER_MM2    26
#define CFI_X86_64_UNWIND_SIGFRAME_UNCOMMON_REGISTER_MM3    27
#define CFI_X86_64_UNWIND_SIGFRAME_UNCOMMON_REGISTER_MM4    28
#define CFI_X86_64_UNWIND_SIGFRAME_UNCOMMON_REGISTER_MM5    29
#define CFI_X86_64_UNWIND_SIGFRAME_UNCOMMON_REGISTER_MM6    30
#define CFI_X86_64_UNWIND_SIGFRAME_UNCOMMON_REGISTER_MM7    31
#define CFI_X86_64_UNWIND_SIGFRAME_UNCOMMON_REGISTER_TR     32
#define CFI_X86_64_UNWIND_SIGFRAME_UNCOMMON_REGISTER_LDTR   33
#define CFI_X86_64_UNWIND_SIGFRAME_UNCOMMON_REGISTER_MXCSR  34
#define CFI_X86_64_UNWIND_SIGFRAME_UNCOMMON_REGISTER_FCW    35
#define CFI_X86_64_UNWIND_SIGFRAME_UNCOMMON_REGISTER_FSW    36
#define CFI_X86_64_UNWIND_SIGFRAME_UNCOMMON_REGISTER_XMM16  37
#define CFI_X86_64_UNWIND_SIGFRAME_UNCOMMON_REGISTER_XMM17  38
#define CFI_X86_64_UNWIND_SIGFRAME_UNCOMMON_REGISTER_XMM18  39
#define CFI_X86_64_UNWIND_SIGFRAME_UNCOMMON_REGISTER_XMM19  40
#define CFI_X86_64_UNWIND_SIGFRAME_UNCOMMON_REGISTER_XMM20  41
#define CFI_X86_64_UNWIND_SIGFRAME_UNCOMMON_REGISTER_XMM21  42
#define CFI_X86_64_UNWIND_SIGFRAME_UNCOMMON_REGISTER_XMM22  43
#define CFI_X86_64_UNWIND_SIGFRAME_UNCOMMON_REGISTER_XMM23  44
#define CFI_X86_64_UNWIND_SIGFRAME_UNCOMMON_REGISTER_XMM24  45
#define CFI_X86_64_UNWIND_SIGFRAME_UNCOMMON_REGISTER_XMM25  46
#define CFI_X86_64_UNWIND_SIGFRAME_UNCOMMON_REGISTER_XMM26  47
#define CFI_X86_64_UNWIND_SIGFRAME_UNCOMMON_REGISTER_XMM27  48
#define CFI_X86_64_UNWIND_SIGFRAME_UNCOMMON_REGISTER_XMM28  49
#define CFI_X86_64_UNWIND_SIGFRAME_UNCOMMON_REGISTER_XMM29  50
#define CFI_X86_64_UNWIND_SIGFRAME_UNCOMMON_REGISTER_XMM30  51
#define CFI_X86_64_UNWIND_SIGFRAME_UNCOMMON_REGISTER_XMM31  52
#define CFI_X86_64_UNWIND_SIGFRAME_UNCOMMON_REGISTER_K0     53
#define CFI_X86_64_UNWIND_SIGFRAME_UNCOMMON_REGISTER_K1     54
#define CFI_X86_64_UNWIND_SIGFRAME_UNCOMMON_REGISTER_K2     55
#define CFI_X86_64_UNWIND_SIGFRAME_UNCOMMON_REGISTER_K3     56
#define CFI_X86_64_UNWIND_SIGFRAME_UNCOMMON_REGISTER_K4     57
#define CFI_X86_64_UNWIND_SIGFRAME_UNCOMMON_REGISTER_K5     58
#define CFI_X86_64_UNWIND_SIGFRAME_UNCOMMON_REGISTER_K6     59
#define CFI_X86_64_UNWIND_SIGFRAME_UNCOMMON_REGISTER_K7     60
#define CFI_X86_64_UNWIND_SIGFRAME_UNCOMMON_REGISTER_COUNT  61

#ifdef __CC__

__LOCAL __ATTR_CONST __UINTPTR_HALF_TYPE__
__NOTHROW(cfi_x86_64_unwind_sigframe_register_dw2common)(__UINTPTR_HALF_TYPE__ __dw_regno) {
	__UINTPTR_HALF_TYPE__ __result;
#if CFI_X86_64_UNWIND_REGISTER_RAX != 0
	if (__dw_regno >= CFI_X86_64_UNWIND_REGISTER_RAX &&
	    __dw_regno <= CFI_X86_64_UNWIND_REGISTER_RIP)
#else /* CFI_X86_64_UNWIND_REGISTER_RAX != 0 */
	if (__dw_regno <= CFI_X86_64_UNWIND_REGISTER_RIP)
#endif /* CFI_X86_64_UNWIND_REGISTER_RAX == 0 */
	{
		__result = CFI_X86_64_UNWIND_SIGFRAME_COMMON_REGISTER_RAX + (__dw_regno - CFI_X86_64_UNWIND_REGISTER_RAX);
	} else if (__dw_regno >= CFI_X86_64_UNWIND_REGISTER_RFLAGS &&
	           __dw_regno <= CFI_X86_64_UNWIND_REGISTER_GS)
		__result = CFI_X86_64_UNWIND_SIGFRAME_COMMON_REGISTER_RFLAGS + (__dw_regno - CFI_X86_64_UNWIND_REGISTER_RFLAGS);
	else if (__dw_regno >= CFI_X86_64_UNWIND_REGISTER_FSBASE &&
	         __dw_regno <= CFI_X86_64_UNWIND_REGISTER_GSBASE)
		__result = CFI_X86_64_UNWIND_SIGFRAME_COMMON_REGISTER_FSBASE + (__dw_regno - CFI_X86_64_UNWIND_REGISTER_FSBASE);
	else {
		__result = CFI_X86_64_UNWIND_SIGFRAME_COMMON_REGISTER_COUNT;
	}
	return __result;
}

__LOCAL __ATTR_CONST __UINTPTR_HALF_TYPE__
__NOTHROW(cfi_x86_64_unwind_sigframe_register_common2dw)(__UINTPTR_HALF_TYPE__ __com_regno) {
	__UINTPTR_HALF_TYPE__ __result;
#if CFI_X86_64_UNWIND_SIGFRAME_COMMON_REGISTER_RAX != 0
	if (__com_regno >= CFI_X86_64_UNWIND_SIGFRAME_COMMON_REGISTER_RAX &&
	    __com_regno <= CFI_X86_64_UNWIND_SIGFRAME_COMMON_REGISTER_RIP)
#else /* CFI_X86_64_UNWIND_SIGFRAME_COMMON_REGISTER_RAX != 0 */
	if (__com_regno <= CFI_X86_64_UNWIND_SIGFRAME_COMMON_REGISTER_RIP)
#endif /* CFI_X86_64_UNWIND_SIGFRAME_COMMON_REGISTER_RAX == 0 */
	{
		__result = CFI_X86_64_UNWIND_REGISTER_RAX + (__com_regno - CFI_X86_64_UNWIND_SIGFRAME_COMMON_REGISTER_RAX);
	}
#if CFI_X86_64_UNWIND_SIGFRAME_COMMON_REGISTER_RFLAGS != CFI_X86_64_UNWIND_SIGFRAME_COMMON_REGISTER_RIP + 1
	else if (__com_regno >= CFI_X86_64_UNWIND_SIGFRAME_COMMON_REGISTER_RFLAGS &&
	         __com_regno <= CFI_X86_64_UNWIND_SIGFRAME_COMMON_REGISTER_GS)
#else /* CFI_X86_64_UNWIND_SIGFRAME_COMMON_REGISTER_RFLAGS != CFI_X86_64_UNWIND_SIGFRAME_COMMON_REGISTER_RIP + 1 */
	else if (__com_regno <= CFI_X86_64_UNWIND_SIGFRAME_COMMON_REGISTER_GS)
#endif /* CFI_X86_64_UNWIND_SIGFRAME_COMMON_REGISTER_RFLAGS == CFI_X86_64_UNWIND_SIGFRAME_COMMON_REGISTER_RIP + 1 */
	{
		__result = CFI_X86_64_UNWIND_REGISTER_RFLAGS + (__com_regno - CFI_X86_64_UNWIND_SIGFRAME_COMMON_REGISTER_RFLAGS);
	}
#if CFI_X86_64_UNWIND_SIGFRAME_COMMON_REGISTER_FSBASE != CFI_X86_64_UNWIND_SIGFRAME_COMMON_REGISTER_GS + 1
	else if (__com_regno >= CFI_X86_64_UNWIND_SIGFRAME_COMMON_REGISTER_FSBASE &&
	         __com_regno <= CFI_X86_64_UNWIND_SIGFRAME_COMMON_REGISTER_GSBASE)
#else /* CFI_X86_64_UNWIND_SIGFRAME_COMMON_REGISTER_FSBASE != CFI_X86_64_UNWIND_SIGFRAME_COMMON_REGISTER_GS + 1 */
	else if (__com_regno <= CFI_X86_64_UNWIND_SIGFRAME_COMMON_REGISTER_GSBASE)
#endif /* CFI_X86_64_UNWIND_SIGFRAME_COMMON_REGISTER_FSBASE == CFI_X86_64_UNWIND_SIGFRAME_COMMON_REGISTER_GS + 1 */
	{
		__result = CFI_X86_64_UNWIND_REGISTER_FSBASE + (__com_regno - CFI_X86_64_UNWIND_SIGFRAME_COMMON_REGISTER_FSBASE);
	} else {
		__result = CFI_X86_64_UNWIND_REGISTER_COUNT;
	}
	return __result;
}

__LOCAL __ATTR_CONST __UINTPTR_HALF_TYPE__
__NOTHROW(cfi_x86_64_unwind_sigframe_register_dw2uncommon)(__UINTPTR_HALF_TYPE__ __dw_regno) {
	__UINTPTR_HALF_TYPE__ __result;
	if (__dw_regno >= CFI_X86_64_UNWIND_REGISTER_XMM0 &&
	    __dw_regno <= CFI_X86_64_UNWIND_REGISTER_MM7)
		__result = CFI_X86_64_UNWIND_SIGFRAME_UNCOMMON_REGISTER_XMM0 + (__dw_regno - CFI_X86_64_UNWIND_REGISTER_XMM0);
	else if (__dw_regno >= CFI_X86_64_UNWIND_REGISTER_TR &&
	         __dw_regno <= CFI_X86_64_UNWIND_REGISTER_XMM31)
		__result = CFI_X86_64_UNWIND_SIGFRAME_UNCOMMON_REGISTER_TR + (__dw_regno - CFI_X86_64_UNWIND_REGISTER_TR);
	else if (__dw_regno >= CFI_X86_64_UNWIND_REGISTER_K0 &&
	         __dw_regno <= CFI_X86_64_UNWIND_REGISTER_K7)
		__result = CFI_X86_64_UNWIND_SIGFRAME_UNCOMMON_REGISTER_K0 + (__dw_regno - CFI_X86_64_UNWIND_REGISTER_K0);
	else {
		__result = CFI_X86_64_UNWIND_SIGFRAME_UNCOMMON_REGISTER_COUNT;
	}
	return __result;
}

__LOCAL __ATTR_CONST __UINTPTR_HALF_TYPE__
__NOTHROW(cfi_x86_64_unwind_sigframe_register_uncommon2dw)(__UINTPTR_HALF_TYPE__ __uncom_regno) {
	__UINTPTR_HALF_TYPE__ __result;
#if CFI_X86_64_UNWIND_SIGFRAME_UNCOMMON_REGISTER_XMM0 != 0
	if (__uncom_regno >= CFI_X86_64_UNWIND_SIGFRAME_UNCOMMON_REGISTER_XMM0 &&
	    __uncom_regno <= CFI_X86_64_UNWIND_SIGFRAME_UNCOMMON_REGISTER_MM7)
#else /* CFI_X86_64_UNWIND_SIGFRAME_UNCOMMON_REGISTER_XMM0 != 0 */
	if (__uncom_regno <= CFI_X86_64_UNWIND_SIGFRAME_UNCOMMON_REGISTER_MM7)
#endif /* CFI_X86_64_UNWIND_SIGFRAME_UNCOMMON_REGISTER_XMM0 == 0 */
	{
		__result = CFI_X86_64_UNWIND_REGISTER_XMM0 + (__uncom_regno - CFI_X86_64_UNWIND_SIGFRAME_UNCOMMON_REGISTER_XMM0);
	}
#if CFI_X86_64_UNWIND_SIGFRAME_UNCOMMON_REGISTER_TR != CFI_X86_64_UNWIND_SIGFRAME_UNCOMMON_REGISTER_MM7 + 1
	else if (__uncom_regno >= CFI_X86_64_UNWIND_SIGFRAME_UNCOMMON_REGISTER_TR &&
	         __uncom_regno <= CFI_X86_64_UNWIND_SIGFRAME_UNCOMMON_REGISTER_XMM31)
#else /* CFI_X86_64_UNWIND_SIGFRAME_UNCOMMON_REGISTER_TR != CFI_X86_64_UNWIND_SIGFRAME_UNCOMMON_REGISTER_MM7 + 1 */
	else if (__uncom_regno <= CFI_X86_64_UNWIND_SIGFRAME_UNCOMMON_REGISTER_XMM31)
#endif /* CFI_X86_64_UNWIND_SIGFRAME_UNCOMMON_REGISTER_TR == CFI_X86_64_UNWIND_SIGFRAME_UNCOMMON_REGISTER_MM7 + 1 */
	{
		__result = CFI_X86_64_UNWIND_REGISTER_TR + (__uncom_regno - CFI_X86_64_UNWIND_SIGFRAME_UNCOMMON_REGISTER_TR);
	}
#if CFI_X86_64_UNWIND_SIGFRAME_UNCOMMON_REGISTER_K0 != CFI_X86_64_UNWIND_SIGFRAME_UNCOMMON_REGISTER_XMM31 + 1
	else if (__uncom_regno >= CFI_X86_64_UNWIND_SIGFRAME_UNCOMMON_REGISTER_K0 &&
	         __uncom_regno <= CFI_X86_64_UNWIND_SIGFRAME_UNCOMMON_REGISTER_K7)
#else /* CFI_X86_64_UNWIND_SIGFRAME_UNCOMMON_REGISTER_K0 != CFI_X86_64_UNWIND_SIGFRAME_UNCOMMON_REGISTER_XMM31 + 1 */
	else if (__uncom_regno <= CFI_X86_64_UNWIND_SIGFRAME_UNCOMMON_REGISTER_K7)
#endif /* CFI_X86_64_UNWIND_SIGFRAME_UNCOMMON_REGISTER_K0 == CFI_X86_64_UNWIND_SIGFRAME_UNCOMMON_REGISTER_XMM31 + 1 */
	{
		__result = CFI_X86_64_UNWIND_REGISTER_K0 + (__uncom_regno - CFI_X86_64_UNWIND_SIGFRAME_UNCOMMON_REGISTER_K0);
	} else {
		__result = CFI_X86_64_UNWIND_REGISTER_COUNT;
	}
	return __result;
}

#endif /* __CC__ */





/* Host-specific CFI constants. */
#ifdef __x86_64__

#define CFI_UNWIND_REGISTER_MAXSIZE   CFI_X86_64_UNWIND_FPU_REGISTER_SIZE
#define CFI_REGISTER_SIZE(regno)      CFI_X86_64_REGISTER_SIZE(regno)
#define CFI_UNWIND_REGISTER_PC        CFI_X86_64_UNWIND_REGISTER_PC        /* The register containing the program counter. */
#define CFI_UNWIND_REGISTER_SP        CFI_X86_64_UNWIND_REGISTER_SP        /* The register for the CFA. */
#define CFI_UNWIND_REGISTER_EXCEPTION CFI_X86_64_UNWIND_REGISTER_EXCEPTION /* The register used to hold the current exception upon entry to an exception handler. */
#define CFI_UNWIND_REGISTER_COUNT     CFI_X86_64_UNWIND_REGISTER_COUNT

/* Normal common/uncommon */
#define CFI_UNWIND_COMMON_REGISTER_COUNT   CFI_X86_64_UNWIND_COMMON_REGISTER_COUNT
#define CFI_UNWIND_UNCOMMON_REGISTER_SP    CFI_X86_64_UNWIND_UNCOMMON_REGISTER_SP
#define CFI_UNWIND_UNCOMMON_REGISTER_COUNT CFI_X86_64_UNWIND_UNCOMMON_REGISTER_COUNT
#define cfi_unwind_register_dw2common      cfi_x86_64_unwind_register_dw2common
#define cfi_unwind_register_dw2uncommon    cfi_x86_64_unwind_register_dw2uncommon
#define cfi_unwind_register_common2dw      cfi_x86_64_unwind_register_common2dw
#define cfi_unwind_register_uncommon2dw    cfi_x86_64_unwind_register_uncommon2dw

/* Sigframe common/uncommon */
#define CFI_UNWIND_SIGFRAME_COMMON_REGISTER_SP      CFI_X86_64_UNWIND_SIGFRAME_COMMON_REGISTER_SP
#define CFI_UNWIND_SIGFRAME_COMMON_REGISTER_COUNT   CFI_X86_64_UNWIND_SIGFRAME_COMMON_REGISTER_COUNT
#define CFI_UNWIND_SIGFRAME_UNCOMMON_REGISTER_COUNT CFI_X86_64_UNWIND_SIGFRAME_UNCOMMON_REGISTER_COUNT
#define cfi_unwind_sigframe_register_dw2common      cfi_x86_64_unwind_sigframe_register_dw2common
#define cfi_unwind_sigframe_register_dw2uncommon    cfi_x86_64_unwind_sigframe_register_dw2uncommon
#define cfi_unwind_sigframe_register_common2dw      cfi_x86_64_unwind_sigframe_register_common2dw
#define cfi_unwind_sigframe_register_uncommon2dw    cfi_x86_64_unwind_sigframe_register_uncommon2dw

#endif /* __x86_64__ */


#endif /* !_LIBUNWIND_CFI_X86_64_H */
