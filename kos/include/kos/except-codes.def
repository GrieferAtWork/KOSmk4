/* HASH CRC-32:0x51732b4e */
/* Copyright (c) 2019-2020 Griefer@Work                                       *
 *                                                                            *
 * This software is provided 'as-is', without any express or implied          *
 * warranty. In no event will the authors be held liable for any damages      *
 * arising from the use of this software.                                     *
 *                                                                            *
 * Permission is granted to anyone to use this software for any purpose,      *
 * including commercial applications, and to alter it and redistribute it     *
 * freely, subject to the following restrictions:                             *
 *                                                                            *
 * 1. The origin of this software must not be misrepresented; you must not    *
 *    claim that you wrote the original software. If you use this software    *
 *    in a product, an acknowledgement (see the following) in the product     *
 *    documentation is required:                                              *
 *    Portions Copyright (c) 2019-2020 Griefer@Work                           *
 * 2. Altered source versions must be plainly marked as such, and must not be *
 *    misrepresented as being the original software.                          *
 * 3. This notice may not be removed or altered from any source distribution. *
 */

#ifndef CLASS
#define __ERROR_CODES_DEF_DEFINES_CLASS 1
#define CLASS(name, message, errno, members) /* nothing */
#endif
#ifndef SUBCLASS
#define __ERROR_CODES_DEF_DEFINES_SUBCLASS 1
#define SUBCLASS(name, message, errno, members) /* nothing */
#endif
#ifndef END
#define __ERROR_CODES_DEF_DEFINES_END 1
#define END                /* nothing */
#endif
CLASS(E_OK,MESSAGE("No error"),ERRNO(EOK),())
END
CLASS(E_BADALLOC,MESSAGE("Failed to allocate sufficient resources"),ERRNO(ENOMEM),())
	SUBCLASS(E_BADALLOC_INSUFFICIENT_HEAP_MEMORY,MESSAGE("Insufficient virtual address space"),NO_ERRNO,(MEMBER(size_t,num_bytes)))
	SUBCLASS(E_BADALLOC_INSUFFICIENT_VIRTUAL_MEMORY,MESSAGE("Insufficient virtual address space"),NO_ERRNO,(MEMBER(size_t,num_pages)))
	SUBCLASS(E_BADALLOC_INSUFFICIENT_PHYSICAL_MEMORY,MESSAGE("Insufficient physical memory"),NO_ERRNO,(MEMBER(size_t,num_pages)))
	SUBCLASS(E_BADALLOC_INSUFFICIENT_SWAP_SPACE,MESSAGE("Insufficient space in swap"),NO_ERRNO,(MEMBER(size_t,num_pages)))
	SUBCLASS(E_BADALLOC_INSUFFICIENT_HANDLE_NUMBERS,MESSAGE("The caller is not allowed to allocate more handles without first closing some old ones"),ERRNO(EMFILE),(MEMBER(unsigned int,num_handles) MEMBER(unsigned int,cur_handles) MEMBER(unsigned int,max_handles)))
	SUBCLASS(E_BADALLOC_INSUFFICIENT_HANDLE_RANGE,MESSAGE("Attempted to allocated a handle index greater than the max allowed index"),ERRNO(ENFILE),(MEMBER(unsigned int,req_handle) MEMBER(unsigned int,cur_max) MEMBER(unsigned int,cur_limit)))
	SUBCLASS(E_BADALLOC_INSUFFICIENT_DEVICE_NUMBERS,MESSAGE("No suitable, free device numbers are available"),ERRNO(ENOMEM),(MEMBER(unsigned int,dev_kind)))
	SUBCLASS(E_BADALLOC_INSUFFICIENT_INTERRUPT_VECTORS,MESSAGE("The given interrupt vector is, or all usable vectors are already in use"),ERRNO(ENOMEM),(MEMBER(uintptr_t,vector)))
	SUBCLASS(E_BADALLOC_INSUFFICIENT_PORT_NUMBERS,MESSAGE("Failed to dynamically allocate a socket port number"),ERRNO(EADDRNOTAVAIL),(MEMBER(uintptr_t,address_family) MEMBER(uintptr_t,socket_type) MEMBER(uintptr_t,protocol)))
END
CLASS(E_INVALID_ARGUMENT,MESSAGE("Invalid argument"),ERRNO(EINVAL),())
	SUBCLASS(E_INVALID_ARGUMENT_UNKNOWN_FLAG,MESSAGE("An invalid set of flags was given"),NO_ERRNO,(MEMBER(unsigned int,context) MEMBER(uintptr_t,value) MEMBER(uintptr_t,mask) MEMBER(uintptr_t,result)))
	SUBCLASS(E_INVALID_ARGUMENT_RESERVED_FLAG,MESSAGE("A reserved bit was set incorrectly"),NO_ERRNO,(MEMBER(unsigned int,context) MEMBER(uintptr_t,value) MEMBER(uintptr_t,mask) MEMBER(uintptr_t,result)))
	SUBCLASS(E_INVALID_ARGUMENT_BAD_FLAG_COMBINATION,MESSAGE("An invalid combination of flags was set"),NO_ERRNO,(MEMBER(unsigned int,context) MEMBER(uintptr_t,value) MEMBER(uintptr_t,mask) MEMBER(uintptr_t,result)))
	SUBCLASS(E_INVALID_ARGUMENT_BAD_FLAG_MASK,MESSAGE("A masked type field contains an invalid value"),NO_ERRNO,(MEMBER(unsigned int,context) MEMBER(uintptr_t,value) MEMBER(uintptr_t,mask)))
	SUBCLASS(E_INVALID_ARGUMENT_BAD_ALIGNMENT,MESSAGE("A given value has an invalid alignment"),NO_ERRNO,(MEMBER(unsigned int,context) MEMBER(uintptr_t,value) MEMBER(uintptr_t,mask) MEMBER(uintptr_t,required_masked_value)))
	SUBCLASS(E_INVALID_ARGUMENT_BAD_VALUE,MESSAGE("A given value is invalid for the associated argument"),NO_ERRNO,(MEMBER(unsigned int,context) MEMBER(uintptr_t,value)))
	SUBCLASS(E_INVALID_ARGUMENT_RESERVED_ARGUMENT,MESSAGE("A reserved argument had an unexpected value"),NO_ERRNO,(MEMBER(unsigned int,context)))
	SUBCLASS(E_INVALID_ARGUMENT_UNKNOWN_COMMAND,MESSAGE("An unknown command was given"),ERRNO(GET_EXCEPTION_POINTER(0) == E_INVALID_ARGUMENT_CONTEXT_SOCKET_BAD_FAMILY ? EAFNOSUPPORT :
       GET_EXCEPTION_POINTER(0) == E_INVALID_ARGUMENT_CONTEXT_SOCKET_BAD_TYPE ? ESOCKTNOSUPPORT :
       GET_EXCEPTION_POINTER(0) == E_INVALID_ARGUMENT_CONTEXT_SOCKET_BAD_PROTOCOL ? EPROTONOSUPPORT :
       EINVAL),(MEMBER(unsigned int,context) MEMBER(uintptr_t,command)))
	SUBCLASS(E_INVALID_ARGUMENT_BAD_STATE,MESSAGE("The current object state does not allow this operation"),ERRNO(GET_EXCEPTION_POINTER(0) == E_INVALID_ARGUMENT_CONTEXT_SHUTDOWN_NOT_CONNECTED ||
       GET_EXCEPTION_POINTER(0) == E_INVALID_ARGUMENT_CONTEXT_GETPEERNAME_NOT_CONNECTED ||
       GET_EXCEPTION_POINTER(0) == E_INVALID_ARGUMENT_CONTEXT_RECV_NOT_CONNECTED ? ENOTCONN :
       GET_EXCEPTION_POINTER(0) == E_INVALID_ARGUMENT_CONTEXT_SEND_NOT_CONNECTED ? EDESTADDRREQ :
       GET_EXCEPTION_POINTER(0) == E_INVALID_ARGUMENT_CONTEXT_CONNECT_ALREADY_CONNECTED ? EISCONN :
       EINVAL),(MEMBER(unsigned int,context)))
	SUBCLASS(E_INVALID_ARGUMENT_SOCKET_OPT,MESSAGE("Unrecognized combination of level/optname"),ERRNO(ENOPROTOOPT),(MEMBER(unsigned int,context) MEMBER(uintptr_t,level) MEMBER(uintptr_t,optname) MEMBER(uintptr_t,address_family) MEMBER(uintptr_t,socket_type) MEMBER(uintptr_t,protocol)))
	SUBCLASS(E_INVALID_ARGUMENT_UNEXPECTED_COMMAND,MESSAGE("One command was given when a different one was expected"),ERRNO(GET_EXCEPTION_POINTER(0) == E_INVALID_ARGUMENT_CONTEXT_CONNECT_WRONG_ADDRESS_FAMILY ? EAFNOSUPPORT : EINVAL),(MEMBER(unsigned int,context) MEMBER(uintptr_t,command) MEMBER(uintptr_t,expected_command)))
END
CLASS(E_NOT_IMPLEMENTED,MESSAGE("Unimplemented function"),ERRNO(EPERM),())
	SUBCLASS(E_NOT_IMPLEMENTED_UNSUPPORTED,NO_MESSAGE,NO_ERRNO,())
	SUBCLASS(E_NOT_IMPLEMENTED_TODO,NO_MESSAGE,NO_ERRNO,())
END
CLASS(E_INVALID_HANDLE,MESSAGE("Bad file descriptor"),ERRNO(EBADF),())
	SUBCLASS(E_INVALID_HANDLE_FILE,MESSAGE("The given file descriptor is invalid"),NO_ERRNO,(MEMBER(unsigned int,fd) MEMBER(unsigned int,reason) MEMBER(unsigned int,fd_max) MEMBER(unsigned int,fd_limit)))
	SUBCLASS(E_INVALID_HANDLE_FILETYPE,MESSAGE("Invalid file handle type"),ERRNO(GET_EXCEPTION_POINTER(1) == HANDLE_TYPE_SOCKET ? ENOTSOCK : EBADFD),(MEMBER(unsigned int,fd) MEMBER(unsigned int,needed_handle_type) MEMBER(unsigned int,actual_handle_type) MEMBER(unsigned int,needed_handle_kind) MEMBER(unsigned int,actual_handle_kind)))
	SUBCLASS(E_INVALID_HANDLE_OPERATION,MESSAGE("Invalid handle operation"),ERRNO(EINVAL),(MEMBER(unsigned int,fd) MEMBER(unsigned int,op) MEMBER(iomode_t,handle_mode)))
	SUBCLASS(E_INVALID_HANDLE_NET_OPERATION,MESSAGE("Network operation not supported by address familiy, socket type, and protocol"),ERRNO(EOPNOTSUPP),(MEMBER(unsigned int,fd) MEMBER(uintptr_t,operation_id) MEMBER(uintptr_t,address_family) MEMBER(uintptr_t,socket_type) MEMBER(uintptr_t,protocol)))
END
CLASS(E_WOULDBLOCK,MESSAGE("A blocking call was attempted when non-blocking behavior was requested"),ERRNO(EAGAIN),())
	SUBCLASS(E_WOULDBLOCK_PREEMPTED,NO_MESSAGE,NO_ERRNO,())
	SUBCLASS(E_WOULDBLOCK_WAITFORSIGNAL,NO_MESSAGE,NO_ERRNO,())
END
CLASS(E_PROCESS_EXITED,MESSAGE("A process has exited"),ERRNO(ESRCH),(MEMBER(pid_t,pid)))
END
CLASS(E_NO_DEVICE,MESSAGE("The named device doesn\'t exist"),ERRNO(ENODEV),(MEMBER(uintptr_t,kind) MEMBER(dev_t,devno)))
END
CLASS(E_UNKNOWN_SYSTEMCALL,MESSAGE("Attempted to execute an unknown system call"),ERRNO(ENOSYS),(MEMBER(uintptr_t,flags) MEMBER(uintptr_t,sysno) MEMBER(uintptr_t,arg0) MEMBER(uintptr_t,arg1) MEMBER(uintptr_t,arg2) MEMBER(uintptr_t,arg3) MEMBER(uintptr_t,arg4) MEMBER(uintptr_t,arg5)))
END
CLASS(E_NO_SUCH_OBJECT,MESSAGE("The specified object doesn\'t exist"),NO_ERRNO,())
	SUBCLASS(E_NO_SUCH_BLOCKDEVICE,MESSAGE("No block device has been bound"),NO_ERRNO,())
	SUBCLASS(E_NO_SUCH_PROCESS,MESSAGE("No process has been bound"),NO_ERRNO,())
	SUBCLASS(E_NO_SUCH_PIDNS,MESSAGE("No pid namespace has been bound"),NO_ERRNO,())
	SUBCLASS(E_NO_CTTY,MESSAGE("No controlling terminal has been assigned to the calling session"),NO_ERRNO,())
END
CLASS(E_ILLEGAL_OPERATION,MESSAGE("Illegal operation"),NO_ERRNO,())
	SUBCLASS(E_ILLEGAL_PROCESS_OPERATION,MESSAGE("Illegal process operation"),NO_ERRNO,(MEMBER(pid_t,pid) MEMBER(pid_t,action) MEMBER(pid_t,pid2)))
END
CLASS(E_FSERROR,MESSAGE("Filesystem error"),NO_ERRNO,())
	SUBCLASS(E_FSERROR_DELETED,MESSAGE("Attempted to access a file that has been deleted"),ERRNO(ENOENT),(MEMBER(unsigned int,reason)))
	SUBCLASS(E_FSERROR_FILE_NOT_FOUND,MESSAGE("File not found"),ERRNO(ENOENT),())
	SUBCLASS(E_FSERROR_PATH_NOT_FOUND,MESSAGE("Path not found"),ERRNO(ENOENT),(MEMBER(unsigned int,reason)))
	SUBCLASS(E_FSERROR_ILLEGAL_PATH,MESSAGE("Illegal or malformed path"),ERRNO(ENAMETOOLONG),())
	SUBCLASS(E_FSERROR_NOT_A_DIRECTORY,MESSAGE("Expected a directory"),ERRNO(ENOTDIR),(MEMBER(uintptr_t,action_context)))
	SUBCLASS(E_FSERROR_TOO_MANY_SYMBOLIC_LINKS,MESSAGE("Too many symbolic links"),ERRNO(ELOOP),())
	SUBCLASS(E_FSERROR_ACCESS_DENIED,MESSAGE("File access was denied"),ERRNO(EACCES),())
	SUBCLASS(E_FSERROR_DISK_FULL,MESSAGE("Attempted to write when the disk was already full"),ERRNO(ENOSPC),())
	SUBCLASS(E_FSERROR_READONLY,MESSAGE("Read-only filesystem"),ERRNO(EROFS),())
	SUBCLASS(E_FSERROR_TOO_MANY_HARD_LINKS,MESSAGE("Too many hard links already exist for a given file"),ERRNO(EMLINK),())
	SUBCLASS(E_FSERROR_IS_A_DIRECTORY,MESSAGE("Did not expect a directory"),ERRNO(EISDIR),(MEMBER(uintptr_t,action_context)))
	SUBCLASS(E_FSERROR_NOT_A_SYMBOLIC_LINK,MESSAGE("Expected a symbolic link"),ERRNO(ENOENT),(MEMBER(uintptr_t,action_context)))
	SUBCLASS(E_FSERROR_IS_A_SYMBOLIC_LINK,MESSAGE("Did not expect a symbolic link"),ERRNO(ELOOP),(MEMBER(uintptr_t,action_context)))
	SUBCLASS(E_FSERROR_FILE_ALREADY_EXISTS,MESSAGE("File already exists"),ERRNO(EEXIST),())
	SUBCLASS(E_FSERROR_DIRECTORY_NOT_EMPTY,MESSAGE("Directory is not empty"),ERRNO(ENOTEMPTY),())
	SUBCLASS(E_FSERROR_CROSS_DEVICE_LINK,MESSAGE("Cross-device link"),ERRNO(EXDEV),())
	SUBCLASS(E_FSERROR_DIRECTORY_MOVE_TO_CHILD,MESSAGE("Move to child directory"),ERRNO(EINVAL),())
	SUBCLASS(E_FSERROR_NOT_A_BLOCK_DEVICE,MESSAGE("mount() expected a block-device"),ERRNO(ENOTBLK),())
	SUBCLASS(E_FSERROR_NO_BLOCK_DEVICE,MESSAGE("This filesystem type requires a block-device"),ERRNO(ENOTBLK),())
	SUBCLASS(E_FSERROR_WRONG_FILE_SYSTEM,MESSAGE("Invalid file-system type for mount()"),ERRNO(ENODEV),())
	SUBCLASS(E_FSERROR_UNKNOWN_FILE_SYSTEM,MESSAGE("Unknown filesystem type"),ERRNO(ENODEV),())
	SUBCLASS(E_FSERROR_CORRUPTED_FILE_SYSTEM,MESSAGE("Corrupted filesystem data"),ERRNO(ENODEV),())
	SUBCLASS(E_FSERROR_DEVICE_ALREADY_MOUNTED,MESSAGE("Filesystem has already been mounted"),ERRNO(EBUSY),())
	SUBCLASS(E_FSERROR_PATH_ALREADY_MOUNTED,MESSAGE("Path has already been mounted"),ERRNO(EBUSY),())
	SUBCLASS(E_FSERROR_NOT_A_MOUNTING_POINT,MESSAGE("Path hasn\'t been mounted"),ERRNO(EINVAL),())
	SUBCLASS(E_FSERROR_IS_A_MOUNTING_POINT,MESSAGE("Path is a mounting point"),ERRNO(ENOTDIR),())
	SUBCLASS(E_FSERROR_UNSUPPORTED_OPERATION,MESSAGE("Unsupported filesystem operation"),ERRNO(GET_EXCEPTION_POINTER(0) == E_FILESYSTEM_OPERATION_SEEK ? ESPIPE :
      (GET_EXCEPTION_POINTER(0) == E_FILESYSTEM_OPERATION_READ || GET_EXCEPTION_POINTER(0) == E_FILESYSTEM_OPERATION_WRITE ||
       GET_EXCEPTION_POINTER(0) == E_FILESYSTEM_OPERATION_TRUNC || GET_EXCEPTION_POINTER(0) == E_FILESYSTEM_OPERATION_READDIR) ? EINVAL : EPERM),(MEMBER(uintptr_t,operation_id)))
END
CLASS(E_NET_ERROR,MESSAGE("Network error"),NO_ERRNO,())
	SUBCLASS(E_NET_HOST_UNREACHABLE,MESSAGE("The given host cannot be reached"),ERRNO(EHOSTUNREACH),())
	SUBCLASS(E_NET_ADDRESS_IN_USE,MESSAGE("The specified address is already in use"),ERRNO(EADDRINUSE),(MEMBER(unsigned int,context)))
	SUBCLASS(E_NET_MESSAGE_TOO_LONG,MESSAGE("The given message is too long"),ERRNO(EMSGSIZE),(MEMBER(size_t,req_length) MEMBER(size_t,max_length)))
	SUBCLASS(E_NET_CONNECTION_ABORT,MESSAGE("accept() failed to fully establish a connection"),ERRNO(ECONNABORTED),())
	SUBCLASS(E_NET_CONNECTION_REFUSED,MESSAGE("connect() or recv() found no one to be listening on the remote address"),ERRNO(ECONNREFUSED),())
	SUBCLASS(E_NET_CONNECTION_RESET,MESSAGE("The connection was reset by the remote during send()"),ERRNO(ECONNRESET),())
	SUBCLASS(E_NET_TIMEOUT,MESSAGE("Establishing a connection has failed due to a timeout"),ERRNO(ETIMEDOUT),())
	SUBCLASS(E_NET_UNREACHABLE,MESSAGE("The requested network cannot be reached"),ERRNO(ENETUNREACH),())
	SUBCLASS(E_NET_ADDRESS_NOT_AVAILABLE,MESSAGE("Attempted to bind() to a non-local address"),ERRNO(EADDRNOTAVAIL),())
	SUBCLASS(E_NET_SHUTDOWN,MESSAGE("Attempted to write() after the local end had been shutdown()"),ERRNO(EPIPE),())
END
CLASS(E_IOERROR,MESSAGE("Hardware error, or miss-behaving/miss-configured device"),ERRNO(EIO),())
	SUBCLASS(E_IOERROR_ERRORBIT,MESSAGE("A hardware error bit has been set"),NO_ERRNO,(MEMBER(uintptr_t,subsystem) MEMBER(uintptr_t,reason)))
	SUBCLASS(E_IOERROR_TIMEOUT,MESSAGE("Hardware component timed out"),NO_ERRNO,(MEMBER(uintptr_t,subsystem) MEMBER(uintptr_t,reason)))
	SUBCLASS(E_IOERROR_READONLY,MESSAGE("Attempted to write to read-only disk component"),NO_ERRNO,(MEMBER(uintptr_t,subsystem) MEMBER(uintptr_t,reason)))
	SUBCLASS(E_IOERROR_BADBOUNDS,MESSAGE("Attempted to write beyond the end of a disk"),NO_ERRNO,(MEMBER(uintptr_t,subsystem) MEMBER(uintptr_t,reason)))
	SUBCLASS(E_IOERROR_NODATA,MESSAGE("No data could be read/written"),NO_ERRNO,(MEMBER(uintptr_t,subsystem) MEMBER(uintptr_t,reason)))
END
CLASS(E_NOT_EXECUTABLE,MESSAGE("The named file was not recognized as a valid executable"),ERRNO(ENOEXEC),())
	SUBCLASS(E_NOT_EXECUTABLE_NOEXEC,MESSAGE("File does not have execute permissions"),NO_ERRNO,())
	SUBCLASS(E_NOT_EXECUTABLE_NOT_REGULAR,MESSAGE("Can only execute regular files"),NO_ERRNO,())
	SUBCLASS(E_NOT_EXECUTABLE_NOT_A_BINARY,MESSAGE("Can only execute binary files, or unknown/unsupported binary format"),NO_ERRNO,())
	SUBCLASS(E_NOT_EXECUTABLE_FAULTY,MESSAGE("The executable\'s binary state is faulty"),NO_ERRNO,(MEMBER(uintptr_t,format) MEMBER(uintptr_t,reason)))
	SUBCLASS(E_NOT_EXECUTABLE_TOOLARGE,MESSAGE("Executable file is too large"),NO_ERRNO,())
	SUBCLASS(E_NOT_EXECUTABLE_TOOSMALL,MESSAGE("Executable file is too small"),NO_ERRNO,())
END
CLASS(E_INSUFFICIENT_RIGHTS,MESSAGE("Insufficient Rights"),NO_ERRNO,())
	SUBCLASS(E_INSUFFICIENT_RIGHTS_CTTY_STEALING,MESSAGE("Only root can steal already-assigned controlling terminals"),NO_ERRNO,())
END
CLASS(E_INVALID_CONTEXT,MESSAGE("Insufficient Context"),ERRNO(EPERM),())
	SUBCLASS(E_INVALID_CONTEXT_NOT_SESSION_LEADER,MESSAGE("The calling process isn\'t the session leader"),NO_ERRNO,())
	SUBCLASS(E_INVALID_CONTEXT_CTTY_ALREADY_ASSIGNED,MESSAGE("A controlling terminal had already been assigned"),NO_ERRNO,())
	SUBCLASS(E_INVALID_CONTEXT_CTTY_DIFFERS,MESSAGE("The calling session uses a different CTTY"),NO_ERRNO,())
END
CLASS(E_BUFFER_TOO_SMALL,MESSAGE("The provided buffer is too small"),ERRNO(ERANGE),(MEMBER(size_t,req_size) MEMBER(size_t,given_size)))
END
CLASS(E_UNICODE_ERROR,MESSAGE("Unicode error"),ERRNO(EILSEQ),())
END
CLASS(E_INTERRUPT,MESSAGE("Interrupt"),ERRNO(EINTR),())
	SUBCLASS(E_INTERRUPT_USER_RPC,NO_MESSAGE,NO_ERRNO,())
END
CLASS(__E_RETRY_RWLOCK,NO_MESSAGE,NO_ERRNO,(MEMBER(struct rwlock *,lock)))
END
CLASS(E_EXIT_THREAD,NO_MESSAGE,NO_ERRNO,(MEMBER(uintptr_t,exit_code)))
END
CLASS(E_EXIT_PROCESS,NO_MESSAGE,NO_ERRNO,(MEMBER(uintptr_t,exit_code)))
END
CLASS(E_UNHANDLED_INTERRUPT,MESSAGE("Unhandled system interrupt"),ERRNO(EFAULT),(MEMBER(uintptr_t,opcode) MEMBER(uintptr_t,intno) MEMBER(uintptr_t,ecode)))
END



#if defined(__i386__) || defined(__x86_64__)
CLASS(E_SEGFAULT,MESSAGE("Segmentation fault"),ERRNO(EFAULT),())
	SUBCLASS(E_SEGFAULT_UNMAPPED,MESSAGE("Attempted to access a faulty memory location"),NO_ERRNO,(MEMBER(void *,addr) MEMBER(uintptr_t,context)))
	SUBCLASS(E_SEGFAULT_READONLY,MESSAGE("Attempted to write to a read-only memory location"),NO_ERRNO,(MEMBER(void *,addr) MEMBER(uintptr_t,context)))
	SUBCLASS(E_SEGFAULT_NOTREADABLE,MESSAGE("Attempted to read from a memory location that is not readable"),NO_ERRNO,(MEMBER(void *,addr) MEMBER(uintptr_t,context)))
	SUBCLASS(E_SEGFAULT_NOTEXECUTABLE,MESSAGE("Attempted to execute a non-executable memory location"),NO_ERRNO,(MEMBER(void *,addr) MEMBER(uintptr_t,context)))
	SUBCLASS(E_SEGFAULT_NOTATOMIC,MESSAGE("Attempted to perform an impossible atomic operation"),NO_ERRNO,(MEMBER(void *,addr) MEMBER(uintptr_t,context) MEMBER(size_t,size) MEMBER(uintptr_t,oldval_lo) MEMBER(uintptr_t,oldval_hi) MEMBER(uintptr_t,newval_lo) MEMBER(uintptr_t,newval_hi)))
	SUBCLASS(E_SEGFAULT_UNALIGNED,MESSAGE("Attempted to access an unaligned pointer"),NO_ERRNO,(MEMBER(void *,addr) MEMBER(uintptr_t,context) MEMBER(size_t,required_alignemnt)))
END
CLASS(E_BREAKPOINT,MESSAGE("Breakpoint"),ERRNO(EINVAL),())
END
CLASS(E_DIVIDE_BY_ZERO,MESSAGE("Divide by zero"),ERRNO(EINVAL),())
END
CLASS(E_OVERFLOW,MESSAGE("Overflow"),ERRNO(EOVERFLOW),())
END
CLASS(E_ILLEGAL_INSTRUCTION,MESSAGE("Illegal instruction"),ERRNO(EPERM),())
	SUBCLASS(E_ILLEGAL_INSTRUCTION_BAD_OPCODE,MESSAGE("Unknown instruction"),NO_ERRNO,(MEMBER(uintptr_t,opcode) MEMBER(uintptr_t,op_flags)))
	SUBCLASS(E_ILLEGAL_INSTRUCTION_X86_BAD_PREFIX,MESSAGE("Unsupported instruction prefix"),NO_ERRNO,(MEMBER(uintptr_t,opcode) MEMBER(uintptr_t,op_flags)))
	SUBCLASS(E_ILLEGAL_INSTRUCTION_UNSUPPORTED_OPCODE,MESSAGE("Unsupported instruction"),NO_ERRNO,(MEMBER(uintptr_t,opcode) MEMBER(uintptr_t,op_flags)))
	SUBCLASS(E_ILLEGAL_INSTRUCTION_X86_TOO_LONG,MESSAGE("Instruction too long"),NO_ERRNO,(MEMBER(uintptr_t,opcode) MEMBER(uintptr_t,op_flags)))
	SUBCLASS(E_ILLEGAL_INSTRUCTION_PRIVILEGED_OPCODE,MESSAGE("Privileged instruction"),NO_ERRNO,(MEMBER(uintptr_t,opcode) MEMBER(uintptr_t,op_flags)))
	SUBCLASS(E_ILLEGAL_INSTRUCTION_X86_INTERRUPT,NO_MESSAGE,NO_ERRNO,(MEMBER(uintptr_t,opcode) MEMBER(uintptr_t,op_flags) MEMBER(uintptr_t,intno) MEMBER(uintptr_t,ecode) MEMBER(uintptr_t,segval)))
	SUBCLASS(E_ILLEGAL_INSTRUCTION_BAD_OPERAND,MESSAGE("Invalid instruction operand"),NO_ERRNO,(MEMBER(uintptr_t,opcode) MEMBER(uintptr_t,op_flags) MEMBER(uintptr_t,what)))
	SUBCLASS(E_ILLEGAL_INSTRUCTION_REGISTER,MESSAGE("Invalid register access"),NO_ERRNO,(MEMBER(uintptr_t,opcode) MEMBER(uintptr_t,op_flags) MEMBER(uintptr_t,how) MEMBER(uintptr_t,regno) MEMBER(uintptr_t,regval) MEMBER(uintptr_t,offset)))
END
CLASS(E_STACK_OVERFLOW,MESSAGE("Stack overflow"),ERRNO(EFAULT),())
END
CLASS(E_INDEX_ERROR,NO_MESSAGE,ERRNO(ERANGE),())
	SUBCLASS(E_INDEX_ERROR_OUT_OF_BOUNDS,NO_MESSAGE,NO_ERRNO,(MEMBER(intptr_t,index) MEMBER(intptr_t,min) MEMBER(intptr_t,max)))
END
#else /* ARCH... */
CLASS(E_SEGFAULT,MESSAGE("Segmentation fault"),ERRNO(EFAULT),())
	SUBCLASS(E_SEGFAULT_UNMAPPED,MESSAGE("Attempted to access a faulty memory location"),NO_ERRNO,(MEMBER(void *,addr) MEMBER(uintptr_t,context)))
	SUBCLASS(E_SEGFAULT_READONLY,MESSAGE("Attempted to write to a read-only memory location"),NO_ERRNO,(MEMBER(void *,addr) MEMBER(uintptr_t,context)))
	SUBCLASS(E_SEGFAULT_NOTREADABLE,MESSAGE("Attempted to read from a memory location that is not readable"),NO_ERRNO,(MEMBER(void *,addr) MEMBER(uintptr_t,context)))
	SUBCLASS(E_SEGFAULT_NOTEXECUTABLE,MESSAGE("Attempted to execute a non-executable memory location"),NO_ERRNO,(MEMBER(void *,addr) MEMBER(uintptr_t,context)))
END
CLASS(E_BREAKPOINT,MESSAGE("Breakpoint"),ERRNO(EINVAL),())
END
CLASS(E_DIVIDE_BY_ZERO,MESSAGE("Divide by zero"),ERRNO(EINVAL),())
END
CLASS(E_OVERFLOW,MESSAGE("Overflow"),ERRNO(EOVERFLOW),())
END
CLASS(E_ILLEGAL_INSTRUCTION,MESSAGE("Illegal instruction"),ERRNO(EPERM),())
	SUBCLASS(E_ILLEGAL_INSTRUCTION_BAD_OPCODE,MESSAGE("Unknown instruction"),NO_ERRNO,(MEMBER(uintptr_t,opcode)))
	SUBCLASS(E_ILLEGAL_INSTRUCTION_UNSUPPORTED_OPCODE,MESSAGE("Unsupported instruction"),NO_ERRNO,(MEMBER(uintptr_t,opcode)))
	SUBCLASS(E_ILLEGAL_INSTRUCTION_PRIVILEGED_OPCODE,MESSAGE("Privileged instruction"),NO_ERRNO,(MEMBER(uintptr_t,opcode)))
	SUBCLASS(E_ILLEGAL_INSTRUCTION_BAD_OPERAND,MESSAGE("Invalid instruction operand"),NO_ERRNO,(MEMBER(uintptr_t,opcode) MEMBER(uintptr_t,what)))
	SUBCLASS(E_ILLEGAL_INSTRUCTION_REGISTER,MESSAGE("Invalid register"),NO_ERRNO,(MEMBER(uintptr_t,opcode) MEMBER(uintptr_t,how) MEMBER(uintptr_t,regno) MEMBER(uintptr_t,regval)))
END
CLASS(E_STACK_OVERFLOW,MESSAGE("Stack overflow"),ERRNO(EFAULT),())
END
CLASS(E_INDEX_ERROR,NO_MESSAGE,ERRNO(ERANGE),())
	SUBCLASS(E_INDEX_ERROR_OUT_OF_BOUNDS,NO_MESSAGE,NO_ERRNO,(MEMBER(intptr_t,index) MEMBER(intptr_t,min) MEMBER(intptr_t,max)))
END
#endif /* !ARCH... */



#ifdef __ERROR_CODES_DEF_DEFINES_CLASS
#undef __ERROR_CODES_DEF_DEFINES_CLASS
#undef CLASS
#endif
#ifdef __ERROR_CODES_DEF_DEFINES_SUBCLASS
#undef __ERROR_CODES_DEF_DEFINES_SUBCLASS
#undef SUBCLASS
#endif
#ifdef __ERROR_CODES_DEF_DEFINES_END
#undef __ERROR_CODES_DEF_DEFINES_END
#undef END
#endif
