final global COPYRIGHT=
"/* Copyright (c) 2019-2020 Griefer@Work                                       *
 *                                                                            *
 * This software is provided 'as-is', without any express or implied          *
 * warranty. In no event will the authors be held liable for any damages      *
 * arising from the use of this software.                                     *
 *                                                                            *
 * Permission is granted to anyone to use this software for any purpose,      *
 * including commercial applications, and to alter it and redistribute it     *
 * freely, subject to the following restrictions:                             *
 *                                                                            *
 * 1. The origin of this software must not be misrepresented; you must not    *
 *    claim that you wrote the original software. If you use this software    *
 *    in a product, an acknowledgement in the product documentation would be  *
 *    appreciated but is not required.                                        *
 * 2. Altered source versions must be plainly marked as such, and must not be *
 *    misrepresented as being the original software.                          *
 * 3. This notice may not be removed or altered from any source distribution. *
 */";

#ifdef __WINDOWS__
#define HOST_EXE(x)  x ".exe"
#else
#define HOST_EXE(x)  x
#endif

import fs;
import ipc;
import util;
import * from deemon;
import * from .kos.misc.libmagic.libmagic;
import * from .kos.misc.libmagic.steps.c;
import * from .kos.misc.libmagic.steps.mtools;
import * from .kos.misc.libmagic.steps.util;
import * from .kos.misc.libmagic.steps.elf;
import * from .kos.misc.libmagic.steps.elf_dihack;
import * from .kos.misc.libmagic.steps.custom;
import * from .kos.misc.libmagic.steps.keymap;
import * from .kos.misc.libmagic.toolchain.gcc;
import .kos.misc.magicemulator.options as emulator_options;
import AppExit from errors;

File.stdout.setbuf("line");
File.stderr.setbuf("line");

global CONFIG_MAX_COMPILERS: int = 12; /* TODO: Don't hardcode 12! - Calculate dynamically as the number of cores on our host machine */
global CONFIG_EMULATOR_USED: string = "qemu"; /* none or "qemu" / "bochs" */
global CONFIG_EMULATOR_OPTIONS: {string: Object} = Dict();
global CONFIG_DONT_BUILD: bool = false;
global CONFIG_ONLY_BUILD_LIBRARIES: bool = false;
global CONFIG_EMULATOR_STARTED_PATTERN: string = none;
global CONFIG_EMULATOR_GDB_MODE: string = none;
global CONFIG_MULTIBOOT_DRIVERS: {(string, string)...} = List();
global requiredOutputWhiteList: {(bool, string)...} | none = none;
global requiredGroupWhiteList: {string...} | none = none;
global requiredGroupOfSourceFileWhiteList: {string...} | none = none;
global config: Config = Config(LIBRARY_SUFFIX: ".so");
global toolchain: Toolchain = GCCToolchain(config: config);
global toolchainsAndGroups: {(Toolchain, {Group...})...};
global groups: {Group...} = [];
global options: {string: Object} = Dict();

/* Build configuration */
global CONFIG_OPTIMIZE: bool;
global CONFIG_DEBUG: bool;

/* Target configuration */
global TARGET_REAL_ARCH: string; /* Real target architecture (e.g. "i386") */
global TARGET_ARCH: string;      /* Target architecture (e.g. "i386") */
global TARGET_NAME: string;      /* Target configuration name (e.g. "i386-kos-OD") */
global TARGET: Module = none;    /* Target configuration module */
global TARGET_BINPATH: string;   /* Target binpath (e.g. "/bin/i386-kos-OD") */
global KERNEL_BINARY: string;


function parseConfig(config: string): (bool, bool) {
	return {
		"OD" : (true, true),
		"OnD" : (true, false),
		"nOD" : (false, true),
		"nOnD" : (false, false),
	}[config];
}

function setConfig(config: string) {
	CONFIG_OPTIMIZE, CONFIG_DEBUG = parseConfig(config)...;
}

function loadMissingSettings() {
	local target, config =
		import(".kos.misc.scripts.vsautoconfig")
			.parseCurrentVsConfiguration("kos/.vs/ProjectSettings.json")...;
	print "Automatically loaded settings:", repr target, repr config;
	if (TARGET_ARCH !is bound)
		TARGET_ARCH = target;
	local config_optimize, config_debug = parseConfig(config)...;
	if (CONFIG_OPTIMIZE !is bound)
		CONFIG_OPTIMIZE = config_optimize;
	if (CONFIG_DEBUG !is bound)
		CONFIG_DEBUG = config_debug;
}


function getConfig(): string {
	return "{}{}".format({
		CONFIG_OPTIMIZE ? "O" : "nO",
		CONFIG_DEBUG ? "D" : "nD",
	});
}

function generateFile(filename: string, isRegEx: bool) {
	if (requiredOutputWhiteList is none)
		requiredOutputWhiteList = HashSet();
	if (!isRegEx) {
		if (filename.startswith("/"))
			filename = fs.abspath(filename.lstrip("/"), ROOTDIR);
		else {
			filename = fs.abspath(filename);
		}
		filename = normalizePath(filename, false);
	}
	requiredOutputWhiteList.insert((isRegEx, filename));
	CONFIG_EMULATOR_USED = none;
}

function generateGroup(name: string) {
	if (requiredGroupWhiteList is none)
		requiredGroupWhiteList = HashSet();
	requiredGroupWhiteList.insert(name);
	CONFIG_EMULATOR_USED = none;
}

function generateProjectOfInputFile(filename: string) {
	if (requiredGroupOfSourceFileWhiteList is none)
		requiredGroupOfSourceFileWhiteList = HashSet();
	filename = filename.startswith("/")
		? fs.abspath(filename.lstrip("/"), ROOTDIR)
		: fs.abspath(filename);
	filename = normalizePath(filename, false);
	requiredGroupOfSourceFileWhiteList.insert(filename);
	CONFIG_EMULATOR_USED = none;
}

function buildToolchainsAndGroups() {
	if (requiredOutputWhiteList !is none) {
		return buildGroupsWithOutputWhitelist(
			toolchainsAndGroups: toolchainsAndGroups,
			outputWhiteList:     requiredOutputWhiteList,
			maxParallelSteps:    CONFIG_MAX_COMPILERS);
	} else if (requiredGroupWhiteList !is none) {
		return buildGroupsWithGroupWhitelist(
			toolchainsAndGroups: toolchainsAndGroups,
			groupWhiteList:      requiredGroupWhiteList,
			maxParallelSteps:    CONFIG_MAX_COMPILERS);
	} else if (requiredGroupOfSourceFileWhiteList !is none) {
		return buildGroupsWithGroupOfInputFileWhitelist(
			toolchainsAndGroups: toolchainsAndGroups,
			inputFileWhitelist:  requiredGroupOfSourceFileWhiteList,
			maxParallelSteps:    CONFIG_MAX_COMPILERS);
	} else {
		return buildGroups(
			toolchainsAndGroups: toolchainsAndGroups,
			maxParallelSteps:    CONFIG_MAX_COMPILERS);
	}
}

function build(reconfigure: Callable = none) {
	TARGET_NAME = "{}-kos-{}".format({ TARGET_ARCH, getConfig() });
	{
		/* Make sure that the correct bin-config is selected. */
		local selConfig;
		local selConfigFile = "bin/{}-kos".format({ TARGET_ARCH });
		selConfig = cygwinReadLink(selConfigFile);
		if (selConfig !is string || selConfig != TARGET_NAME) {
			if (selConfig !is none)
				fs.unlink(selConfigFile);
			print "Changing libpath to", repr(TARGET_NAME);
			local p = ipc.Process("bash", [ "-c",
				"ln -s {!r} {!r}".format({ TARGET_NAME, selConfigFile })
			]);
			p.start();
			joinProcess(p);
		}
	}

	/* To speed up compilation, provide some known-good values
	 * for standard library paths valid for the KOS toolchain */
	TARGET.provideToolchainCache(toolchain, TARGET_NAME);

	/* Apply target configurations. */
	config.CROSS_PREFIX = TARGET.CROSS_PREFIX;
	config.BUILD_PATH = "build/" + TARGET_NAME;
	TARGET_BINPATH = "/bin/" + TARGET_NAME;
	KERNEL_BINARY = TARGET_BINPATH + "/os/kernel.bin";

	/* Configure MTOOLS build steps */
	toolchain.options[TOOLCHAIN_MTOOLS_EXE]  = HOST_EXE("binutils/build-mtools/mtools");
	toolchain.options[TOOLCHAIN_MTOOLS_DISK] = TARGET_BINPATH[1:] + "/disk.img";

	import . as me;
	reconfigure(me);

	{
		final local XARCH  = TARGET.XARCH;
		final local SUFFIX = TARGET.SUFFIX;
		final local ASMFILES = TARGET.ASMFILES;
		final local XARCH_ASMFILES = "{}/{}".format({ XARCH, ASMFILES });
		final local DISK_LIBPATH = TARGET.DISK_LIBPATH;
		final local DISK_USRLIBPATH = TARGET.DISK_USRLIBPATH;
#define BEGIN           { local options = deepcopy __nth(2) options;
#define BEGIN_ANONYMOUS { local options = Dict();
#define END             }
#include "kos/.sources"
	}

	toolchainsAndGroups = { (toolchain, groups) };

	/* NOTE: Must always load groups for stuff like like magic-driven %{vinfo} */
	if (CONFIG_DONT_BUILD)
		return;

	/* Check that source generators are up-to-date. */
	import updateAutomaticSourcesOnDemand from .kos.misc.magicgenerator.ondemand;
	updateAutomaticSourcesOnDemand(TARGET_ARCH, TARGET);

	/* Automatically re-build changed sources */
	buildToolchainsAndGroups();
}

function main(argv: {string...}) {
	local args = List(argv);
	print repr args;
	while (args) {
		local arg = args.pop(0);
		switch (arg) {
		case "-1":
		case "--single":
			CONFIG_MAX_COMPILERS = 1;
			break;
		case "-v":
		case "--verbose":
		case "--verbose=1":
			config.VERBOSE = true;
			break;
		case "--no-verbose":
		case "--verbose=0":
			config.VERBOSE = false;
			break;
		case "-E":
		case "--gen-pp":
			options.setdefault(OPT_COMPILE_SECONDARY, []).append("E");
			break;
		case "--no-gen-pp":
			options.get(OPT_COMPILE_SECONDARY).removeall("E");
			break;
		case "-S":
		case "--gen-asm":
			options.setdefault(OPT_COMPILE_SECONDARY, []).append("S");
			break;
		case "--no-gen-asm":
			options.get(OPT_COMPILE_SECONDARY).removeall("S");
			break;
		case "--run-only":
			CONFIG_DONT_BUILD = true;
			break;
		case "--libraries-only":
			CONFIG_ONLY_BUILD_LIBRARIES = true;
			break;
		case "--build-only":
		case "--no-emulator":
			CONFIG_EMULATOR_USED = none;
			break;
		case "-f":
		case "--force":
			config.FORCE = true;
			break;
		case "--no-force":
			config.FORCE = false;
			break;
		case "--qemu-hosted":
			CONFIG_EMULATOR_OPTIONS[emulator_options.QEMU_HOSTED] = true;
			break;
		case "--no-qemu-hosted":
			CONFIG_EMULATOR_OPTIONS[emulator_options.QEMU_HOSTED] = false;
			break;
		case "--format-error-messages":
			config.FORMAT_ERRORS = true;
			break;
		case "--no-format-error-messages":
			config.FORMAT_ERRORS = false;
			break;
		case "--":
			CONFIG_EMULATOR_OPTIONS[emulator_options.QEMU_CMDLINE] = " ".join(args);
			args = { };
			break;
		default:
			if ("=" in arg) {
				local name, none, value = arg.partition("=")...;
				local final BOOLMAP = { "0": false, "1": true };
				switch (name) {
				case "--echo":
					print "ECHO:", repr(value);
					break;
				case "--feature-test":
					import(".kos.misc.libmagic.featuretest")
						.generateCompilerSpecs(toolchain, value, COPYRIGHT);
					AppExit.exit(0);
					break;
				case "-n":
				case "--compilers":
					CONFIG_MAX_COMPILERS = int(value);
					break;
				case "--emulator":
					CONFIG_EMULATOR_USED = value;
					break;
				case "--changed":
					setForceChanged(normalizePath(value, true));
					break;
				case "--verbose":
					config.VERBOSE = BOOLMAP[value];
					break;
				case "--gdb":
					CONFIG_EMULATOR_OPTIONS[emulator_options.QEMU_GDB] = value;
					break;
				case "--emulator-started-pattern":
					CONFIG_EMULATOR_STARTED_PATTERN = value;
					break;
				case "--target":
					TARGET_ARCH = value;
					break;
				case "--config":
					setConfig(value);
					break;
				case "--vsgengroup":
					config.FORMAT_ERRORS = true;
				case "--gengroup":
					generateGroup(value);
					break;
				case "--vcautotargetconfig": {
					local target, config =
						import(".kos.misc.scripts.vsautoconfig")
						.parseCurrentVsConfiguration(value)...;
					TARGET_ARCH = target;
					setConfig(config);
				}	break;

				case "--vsgengroup-of":
					config.FORMAT_ERRORS = true;
				case "--gengroup-of":
					generateProjectOfInputFile(value);
					break;

				case "--vsgen":
					config.FORMAT_ERRORS = true;
				case "--gen":
					generateFile(value, false);
					break;

				case "--vsregen":
					config.FORMAT_ERRORS = true;
				case "--regen":
					generateFile(value, true);
					break;

				case "--driver": {
					for (local opt: value.split(":")) {
						local name = opt, cmdline = "";
						if ("," in opt)
							name, none, cmdline = opt.partition(",")...;
						CONFIG_MULTIBOOT_DRIVERS.append((name, cmdline));
					}
				}	break;

				default:
					goto _err_unknown_argument;
				}
			} else {
_err_unknown_argument:
				print "Unknown argument", repr arg;
				AppExit.exit(1);
			}
			break;
		}
	}
	fs.chdir(ROOTDIR);
	if (CONFIG_OPTIMIZE !is bound || CONFIG_DEBUG !is bound || TARGET_ARCH !is bound)
		loadMissingSettings();

	TARGET_REAL_ARCH = TARGET_ARCH;
	TARGET = import(".kos.misc.targets." + TARGET_ARCH);
	/* Build everything that was selected. */
	if (!CONFIG_DONT_BUILD) {
		if (hasattr(TARGET, "build")) {
			import . as me;
			TARGET.build(me);
		} else {
			build();
		}
	} else {
		build();
	}

	/* Start KOS with the selected emulator (if any). */
	if (CONFIG_EMULATOR_USED !is none) {
		/* Driver name without any slashes are automatically
		 * loaded from the /os/drivers directory. */
		for (local i, elem: util.enumerate(CONFIG_MULTIBOOT_DRIVERS)) {
			local name, cmdline = elem...;
			if ("/" !in name && "\\" !in name) {
				name = "bin/{}/os/drivers/{}".format({ TARGET_NAME, name });
				CONFIG_MULTIBOOT_DRIVERS[i] = (name, cmdline);
			}
		}
		if (CONFIG_EMULATOR_STARTED_PATTERN)
			print CONFIG_EMULATOR_STARTED_PATTERN;
		import(".kos.misc.magicemulator." + CONFIG_EMULATOR_USED).start(
			groups:        groups,
			config:        config,
			BINPATH:       TARGET_BINPATH[1:],
			KERNEL:        KERNEL_BINARY[1:],
			DRIVERS:       CONFIG_MULTIBOOT_DRIVERS,
			TARGET_ARCH:   TARGET_ARCH,
			TARGET:        TARGET,
			DISK_FILENAME: toolchain.options[TOOLCHAIN_MTOOLS_DISK],
			options:       CONFIG_EMULATOR_OPTIONS,
		);
	}
}

#if defined(__MAIN__) && __BASE_FILE__ == __FILE__
try {
	main([...][1:]);
} @[interrupt] catch (e...) {
	print e;
	print repr Traceback.current;
	File.Buffer.sync();
	print "ERROR";
	AppExit.exit(1);
}
File.Buffer.sync();
print "DONE";
AppExit.exit(0);
#endif
















