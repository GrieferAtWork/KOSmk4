final global COPYRIGHT=
"/* Copyright (c) 2019-2024 Griefer@Work                                       *
 *                                                                            *
 * This software is provided 'as-is', without any express or implied          *
 * warranty. In no event will the authors be held liable for any damages      *
 * arising from the use of this software.                                     *
 *                                                                            *
 * Permission is granted to anyone to use this software for any purpose,      *
 * including commercial applications, and to alter it and redistribute it     *
 * freely, subject to the following restrictions:                             *
 *                                                                            *
 * 1. The origin of this software must not be misrepresented; you must not    *
 *    claim that you wrote the original software. If you use this software    *
 *    in a product, an acknowledgement (see the following) in the product     *
 *    documentation is required:                                              *
 *    Portions Copyright (c) 2019-2024 Griefer@Work                           *
 * 2. Altered source versions must be plainly marked as such, and must not be *
 *    misrepresented as being the original software.                          *
 * 3. This notice may not be removed or altered from any source distribution. *
 */";

import fs;
import ipc;
import util;
import * from deemon;
import * from .kos.misc.libmagic.libmagic;
import * from .kos.misc.libmagic.steps.c;
import * from .kos.misc.libmagic.steps.mtools;
import * from .kos.misc.libmagic.steps.util;
import * from .kos.misc.libmagic.steps.elf;
import * from .kos.misc.libmagic.steps.elf_dilink;
import * from .kos.misc.libmagic.steps.custom;
import * from .kos.misc.libmagic.steps.keymap;
import * from .kos.misc.libmagic.toolchain.gcc;
import .kos.misc.config.configs;
import .kos.misc.magicemulator._options as emulatorOptions;
import AppExit from errors;

File.stdout.setbuf("line");
File.stderr.setbuf("line");

global OPT_MAX_COMPILERS: int = none;
global OPT_EMULATOR_USED: string = "qemu"; /* none or "qemu" / "bochs" */
global OPT_EMULATOR_OPTIONS: {string: string} = Dict();
global OPT_DONT_BUILD: bool = false;
global OPT_ONLY_BUILD_LIBRARIES: bool = false;
global OPT_EMULATOR_STARTED_PATTERN: string = none;
global OPT_MULTIBOOT_DRIVERS: {(string, string)...} = List();
global requiredOutputWhiteList: {(bool, string)...} | none = none;
global requiredGroupWhiteList: {string...} | none = none;
global requiredGroupOfSourceFileWhiteList: {string...} | none = none;
global config: Config = Config(LIBRARY_SUFFIX: ".so");
global toolchain: Toolchain = GCCToolchain(config: config);
global toolchainsAndGroups: {(Toolchain, {Group...})...};
global groups: {Group...} = [];
global options: {string: Object} = Dict();

/* Target configuration */
global TARGET_REAL_ARCH: string; /* Real target architecture (e.g. "i386") */
global TARGET_ARCH: string;      /* Target architecture (e.g. "i386") */
global TARGET_NAME: string;      /* Target configuration name (e.g. "i386-kos-OD") */
global TARGET: Module = none;    /* Target configuration module */
global TARGET_BINPATH: string;   /* Target binpath (e.g. "/bin/i386-kos-OD") */
global KERNEL_BINARY: string;

@@Called  by  emulators  once   the  emulator  has  been   started.
@@Preferrably called _after_ a GDB stub (if any) becomes available.
function onEmulatorStarted() {
	assert OPT_EMULATOR_STARTED_PATTERN !== false;
	if (OPT_EMULATOR_STARTED_PATTERN)
		print OPT_EMULATOR_STARTED_PATTERN;
	OPT_EMULATOR_STARTED_PATTERN = false;
}

function loadMissingSettings() {
	local targetName, configName = import(".kos.misc.build.autoconfig").getAutoConfig(
		rootDir: ROOTDIR, targetName: TARGET_ARCH is bound ? TARGET_ARCH : none)...;
	if (targetName is none || configName is none) {
		print log: "Unable to automatically determine --target=... and/or --config=...";
		AppExit.exit(1);
	}
	print log: "Automatically loaded settings:", repr targetName, repr configName;
	if (TARGET_ARCH !is bound)
		TARGET_ARCH = targetName;
	if (config.CONFIG is none)
		config.CONFIG = configs.getConfiguration(configName);
}

function generateFile(filename: string, isRegEx: bool) {
	if (requiredOutputWhiteList is none)
		requiredOutputWhiteList = HashSet();
	if (!isRegEx) {
		if (filename.startswith("/"))
			filename = fs.abspath(filename.lstrip("/"), ROOTDIR);
		else {
			filename = fs.abspath(filename);
		}
		filename = normalizePath(filename, false);
	}
	requiredOutputWhiteList.insert((isRegEx, filename));
	OPT_EMULATOR_USED = none;
}

function generateGroup(name: string) {
	if (requiredGroupWhiteList is none)
		requiredGroupWhiteList = HashSet();
	requiredGroupWhiteList.insert(name);
	OPT_EMULATOR_USED = none;
}

function generateProjectOfInputFile(filename: string) {
	if (requiredGroupOfSourceFileWhiteList is none)
		requiredGroupOfSourceFileWhiteList = HashSet();
	filename = filename.startswith("/")
		? fs.abspath(filename.lstrip("/"), ROOTDIR)
		: fs.abspath(filename);
	filename = normalizePath(filename, false);
	requiredGroupOfSourceFileWhiteList.insert(filename);
	OPT_EMULATOR_USED = none;
}

function buildToolchainsAndGroups() {
	if (OPT_MAX_COMPILERS is none)
		OPT_MAX_COMPILERS = try import("posix").cpu_count() catch (...) 1;
	if (requiredOutputWhiteList !is none) {
		return buildGroupsWithOutputWhitelist(
			toolchainsAndGroups: toolchainsAndGroups,
			outputWhiteList:     requiredOutputWhiteList,
			maxParallelSteps:    OPT_MAX_COMPILERS);
	} else if (requiredGroupWhiteList !is none) {
		return buildGroupsWithGroupWhitelist(
			toolchainsAndGroups: toolchainsAndGroups,
			groupWhiteList:      requiredGroupWhiteList,
			maxParallelSteps:    OPT_MAX_COMPILERS);
	} else if (requiredGroupOfSourceFileWhiteList !is none) {
		return buildGroupsWithGroupOfInputFileWhitelist(
			toolchainsAndGroups: toolchainsAndGroups,
			inputFileWhitelist:  requiredGroupOfSourceFileWhiteList,
			maxParallelSteps:    OPT_MAX_COMPILERS);
	} else {
		return buildGroups(
			toolchainsAndGroups: toolchainsAndGroups,
			maxParallelSteps:    OPT_MAX_COMPILERS);
	}
}

function setBinTargetLink(targetArch: string, targetName: string) {
	/* Make sure that the correct bin-config is selected. */
	local selConfigFile = f"bin/{targetArch}-kos";
	local selConfig = readlink(selConfigFile);
	if (selConfig !is string || selConfig != targetName) {
		if (selConfig !is none) {
			try {
				fs.unlink(selConfigFile);
			} catch (...) {
			}
		}
		print log: ("Changing libpath: `ln -s ", repr(targetName), " ", repr(selConfigFile), "`");
		local p = ipc.Process(f"ln -s {targetName} {selConfigFile}");
		p.start();
		joinProcess(p);
	}
}

function build(reconfigure: Callable = none, binTargetName: string = none) {
	TARGET_NAME = f"{TARGET_ARCH}-kos-{config.CONFIG.name}";
	if (binTargetName is none)
		binTargetName = TARGET_NAME;
	setBinTargetLink(TARGET_ARCH, binTargetName);

	/* To speed up compilation, provide some known-good values
	 * for standard library paths valid for the KOS  toolchain */
	TARGET.provideToolchainCache(toolchain, TARGET_NAME);

	/* Apply target configurations. */
	config.CROSS_PREFIX = TARGET.CROSS_PREFIX;
	config.BUILD_PATH = "build/" + TARGET_NAME;
	TARGET_BINPATH = "/bin/" + binTargetName;
	KERNEL_BINARY  = TARGET_BINPATH + "/os/kernel.bin";

	/* Configure MTOOLS build steps */
	toolchain.options[TOOLCHAIN_MTOOLS_EXE]  = "binutils/misc/bin/mtools";
	toolchain.options[TOOLCHAIN_MTOOLS_DISK] = TARGET_BINPATH[1:] + "/disk.img";

	import . as me;
	reconfigure(me);

	{
		final local TARGET = __nth(2) TARGET;
		final local XARCH  = TARGET.XARCH;
		final local SUFFIX = TARGET.SUFFIX;
		final local ASMFILES = TARGET.ASMFILES;
		final local XARCH_ASMFILES = f"{XARCH}/{ASMFILES}";
		final local DISK_LIBPATH = TARGET.DISK_LIBPATH;
		final local DISK_USRLIBPATH = TARGET.DISK_USRLIBPATH;
#define BEGIN           { local options = deepcopy __nth(2) options;
#define BEGIN_ANONYMOUS { local options = Dict();
#define END             }
#include "kos/.sources"
	}

	toolchainsAndGroups = { (toolchain, groups) };

	/* NOTE: Must always load groups for stuff like like magic-driven %{vinfo} */
	if (OPT_DONT_BUILD)
		return;

	/* Check that source generators are up-to-date. */
	import updateAutomaticSourcesOnDemand from .kos.misc.magicgenerator.ondemand;
	updateAutomaticSourcesOnDemand(TARGET_ARCH, TARGET);

	/* Automatically re-build changed sources */
	buildToolchainsAndGroups();
}

function main(argv: {string...}) {
	local args = List(argv);
	print log: repr args;
	while (args) {
		local arg = args.pop(0);
		switch (arg) {

		case "-1":
			OPT_MAX_COMPILERS = 1;
			break;

		case "-v":
		case "--verbose":
			config.VERBOSE = true;
			break;

		case "-E":
			options.setdefault(OPT_COMPILE_SECONDARY, []).append("E");
			OPT_EMULATOR_USED = none;
			break;

		case "-S":
			options.setdefault(OPT_COMPILE_SECONDARY, []).append("S");
			OPT_EMULATOR_USED = none;
			break;

		case "--run-only":
			OPT_DONT_BUILD = true;
			break;

		case "--libraries-only":
			OPT_ONLY_BUILD_LIBRARIES = true;
			break;

		case "--build-only":
			OPT_EMULATOR_USED = none;
			break;

		case "-f":
			config.FORCE = true;
			break;

		case "--emulator-hosted":
			OPT_EMULATOR_OPTIONS[emulatorOptions.HOSTED] = "true";
			break;

		case "--format-error-messages":
			config.FORMAT_ERRORS = true;
			break;

		case "--":
			OPT_EMULATOR_OPTIONS[emulatorOptions.CMDLINE] = " ".join(args);
			args = { };
			break;

		case "--install-sh":
			/* Like with `make_utility.sh', this option should cause magic to do
			 * a normal build, but redirect  build progress messages to  stderr.
			 *
			 * MTOOLS steps are overwritten to instead print a shell-script that
			 * can  be used to  copy produced binaries  into a custom `$DESTDIR' */
			OPT_EMULATOR_USED = none;
			import(".kos.misc.libmagic.steps.mtools-install-sh").hook();
			break;

		case "--target":
			if (config.CONFIG is none || TARGET_ARCH !is bound)
				loadMissingSettings();
			print(TARGET_ARCH, "-kos-", config.CONFIG.name);
			AppExit.exit(0);

		case "--config":
			/* List available configs */
			print("Available configurations:");
			for (local name: configs.listConfigurationNames())
				print("\t", name);
			AppExit.exit(0);

		case "--checker":
			options.setdefault(OPT_COMPILE_SECONDARY, [])
				.append("checker");
			OPT_EMULATOR_USED = none;
			break;

		default:
			if ("=" in arg) {
				local name, none, value = arg.partition("=")...;
				switch (name) {
				case "--echo":
					print "ECHO:", repr(value);
					break;
				case "-n":
					OPT_MAX_COMPILERS = int(value);
					break;
				case "--emulator-setopt": {
					if ("=" !in value)
						throw Error(f"--emulator-setopt requires the operand to contain '=', but {repr(value)} doesn't");
					local optnam, none, optval = value.partition("=")...;
					OPT_EMULATOR_OPTIONS[optnam] = optval;
				}	break;
				case "--emulator":
					OPT_EMULATOR_USED = value;
					break;
				case "--changed":
					setForceChanged(normalizePath(value, true));
					break;
				case "--verbose": {
					local final BOOLMAP = { "0": false, "1": true };
					config.VERBOSE = BOOLMAP[value];
				}	break;
				case "--gdb":
					OPT_EMULATOR_OPTIONS[emulatorOptions.GDB] = value;
					break;
				case "--emulator-started-pattern":
					OPT_EMULATOR_STARTED_PATTERN = value;
					break;
				case "--target":
					if (value != "${env.TARGET}")
						TARGET_ARCH = value;
					break;
				case "--config":
					if (value != "${env.CONFIG}")
						config.CONFIG = configs.getConfiguration(value);
					break;
				case "--vsgengroup":
					config.FORMAT_ERRORS = true;
				case "--gengroup":
					generateGroup(value);
					break;
				case "--vcautotargetconfig": {
					local targetName, configName =
						import(".kos.misc.build.vsautoconfig")
							.parseCurrentVsConfiguration(value)...;
					TARGET_ARCH = targetName;
					config.CONFIG = configs.getConfiguration(configName);
				}	break;

				case "--vsgengroup-of":
					config.FORMAT_ERRORS = true;
				case "--gengroup-of":
					generateProjectOfInputFile(value);
					break;

				case "--vsgen":
					config.FORMAT_ERRORS = true;
				case "--gen":
					generateFile(value, false);
					break;

				case "--vsregen":
					config.FORMAT_ERRORS = true;
				case "--regen":
					generateFile(value, true);
					break;

				case "--driver": {
					for (local opt: value.split(":")) {
						local name = opt, cmdline = "";
						if ("," in opt)
							name, none, cmdline = opt.partition(",")...;
						OPT_MULTIBOOT_DRIVERS.append((name, cmdline));
					}
				}	break;

				case "--clang-tidy":
					options.setdefault(OPT_COMPILE_SECONDARY, [])
						.append("clang-tidy=" + value);
					OPT_EMULATOR_USED = none;
					break;

				case "--lint":
					options.setdefault(OPT_COMPILE_SECONDARY, [])
						.append("lint=" + value);
					/* Configure clang-tidy macros and options. */
					{
						local mac = options.setdefault(OPT_COMPILE_MACROS, Dict());
						mac["__KOS__"] = "1";
						mac["__ELF__"] = "1";
						if (TARGET_ARCH !is bound)
							loadMissingSettings();
						mac["__" + TARGET_ARCH + "__"] = "1";
					}
					options.setdefault(OPT_COMPILE_LINT_ARGS, []).extend({
						"-Ikos/include/i386-kos", /* FIXME: Don't hardcode here! */
						"-Ikos/include",
					});
					OPT_EMULATOR_USED = none;
					break;

				case "--environ": {
					local name;
					name, none, value = value.partition("=")...;
					fs.environ[name] = value;
				}	break;

				default:
					goto _err_unknown_argument;
				}
			} else {
_err_unknown_argument:
				print "Unknown argument", repr arg;
				AppExit.exit(1);
			}
			break;
		}
	}
	fs.chdir(ROOTDIR);
	if (config.CONFIG is none || TARGET_ARCH !is bound)
		loadMissingSettings();

	TARGET_REAL_ARCH = TARGET_ARCH;
	TARGET = import(".kos.misc.targets." + TARGET_ARCH);
	/* Build everything that was selected. */
	if (!OPT_DONT_BUILD) {
		/* Update the vs MIEngine work-around config build */
		if (fs.stat.isdir(".vs")) {
			import(".kos.misc.build.make-vs-proj-update-mioptions")
				.selectMiOptions(TARGET_ARCH, config.CONFIG.name);
		}
		if (hasattr(TARGET, "build")) {
			import . as me;
			TARGET.build(me);
		} else {
			build();
		}
	} else {
		build();
	}

	/* Start KOS with the selected emulator (if any). */
	if (OPT_EMULATOR_USED !is none) {
		/* Driver name without any slashes are automatically
		 * loaded   from    the    /os/drivers    directory. */
		for (local i, elem: util.enumerate(OPT_MULTIBOOT_DRIVERS)) {
			local name, cmdline = elem...;
			if ("/" !in name && "\\" !in name) {
				name = f"bin/{TARGET_NAME}/os/drivers/{name}";
				OPT_MULTIBOOT_DRIVERS[i] = (name, cmdline);
			}
		}
		import . as me;
		import(".kos.misc.magicemulator." + OPT_EMULATOR_USED).start(
			groups:        groups,
			config:        config,
			BINPATH:       TARGET_BINPATH[1:],
			KERNEL:        KERNEL_BINARY[1:],
			DRIVERS:       OPT_MULTIBOOT_DRIVERS,
			TARGET_ARCH:   TARGET_ARCH,
			TARGET:        TARGET,
			DISK_FILENAME: toolchain.options[TOOLCHAIN_MTOOLS_DISK],
			options:       OPT_EMULATOR_OPTIONS,
			magic:         me
		);
	}
}

#if defined(__MAIN__) && __BASE_FILE__ == __FILE__
try {
	main([...][1:]);
} @[interrupt] catch (e...) {
	print log: e;
	print log: Traceback.current;
	File.Buffer.sync();
	print log: "ERROR";
	AppExit.exit(1);
}
File.Buffer.sync();
print log: "DONE";
AppExit.exit(0);
#endif
